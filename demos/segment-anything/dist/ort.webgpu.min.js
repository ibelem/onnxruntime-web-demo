/*!
 * ONNX Runtime Web v1.18.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var ort=(()=>{var ki=Object.defineProperty;var tc=Object.getOwnPropertyDescriptor;var rc=Object.getOwnPropertyNames;var nc=Object.prototype.hasOwnProperty;var j=(e,t)=>()=>(e&&(t=e(e=0)),t);var xr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),sr=(e,t)=>{for(var r in t)ki(e,r,{get:t[r],enumerable:!0})},ic=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of rc(t))!nc.call(e,i)&&i!==r&&ki(e,i,{get:()=>t[i],enumerable:!(n=tc(t,i))||n.enumerable});return e};var Kt=e=>ic(ki({},"__esModule",{value:!0}),e);var zn,ur,Yt,ac,Bn,Dn=j(()=>{"use strict";zn=new Map,ur=[],Yt=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let n=zn.get(e);if(n===void 0)zn.set(e,{backend:t,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let i=ur.indexOf(e);i!==-1&&ur.splice(i,1);for(let s=0;s<ur.length;s++)if(zn.get(ur[s]).priority<=r){ur.splice(s,0,e);return}ur.push(e)}return}throw new TypeError("not a valid backend")},ac=async e=>{let t=zn.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(n){return r||(t.error=`${n}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},Bn=async e=>{let t=e.executionProviders||[],r=t.map(p=>typeof p=="string"?p:p.name),n=r.length===0?ur:r,i,s=[],o=new Set;for(let p of n){let m=await ac(p);typeof m=="string"?s.push({name:p,err:m}):(i||(i=m),i===m&&o.add(p))}if(!i)throw new Error(`no available backend found. ERR: ${s.map(p=>`[${p.name}] ${p.err}`).join(", ")}`);for(let{name:p,err:m}of s)r.includes(p)&&console.warn(`removing requested execution provider "${p}" from session options because it is not available: ${m}`);let d=t.filter(p=>o.has(typeof p=="string"?p:p.name));return[i,new Proxy(e,{get:(p,m)=>m==="executionProviders"?d:Reflect.get(p,m)})]}});var eo=j(()=>{"use strict";Dn()});var to,ro=j(()=>{"use strict";to="1.18.0"});var no,wt,Pi=j(()=>{"use strict";ro();no="warning",wt={wasm:{},webgl:{},webgpu:{},versions:{common:to},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);no=e}},get logLevel(){return no}};Object.defineProperty(wt,"logLevel",{enumerable:!0})});var Ee,io=j(()=>{"use strict";Pi();Ee=wt});var ao,oo,so=j(()=>{"use strict";ao=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let n=r.getContext("2d");if(n!=null){let i,s;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(i=e.dims[2],s=e.dims[3]):(i=e.dims[3],s=e.dims[2]);let o=t?.format!==void 0?t.format:"RGB",d=t?.norm,p,m;d===void 0||d.mean===void 0?p=[255,255,255,255]:typeof d.mean=="number"?p=[d.mean,d.mean,d.mean,d.mean]:(p=[d.mean[0],d.mean[1],d.mean[2],0],d.mean[3]!==void 0&&(p[3]=d.mean[3])),d===void 0||d.bias===void 0?m=[0,0,0,0]:typeof d.bias=="number"?m=[d.bias,d.bias,d.bias,d.bias]:(m=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(m[3]=d.bias[3]));let l=s*i,g=0,b=l,$=l*2,v=-1;o==="RGBA"?(g=0,b=l,$=l*2,v=l*3):o==="RGB"?(g=0,b=l,$=l*2):o==="RBG"&&(g=0,$=l,b=l*2);for(let S=0;S<s;S++)for(let T=0;T<i;T++){let I=(e.data[g++]-m[0])*p[0],x=(e.data[b++]-m[1])*p[1],O=(e.data[$++]-m[2])*p[2],A=v===-1?255:(e.data[v++]-m[3])*p[3];n.fillStyle="rgba("+I+","+x+","+O+","+A+")",n.fillRect(T,S,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},oo=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),n;if(r!=null){let i,s,o;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(i=e.dims[2],s=e.dims[1],o=e.dims[3]):(i=e.dims[3],s=e.dims[2],o=e.dims[1]);let d=t!==void 0&&t.format!==void 0?t.format:"RGB",p=t?.norm,m,l;p===void 0||p.mean===void 0?m=[255,255,255,255]:typeof p.mean=="number"?m=[p.mean,p.mean,p.mean,p.mean]:(m=[p.mean[0],p.mean[1],p.mean[2],255],p.mean[3]!==void 0&&(m[3]=p.mean[3])),p===void 0||p.bias===void 0?l=[0,0,0,0]:typeof p.bias=="number"?l=[p.bias,p.bias,p.bias,p.bias]:(l=[p.bias[0],p.bias[1],p.bias[2],0],p.bias[3]!==void 0&&(l[3]=p.bias[3]));let g=s*i;if(t!==void 0&&(t.format!==void 0&&o===4&&t.format!=="RGBA"||o===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let b=4,$=0,v=1,S=2,T=3,I=0,x=g,O=g*2,A=-1;d==="RGBA"?(I=0,x=g,O=g*2,A=g*3):d==="RGB"?(I=0,x=g,O=g*2):d==="RBG"&&(I=0,O=g,x=g*2),n=r.createImageData(i,s);for(let P=0;P<s*i;$+=b,v+=b,S+=b,T+=b,P++)n.data[$]=(e.data[I++]-l[0])*m[0],n.data[v]=(e.data[x++]-l[1])*m[1],n.data[S]=(e.data[O++]-l[2])*m[2],n.data[T]=A===-1?255:(e.data[A++]-l[3])*m[3]}else throw new Error("Can not access image data");return n}});var Ri,uo,lo,co,po,fo=j(()=>{"use strict";Mn();Ri=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:n}=t,i=t.norm??{mean:255,bias:0},s,o;typeof i.mean=="number"?s=[i.mean,i.mean,i.mean,i.mean]:s=[i.mean[0],i.mean[1],i.mean[2],i.mean[3]??255],typeof i.bias=="number"?o=[i.bias,i.bias,i.bias,i.bias]:o=[i.bias[0],i.bias[1],i.bias[2],i.bias[3]??0];let d=t.format!==void 0?t.format:"RGBA",p=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",m=r*n,l=p==="RGBA"?new Float32Array(m*4):new Float32Array(m*3),g=4,b=0,$=1,v=2,S=3,T=0,I=m,x=m*2,O=-1;d==="RGB"&&(g=3,b=0,$=1,v=2,S=-1),p==="RGBA"?O=m*3:p==="RBG"?(T=0,x=m,I=m*2):p==="BGR"&&(x=0,I=m,T=m*2);for(let P=0;P<m;P++,b+=g,v+=g,$+=g,S+=g)l[T++]=(e[b]+o[0])/s[0],l[I++]=(e[$]+o[1])/s[1],l[x++]=(e[v]+o[2])/s[2],O!==-1&&S!==-1&&(l[O++]=(e[S]+o[3])/s[3]);return p==="RGBA"?new st("float32",l,[1,4,r,n]):new st("float32",l,[1,3,r,n])},uo=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,i=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s=typeof e=="string",o,d=t??{},p=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},m=l=>l instanceof HTMLCanvasElement||l instanceof OffscreenCanvas?l.getContext("2d"):null;if(r){let l=p();l.width=e.width,l.height=e.height;let g=m(l);if(g!=null){let b=e.height,$=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(b=t.resizedHeight,$=t.resizedWidth),t!==void 0){if(d=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");d.tensorFormat="RGBA",d.height=b,d.width=$}else d.tensorFormat="RGBA",d.height=b,d.width=$;g.drawImage(e,0,0),o=g.getImageData(0,0,$,b).data}else throw new Error("Can not access image data")}else if(n){let l,g;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(l=t.resizedHeight,g=t.resizedWidth):(l=e.height,g=e.width),t!==void 0&&(d=t),d.format="RGBA",d.height=l,d.width=g,t!==void 0){let b=p();b.width=g,b.height=l;let $=m(b);if($!=null)$.putImageData(e,0,0),o=$.getImageData(0,0,g,l).data;else throw new Error("Can not access image data")}else o=e.data}else if(i){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let l=p();l.width=e.width,l.height=e.height;let g=m(l);if(g!=null){let b=e.height,$=e.width;return g.drawImage(e,0,0,$,b),o=g.getImageData(0,0,$,b).data,d.height=b,d.width=$,Ri(o,d)}else throw new Error("Can not access image data")}else{if(s)return new Promise((l,g)=>{let b=p(),$=m(b);if(!e||!$)return g();let v=new Image;v.crossOrigin="Anonymous",v.src=e,v.onload=()=>{b.width=v.width,b.height=v.height,$.drawImage(v,0,0,b.width,b.height);let S=$.getImageData(0,0,b.width,b.height);d.height=b.height,d.width=b.width,l(Ri(S.data,d))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(o!==void 0)return Ri(o,d);throw new Error("Input data provided is not supported - aborted tensor creation")},lo=(e,t)=>{let{width:r,height:n,download:i,dispose:s}=t,o=[1,n,r,4];return new st({location:"texture",type:"float32",texture:e,dims:o,download:i,dispose:s})},co=(e,t)=>{let{dataType:r,dims:n,download:i,dispose:s}=t;return new st({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:i,dispose:s})},po=(e,t,r)=>new st({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var lr,Zr,mo,ho,go=j(()=>{"use strict";lr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),Zr=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),mo=!1,ho=()=>{if(!mo){mo=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=typeof Float16Array<"u"&&Float16Array.from;e&&(lr.set("int64",BigInt64Array),Zr.set(BigInt64Array,"int64")),t&&(lr.set("uint64",BigUint64Array),Zr.set(BigUint64Array,"uint64")),r?(lr.set("float16",Float16Array),Zr.set(Float16Array,"float16")):lr.set("float16",Uint16Array)}}});var yo,bo,wo=j(()=>{"use strict";Mn();yo=e=>{let t=1;for(let r=0;r<e.length;r++){let n=e[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},bo=(e,t)=>{switch(e.location){case"cpu":return new st(e.type,e.data,t);case"cpu-pinned":return new st({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new st({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new st({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var st,Mn=j(()=>{"use strict";so();fo();go();wo();st=class{constructor(t,r,n){ho();let i,s;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,i=t.type,s=t.dims,t.location){case"cpu-pinned":{let d=lr.get(i);if(!d)throw new TypeError(`unsupported type "${i}" to create tensor from pinned buffer`);if(!(t.data instanceof d))throw new TypeError(`buffer should be of type ${d.name}`);this.cpuData=t.data;break}case"texture":{if(i!=="float32")throw new TypeError(`unsupported type "${i}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(i!=="float32"&&i!=="float16"&&i!=="int32"&&i!=="int64"&&i!=="uint32"&&i!=="uint8"&&i!=="bool")throw new TypeError(`unsupported type "${i}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let d,p;if(typeof t=="string")if(i=t,p=n,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");d=r}else{let m=lr.get(t);if(m===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16"&&m===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?d=m.from(r,BigInt):d=m.from(r)}else if(r instanceof m)d=r;else throw new TypeError(`A ${i} tensor's data must be type of ${m}`)}else if(p=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let m=typeof t[0];if(m==="string")i="string",d=t;else if(m==="boolean")i="bool",d=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${m}.`)}else{let m=Zr.get(t.constructor);if(m===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);i=m,d=t}if(p===void 0)p=[d.length];else if(!Array.isArray(p))throw new TypeError("A tensor's dims must be a number array");s=p,this.cpuData=d,this.dataLocation="cpu"}let o=yo(s);if(this.cpuData&&o!==this.cpuData.length)throw new Error(`Tensor's size(${o}) does not match data length(${this.cpuData.length}).`);this.type=i,this.dims=s,this.size=o}static async fromImage(t,r){return uo(t,r)}static fromTexture(t,r){return lo(t,r)}static fromGpuBuffer(t,r){return co(t,r)}static fromPinnedBuffer(t,r,n){return po(t,r,n)}toDataURL(t){return ao(this,t)}toImageData(t){return oo(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return bo(this,t)}}});var Je,Un=j(()=>{"use strict";Mn();Je=st});var Qr,vo,pt,ut,zi=j(()=>{"use strict";Pi();Qr=(e,t)=>{(typeof wt.trace>"u"?!wt.wasm.trace:!wt.trace)||console.timeStamp(`${e}::ORT::${t}`)},vo=(e,t)=>{let r=new Error().stack?.split(/\r\n|\r|\n/g)||[],n=!1;for(let i=0;i<r.length;i++){if(n&&!r[i].includes("TRACE_FUNC")){let s=`FUNC_${e}::${r[i].trim().split(" ")[1]}`;t&&(s+=`::${t}`),Qr("CPU",s);return}r[i].includes("TRACE_FUNC")&&(n=!0)}},pt=e=>{(typeof wt.trace>"u"?!wt.wasm.trace:!wt.trace)||vo("BEGIN",e)},ut=e=>{(typeof wt.trace>"u"?!wt.wasm.trace:!wt.trace)||vo("END",e)}});var Wn,$o=j(()=>{"use strict";Dn();Un();zi();Wn=class e{constructor(t){this.handler=t}async run(t,r,n){pt();let i={},s={};if(typeof t!="object"||t===null||t instanceof Je||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let o=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Je)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");o=!1;for(let m of r){if(typeof m!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(m)===-1)throw new RangeError(`'fetches' contains invalid output name: ${m}.`);i[m]=null}if(typeof n=="object"&&n!==null)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let m=!1,l=Object.getOwnPropertyNames(r);for(let g of this.outputNames)if(l.indexOf(g)!==-1){let b=r[g];(b===null||b instanceof Je)&&(m=!0,o=!1,i[g]=b)}if(m){if(typeof n=="object"&&n!==null)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let m of this.inputNames)if(typeof t[m]>"u")throw new Error(`input '${m}' is missing in 'feeds'.`);if(o)for(let m of this.outputNames)i[m]=null;let d=await this.handler.run(t,i,s),p={};for(let m in d)if(Object.hasOwnProperty.call(d,m)){let l=d[m];l instanceof Je?p[m]=l:p[m]=new Je(l.type,l.data,l.dims)}return ut(),p}async release(){return this.handler.dispose()}static async create(t,r,n,i){pt();let s,o={};if(typeof t=="string"){if(s=t,typeof r=="object"&&r!==null)o=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(s=t,typeof r=="object"&&r!==null)o=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let l=t,g=0,b=t.byteLength;if(typeof r=="object"&&r!==null)o=r;else if(typeof r=="number"){if(g=r,!Number.isSafeInteger(g))throw new RangeError("'byteOffset' must be an integer.");if(g<0||g>=l.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${l.byteLength}).`);if(b=t.byteLength-g,typeof n=="number"){if(b=n,!Number.isSafeInteger(b))throw new RangeError("'byteLength' must be an integer.");if(b<=0||g+b>l.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${l.byteLength-g}].`);if(typeof i=="object"&&i!==null)o=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");s=new Uint8Array(l,g,b)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[d,p]=await Bn(o),m=await d.createInferenceSessionHandler(s,p);return ut(),new e(m)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var _o,So=j(()=>{"use strict";$o();_o=Wn});var xo=j(()=>{"use strict"});var Co=j(()=>{"use strict"});var Io=j(()=>{"use strict"});var Ao=j(()=>{"use strict"});var oc,Nn,To=j(()=>{"use strict";Dn();Un();oc="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Nn=class e{constructor(t,r,n){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let n=t.evalModel||"",i=t.optimizerModel||"",s=r||{},[o,d]=await Bn(s);if(o.createTrainingSessionHandler){let p=await o.createTrainingSessionHandler(t.checkpointState,t.trainModel,n,i,d);return new e(p,!!t.optimizerModel,!!t.evalModel)}else throw new Error(oc)}typeNarrowingForRunStep(t,r,n,i,s){let o={},d={};if(typeof n!="object"||n===null||n instanceof Je||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let p=!0;if(typeof i=="object"){if(i===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(i instanceof Je)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(i)){if(i.length===0)throw new TypeError("'fetches' cannot be an empty array.");p=!1;for(let m of i){if(typeof m!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(m)===-1)throw new RangeError(`'fetches' contains invalid output name: ${m}.`);o[m]=null}if(typeof s=="object"&&s!==null)d=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else{let m=!1,l=Object.getOwnPropertyNames(i);for(let g of r)if(l.indexOf(g)!==-1){let b=i[g];(b===null||b instanceof Je)&&(m=!0,p=!1,o[g]=b)}if(m){if(typeof s=="object"&&s!==null)d=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else d=i}}else if(typeof i<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let m of t)if(typeof n[m]>"u")throw new Error(`input '${m}' is missing in 'feeds'.`);if(p)for(let m of r)o[m]=null;return[o,d]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let n in t)if(Object.hasOwnProperty.call(t,n)){let i=t[n];i instanceof Je?r[n]=i:r[n]=new Je(i.type,i.data,i.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,n){let[i,s]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,n),o=await this.handler.runTrainStep(t,i,s);return this.convertHandlerReturnTypeToMapOfTensors(o)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,n){if(this.hasEvalModel){let[i,s]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,n),o=await this.handler.runEvalStep(t,i,s);return this.convertHandlerReturnTypeToMapOfTensors(o)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let n=await this.getParametersSize(r);if(t.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var Eo,Oo=j(()=>{"use strict";To();Eo=Nn});var Bi={};sr(Bi,{InferenceSession:()=>_o,TRACE:()=>Qr,TRACE_FUNC_BEGIN:()=>pt,TRACE_FUNC_END:()=>ut,Tensor:()=>Je,TrainingSession:()=>Eo,env:()=>Ee,registerBackend:()=>Yt});var _t=j(()=>{"use strict";eo();io();So();Un();xo();Co();zi();Io();Ao();Oo()});var Di={};sr(Di,{createReadStream:()=>Po,readFile:()=>sc,readFileSync:()=>uc});var sc,uc,Po,Mi=j(()=>{sc=void 0,uc=void 0,Po=void 0});var Ui={};sr(Ui,{join:()=>lc});var lc,Wi=j(()=>{lc=void 0});var Bo=xr((zo,Ni)=>{"use strict";var Ro=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,n,i;r.ready=new Promise((u,f)=>{n=u,i=f}),r.mountExternalData=(u,f)=>{(r.gb||(r.gb=new Map)).set(u,f)},r.unmountExternalData=()=>{delete r.gb};let s=()=>{let u=(y,_,E)=>(...z)=>{let H=nt,q=_?.();z=y(...z);let J=_?.();return q!==J&&(y=J,E(q),_=E=null),nt!=H?gn():z},f=y=>async(..._)=>{try{if(r.fb)throw Error("Session already started");let E=r.fb={Eb:_[0],errors:[]},z=await y(..._);if(r.fb!==E)throw Error("Session mismatch");r.ob?.flush();let H=E.errors;if(0<H.length){let q=await Promise.all(H);if(q=q.filter(J=>J),0<q.length)throw Error(q.join(`
`))}return z}finally{r.fb=null}};r._OrtCreateSession=u(r._OrtCreateSession,()=>r._OrtCreateSession,y=>r._OrtCreateSession=y),r._OrtRun=f(u(r._OrtRun,()=>r._OrtRun,y=>r._OrtRun=y)),r._OrtRunWithBinding=f(u(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,y=>r._OrtRunWithBinding=y)),r._OrtBindInput=u(r._OrtBindInput,()=>r._OrtBindInput,y=>r._OrtBindInput=y),s=void 0};r.jsepInit=(u,f)=>{if(s?.(),u==="webgpu"){[r.ob,r.wb,r.Ab,r.pb,r.zb,r.Sa,r.Bb,r.Db,r.xb,r.yb,r.Cb]=f;let y=r.ob;r.jsepRegisterBuffer=(_,E,z,H)=>y.registerBuffer(_,E,z,H),r.jsepGetBuffer=_=>y.getBuffer(_),r.jsepCreateDownloader=(_,E,z)=>y.createDownloader(_,E,z),r.jsepOnReleaseSession=_=>{y.onReleaseSession(_)},r.jsepOnRunStart=_=>y.onRunStart(_)}};var o=Object.assign({},r),d="./this.program",p=(u,f)=>{throw f},m=typeof window=="object",l=typeof importScripts=="function",g=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",b="",$,v,S;if(g){var T=(Mi(),Kt(Di)),I=(Wi(),Kt(Ui));b=l?I.dirname(b)+"/":__dirname+"/",$=(u,f)=>(u=xe(u)?new URL(u):I.normalize(u),T.readFileSync(u,f?void 0:"utf8")),S=u=>(u=$(u,!0),u.buffer||(u=new Uint8Array(u)),u),v=(u,f,y,_=!0)=>{u=xe(u)?new URL(u):I.normalize(u),T.readFile(u,_?void 0:"utf8",(E,z)=>{E?y(E):f(_?z.buffer:z)})},!r.thisProgram&&1<process.argv.length&&(d=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),p=(u,f)=>{throw process.exitCode=u,f},r.inspect=()=>"[Emscripten Module object]"}else(m||l)&&(l?b=self.location.href:typeof document<"u"&&document.currentScript&&(b=document.currentScript.src),e&&(b=e),b.indexOf("blob:")!==0?b=b.substr(0,b.replace(/[?#].*/,"").lastIndexOf("/")+1):b="",$=u=>{var f=new XMLHttpRequest;return f.open("GET",u,!1),f.send(null),f.responseText},l&&(S=u=>{var f=new XMLHttpRequest;return f.open("GET",u,!1),f.responseType="arraybuffer",f.send(null),new Uint8Array(f.response)}),v=(u,f,y)=>{var _=new XMLHttpRequest;_.open("GET",u,!0),_.responseType="arraybuffer",_.onload=()=>{_.status==200||_.status==0&&_.response?f(_.response):y()},_.onerror=y,_.send(null)});var x=console.log.bind(console),O=console.error.bind(console);Object.assign(r,o),o=null,typeof WebAssembly!="object"&&F("no native wasm support detected");var A,P=!1,N,V,G,ie,Z,U,re,Be,Oe,Ie,te;function Me(){var u=A.buffer;r.HEAP8=V=new Int8Array(u),r.HEAP16=ie=new Int16Array(u),r.HEAPU8=G=new Uint8Array(u),r.HEAPU16=Z=new Uint16Array(u),r.HEAP32=U=new Int32Array(u),r.HEAPU32=re=new Uint32Array(u),r.HEAPF32=Be=new Float32Array(u),r.HEAPF64=te=new Float64Array(u),r.HEAP64=Oe=new BigInt64Array(u),r.HEAPU64=Ie=new BigUint64Array(u)}var ye=[],he=[],ue=[],ge=0,ke=null,Fe=null;function F(u){throw u="Aborted("+u+")",O(u),P=!0,N=1,u=new WebAssembly.RuntimeError(u+". Build with -sASSERTIONS for more info."),i(u),u}var ae=u=>u.startsWith("data:application/octet-stream;base64,"),xe=u=>u.startsWith("file://"),Ge;if(Ge="ort-wasm-simd.wasm",!ae(Ge)){var Xe=Ge;Ge=r.locateFile?r.locateFile(Xe,b):b+Xe}function ht(u){if(S)return S(u);throw"both async and sync fetching of the wasm failed"}function rt(u){if(m||l){if(typeof fetch=="function"&&!xe(u))return fetch(u,{credentials:"same-origin"}).then(f=>{if(!f.ok)throw"failed to load wasm binary file at '"+u+"'";return f.arrayBuffer()}).catch(()=>ht(u));if(v)return new Promise((f,y)=>{v(u,_=>f(new Uint8Array(_)),y)})}return Promise.resolve().then(()=>ht(u))}function qe(u,f,y){return rt(u).then(_=>WebAssembly.instantiate(_,f)).then(_=>_).then(y,_=>{O(`failed to asynchronously prepare wasm: ${_}`),F(_)})}function je(u,f){var y=Ge;return typeof WebAssembly.instantiateStreaming!="function"||ae(y)||xe(y)||g||typeof fetch!="function"?qe(y,u,f):fetch(y,{credentials:"same-origin"}).then(_=>WebAssembly.instantiateStreaming(_,u).then(f,function(E){return O(`wasm streaming compile failed: ${E}`),O("falling back to ArrayBuffer instantiation"),qe(y,u,f)}))}var gt={768496:(u,f,y,_)=>{if(typeof r>"u"||!r.gb)return 1;if(u=Ke(u>>>0),u.startsWith("./")&&(u=u.substring(2)),u=r.gb.get(u),!u)return 2;if(f>>>=0,y>>>=0,f+y>u.byteLength)return 3;try{return G.set(u.subarray(f,f+y),_>>>0>>>0),0}catch{return 4}},768997:()=>{r.xb()},769028:()=>{r.yb()},769057:()=>{r.Cb()},769082:u=>r.wb(u),769115:u=>r.Ab(u),769147:(u,f,y)=>{r.pb(u,f,y,!0)},769186:(u,f,y)=>{r.pb(u,f,y)},769219:u=>{r.Sa("Abs",u,void 0)},769270:u=>{r.Sa("Neg",u,void 0)},769321:u=>{r.Sa("Floor",u,void 0)},769374:u=>{r.Sa("Ceil",u,void 0)},769426:u=>{r.Sa("Reciprocal",u,void 0)},769484:u=>{r.Sa("Sqrt",u,void 0)},769536:u=>{r.Sa("Exp",u,void 0)},769587:u=>{r.Sa("Erf",u,void 0)},769638:u=>{r.Sa("Sigmoid",u,void 0)},769693:(u,f,y)=>{r.Sa("HardSigmoid",u,{alpha:f,beta:y})},769772:u=>{r.Sa("Log",u,void 0)},769823:u=>{r.Sa("Sin",u,void 0)},769874:u=>{r.Sa("Cos",u,void 0)},769925:u=>{r.Sa("Tan",u,void 0)},769976:u=>{r.Sa("Asin",u,void 0)},770028:u=>{r.Sa("Acos",u,void 0)},770080:u=>{r.Sa("Atan",u,void 0)},770132:u=>{r.Sa("Sinh",u,void 0)},770184:u=>{r.Sa("Cosh",u,void 0)},770236:u=>{r.Sa("Asinh",u,void 0)},770289:u=>{r.Sa("Acosh",u,void 0)},770342:u=>{r.Sa("Atanh",u,void 0)},770395:u=>{r.Sa("Tanh",u,void 0)},770447:u=>{r.Sa("Not",u,void 0)},770498:(u,f,y)=>{r.Sa("Clip",u,{min:f,max:y})},770567:u=>{r.Sa("Clip",u,void 0)},770619:(u,f)=>{r.Sa("Elu",u,{alpha:f})},770677:u=>{r.Sa("Relu",u,void 0)},770729:(u,f)=>{r.Sa("LeakyRelu",u,{alpha:f})},770793:(u,f)=>{r.Sa("ThresholdedRelu",u,{alpha:f})},770863:(u,f)=>{r.Sa("Cast",u,{to:f})},770921:u=>{r.Sa("Add",u,void 0)},770972:u=>{r.Sa("Sub",u,void 0)},771023:u=>{r.Sa("Mul",u,void 0)},771074:u=>{r.Sa("Div",u,void 0)},771125:u=>{r.Sa("Pow",u,void 0)},771176:u=>{r.Sa("Equal",u,void 0)},771229:u=>{r.Sa("Greater",u,void 0)},771284:u=>{r.Sa("GreaterOrEqual",u,void 0)},771346:u=>{r.Sa("Less",u,void 0)},771398:u=>{r.Sa("LessOrEqual",u,void 0)},771457:(u,f,y,_,E)=>{r.Sa("ReduceMean",u,{keepDims:!!f,noopWithEmptyAxes:!!y,axes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},771616:(u,f,y,_,E)=>{r.Sa("ReduceMax",u,{keepDims:!!f,noopWithEmptyAxes:!!y,axes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},771774:(u,f,y,_,E)=>{r.Sa("ReduceMin",u,{keepDims:!!f,noopWithEmptyAxes:!!y,axes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},771932:(u,f,y,_,E)=>{r.Sa("ReduceProd",u,{keepDims:!!f,noopWithEmptyAxes:!!y,axes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},772091:(u,f,y,_,E)=>{r.Sa("ReduceSum",u,{keepDims:!!f,noopWithEmptyAxes:!!y,axes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},772249:(u,f,y,_,E)=>{r.Sa("ReduceL1",u,{keepDims:!!f,noopWithEmptyAxes:!!y,axes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},772406:(u,f,y,_,E)=>{r.Sa("ReduceL2",u,{keepDims:!!f,noopWithEmptyAxes:!!y,axes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},772563:(u,f,y,_,E)=>{r.Sa("ReduceLogSum",u,{keepDims:!!f,noopWithEmptyAxes:!!y,axes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},772724:(u,f,y,_,E)=>{r.Sa("ReduceSumSquare",u,{keepDims:!!f,noopWithEmptyAxes:!!y,axes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},772888:(u,f,y,_,E)=>{r.Sa("ReduceLogSumExp",u,{keepDims:!!f,noopWithEmptyAxes:!!y,axes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},773052:u=>{r.Sa("Where",u,void 0)},773105:(u,f,y)=>{r.Sa("Transpose",u,{perm:f?Array.from(U.subarray(f>>>0,y>>>0)):[]})},773213:(u,f,y,_,E,z,H,q,J,Y,de,be,Te,R,ce)=>{r.Sa("ConvTranspose",u,{format:J?"NHWC":"NCHW",autoPad:f,dilations:[y],group:_,kernelShape:[E],pads:[z,H],strides:[q],wIsConst:()=>!!V[Y>>>0],outputPadding:de?Array.from(U.subarray(de>>>0,be>>>0)):[],outputShape:Te?Array.from(U.subarray(Te>>>0,R>>>0)):[],activation:Ke(ce)})},773614:(u,f,y,_,E,z,H,q,J,Y,de,be,Te,R)=>{r.Sa("ConvTranspose",u,{format:q?"NHWC":"NCHW",autoPad:f,dilations:Array.from(U.subarray(y>>>0,(y>>>0)+2>>>0)),group:_,kernelShape:Array.from(U.subarray(E>>>0,(E>>>0)+2>>>0)),pads:Array.from(U.subarray(z>>>0,(z>>>0)+4>>>0)),strides:Array.from(U.subarray(H>>>0,(H>>>0)+2>>>0)),wIsConst:()=>!!V[J>>>0],outputPadding:Y?Array.from(U.subarray(Y>>>0,de>>>0)):[],outputShape:be?Array.from(U.subarray(be>>>0,Te>>>0)):[],activation:Ke(R)})},774179:(u,f,y,_,E,z,H,q,J,Y,de,be,Te,R,ce)=>{r.Sa("ConvTranspose",u,{format:J?"NHWC":"NCHW",autoPad:f,dilations:[y],group:_,kernelShape:[E],pads:[z,H],strides:[q],wIsConst:()=>!!V[Y>>>0],outputPadding:de?Array.from(U.subarray(de>>>0,be>>>0)):[],outputShape:Te?Array.from(U.subarray(Te>>>0,R>>>0)):[],activation:Ke(ce)})},774580:(u,f,y,_,E,z,H,q,J,Y,de,be,Te,R)=>{r.Sa("ConvTranspose",u,{format:q?"NHWC":"NCHW",autoPad:f,dilations:Array.from(U.subarray(y>>>0,(y>>>0)+2>>>0)),group:_,kernelShape:Array.from(U.subarray(E>>>0,(E>>>0)+2>>>0)),pads:Array.from(U.subarray(z>>>0,(z>>>0)+4>>>0)),strides:Array.from(U.subarray(H>>>0,(H>>>0)+2>>>0)),wIsConst:()=>!!V[J>>>0],outputPadding:Y?Array.from(U.subarray(Y>>>0,de>>>0)):[],outputShape:be?Array.from(U.subarray(be>>>0,Te>>>0)):[],activation:Ke(R)})},775145:(u,f)=>{r.Sa("GlobalAveragePool",u,{format:f?"NHWC":"NCHW"})},775236:(u,f,y,_,E,z,H,q,J,Y,de,be,Te,R,ce,Ae)=>{r.Sa("AveragePool",u,{format:Ae?"NHWC":"NCHW",auto_pad:f,ceil_mode:y,count_include_pad:_,storage_order:E,dilations:[z,H],kernel_shape:[q,J],pads:[Y,de,be,Te],strides:[R,ce]})},775520:(u,f)=>{r.Sa("GlobalAveragePool",u,{format:f?"NHWC":"NCHW"})},775611:(u,f,y,_,E,z,H,q,J,Y,de,be,Te,R,ce,Ae)=>{r.Sa("AveragePool",u,{format:Ae?"NHWC":"NCHW",auto_pad:f,ceil_mode:y,count_include_pad:_,storage_order:E,dilations:[z,H],kernel_shape:[q,J],pads:[Y,de,be,Te],strides:[R,ce]})},775895:(u,f)=>{r.Sa("GlobalMaxPool",u,{format:f?"NHWC":"NCHW"})},775982:(u,f,y,_,E,z,H,q,J,Y,de,be,Te,R,ce,Ae)=>{r.Sa("MaxPool",u,{format:Ae?"NHWC":"NCHW",auto_pad:f,ceil_mode:y,count_include_pad:_,storage_order:E,dilations:[z,H],kernel_shape:[q,J],pads:[Y,de,be,Te],strides:[R,ce]})},776262:(u,f)=>{r.Sa("GlobalMaxPool",u,{format:f?"NHWC":"NCHW"})},776349:(u,f,y,_,E,z,H,q,J,Y,de,be,Te,R,ce,Ae)=>{r.Sa("MaxPool",u,{format:Ae?"NHWC":"NCHW",auto_pad:f,ceil_mode:y,count_include_pad:_,storage_order:E,dilations:[z,H],kernel_shape:[q,J],pads:[Y,de,be,Te],strides:[R,ce]})},776629:(u,f,y,_,E)=>{r.Sa("Gemm",u,{alpha:f,beta:y,transA:_,transB:E})},776733:u=>{r.Sa("MatMul",u,void 0)},776787:(u,f,y,_)=>{r.Sa("ArgMax",u,{keepDims:!!f,selectLastIndex:!!y,axis:_})},776895:(u,f,y,_)=>{r.Sa("ArgMin",u,{keepDims:!!f,selectLastIndex:!!y,axis:_})},777003:(u,f)=>{r.Sa("Softmax",u,{axis:f})},777066:(u,f)=>{r.Sa("Concat",u,{axis:f})},777126:(u,f,y,_,E)=>{r.Sa("Split",u,{axis:f,numOutputs:y,splitSizes:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},777266:u=>{r.Sa("Expand",u,void 0)},777320:(u,f)=>{r.Sa("Gather",u,{axis:Number(f)})},777391:(u,f)=>{r.Sa("GatherElements",u,{axis:Number(f)})},777470:(u,f,y,_,E,z,H,q,J,Y,de)=>{r.Sa("Resize",u,{antialias:f,axes:y?Array.from(U.subarray(y>>>0,_>>>0)):[],coordinateTransformMode:Ke(E),cubicCoeffA:z,excludeOutside:H,extrapolationValue:q,keepAspectRatioPolicy:Ke(J),mode:Ke(Y),nearestMode:Ke(de)})},777816:(u,f,y,_,E,z,H)=>{r.Sa("Slice",u,{starts:f?Array.from(U.subarray(f>>>0,y>>>0)):[],ends:_?Array.from(U.subarray(_>>>0,E>>>0)):[],axes:z?Array.from(U.subarray(z>>>0,H>>>0)):[]})},778032:u=>{r.Sa("Tile",u,void 0)},778084:(u,f,y)=>{r.Sa("LayerNormalization",u,{axis:Number(f),epsilon:Number(y)})},778191:(u,f,y)=>{r.Sa("InstanceNormalization",u,{epsilon:f,format:y?"NHWC":"NCHW"})},778305:(u,f,y)=>{r.Sa("InstanceNormalization",u,{epsilon:f,format:y?"NHWC":"NCHW"})},778419:u=>{r.Sa("Range",u,void 0)},778472:(u,f)=>{r.Sa("Einsum",u,{equation:Ke(f)})},778553:(u,f,y,_,E)=>{r.Sa("Pad",u,{mode:f,value:y,pads:_?Array.from(U.subarray(_>>>0,E>>>0)):[]})},778680:(u,f,y,_,E,z)=>{r.Sa("BatchNormalization",u,{epsilon:f,momentum:y,spatial:!!E,trainingMode:!!_,format:z?"NHWC":"NCHW"})},778849:(u,f,y,_,E,z)=>{r.Sa("BatchNormalization",u,{epsilon:f,momentum:y,spatial:!!E,trainingMode:!!_,format:z?"NHWC":"NCHW"})},779018:(u,f,y)=>{r.Sa("CumSum",u,{exclusive:Number(f),reverse:Number(y)})},779115:(u,f,y,_,E,z,H,q,J)=>{r.Sa("Attention",u,{numHeads:f,isUnidirectional:y,maskFilterValue:_,scale:E,doRotary:z,qkvHiddenSizes:H?Array.from(U.subarray(Number(q)>>>0,Number(q)+H>>>0)):[],pastPresentShareBuffer:!!J})},779387:u=>{r.Sa("BiasAdd",u,void 0)},779442:u=>{r.Sa("BiasSplitGelu",u,void 0)},779503:u=>{r.Sa("FastGelu",u,void 0)},779559:(u,f,y,_,E,z,H,q,J,Y,de,be,Te)=>{r.Sa("Conv",u,{format:J?"NHWC":"NCHW",auto_pad:f,dilations:[y],group:_,kernel_shape:[E],pads:z?Array.from(U.subarray(z>>>0,H>>>0)):[],strides:[q],w_is_const:()=>!!V[Y>>>0],activation:Ke(de),activation_params:be?Array.from(Be.subarray(be>>>0,Te>>>0)):[]})},779929:(u,f,y,_,E,z,H,q,J,Y,de,be,Te,R,ce,Ae)=>{r.Sa("Conv",u,{format:be?"NHWC":"NCHW",auto_pad:f,dilations:[y,_],group:E,kernel_shape:[z,H],pads:q?Array.from(U.subarray(q>>>0,J>>>0)):[],strides:[Y,de],w_is_const:()=>!!V[Te>>>0],activation:Ke(R),activation_params:ce?Array.from(Be.subarray(ce>>>0,Ae>>>0)):[]})},780320:u=>{r.Sa("Gelu",u,void 0)},780372:(u,f,y,_,E,z)=>{r.Sa("MatMulNBits",u,{k:f,n:y,accuracyLevel:_,bits:E,blockSize:z})},780499:(u,f,y,_,E,z)=>{r.Sa("MultiHeadAttention",u,{numHeads:f,isUnidirectional:y,maskFilterValue:_,scale:E,doRotary:z})},780658:(u,f,y,_,E)=>{r.Sa("RotaryEmbedding",u,{interleaved:!!f,numHeads:y,rotaryEmbeddingDim:_,scale:E})},780797:(u,f)=>{r.Sa("SkipLayerNormalization",u,{epsilon:f})},780878:u=>{r.Bb(u)},780912:(u,f)=>r.Db(u,f,r.fb.Eb,r.fb.errors)};function Lt(u){this.name="ExitStatus",this.message=`Program terminated with exit(${u})`,this.status=u}function kt(u){this.cb=u-24,this.sb=function(f){re[this.cb+4>>>2>>>0]=f},this.rb=function(f){re[this.cb+8>>>2>>>0]=f},this.kb=function(f,y){this.jb(),this.sb(f),this.rb(y)},this.jb=function(){re[this.cb+16>>>2>>>0]=0}}var mr=0,Jt=0,Or=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ft=(u,f,y)=>{f>>>=0;var _=f+y;for(y=f;u[y]&&!(y>=_);)++y;if(16<y-f&&u.buffer&&Or)return Or.decode(u.subarray(f,y));for(_="";f<y;){var E=u[f++];if(E&128){var z=u[f++]&63;if((E&224)==192)_+=String.fromCharCode((E&31)<<6|z);else{var H=u[f++]&63;E=(E&240)==224?(E&15)<<12|z<<6|H:(E&7)<<18|z<<12|H<<6|u[f++]&63,65536>E?_+=String.fromCharCode(E):(E-=65536,_+=String.fromCharCode(55296|E>>10,56320|E&1023))}}else _+=String.fromCharCode(E)}return _},Ke=(u,f)=>(u>>>=0)?Ft(G,u,f):"",Nt=u=>{for(var f=0,y=0;y<u.length;++y){var _=u.charCodeAt(y);127>=_?f++:2047>=_?f+=2:55296<=_&&57343>=_?(f+=4,++y):f+=3}return f},Pt=(u,f,y,_)=>{if(y>>>=0,!(0<_))return 0;var E=y;_=y+_-1;for(var z=0;z<u.length;++z){var H=u.charCodeAt(z);if(55296<=H&&57343>=H){var q=u.charCodeAt(++z);H=65536+((H&1023)<<10)|q&1023}if(127>=H){if(y>=_)break;f[y++>>>0]=H}else{if(2047>=H){if(y+1>=_)break;f[y++>>>0]=192|H>>6}else{if(65535>=H){if(y+2>=_)break;f[y++>>>0]=224|H>>12}else{if(y+3>=_)break;f[y++>>>0]=240|H>>18,f[y++>>>0]=128|H>>12&63}f[y++>>>0]=128|H>>6&63}f[y++>>>0]=128|H&63}}return f[y>>>0]=0,y-E},kr=u=>{if(u===null)return"null";var f=typeof u;return f==="object"||f==="array"||f==="function"?u.toString():""+u},ln,lt=u=>{for(var f="";G[u>>>0];)f+=ln[G[u++>>>0]];return f},Pr={},er={},Rr={},vt;function dn(u,f,y={}){var _=f.name;if(!u)throw new vt(`type "${_}" must have a positive integer typeid pointer`);if(er.hasOwnProperty(u)){if(y.ub)return;throw new vt(`Cannot register type '${_}' twice`)}er[u]=f,delete Rr[u],Pr.hasOwnProperty(u)&&(f=Pr[u],delete Pr[u],f.forEach(E=>E()))}function Ze(u,f,y={}){if(!("argPackAdvance"in f))throw new TypeError("registerType registeredInstance requires argPackAdvance");dn(u,f,y)}var zr=(u,f,y)=>{switch(f){case 1:return y?_=>V[_>>>0>>>0]:_=>G[_>>>0>>>0];case 2:return y?_=>ie[_>>>1>>>0]:_=>Z[_>>>1>>>0];case 4:return y?_=>U[_>>>2>>>0]:_=>re[_>>>2>>>0];case 8:return y?_=>Oe[_>>>3]:_=>Ie[_>>>3];default:throw new TypeError(`invalid integer width (${f}): ${u}`)}};function Br(){this.$a=[void 0],this.nb=[]}var Ue=new Br;function Dr(u){u>>>=0,u>=Ue.cb&&--Ue.get(u).qb===0&&Ue.jb(u)}var _e=u=>{if(!u)throw new vt("Cannot use deleted val. handle = "+u);return Ue.get(u).value},dt=u=>{switch(u){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return Ue.kb({qb:1,value:u})}};function hr(u){return this.fromWireType(U[u>>>2>>>0])}var Mr=(u,f)=>{switch(f){case 4:return function(y){return this.fromWireType(Be[y>>>2>>>0])};case 8:return function(y){return this.fromWireType(te[y>>>3>>>0])};default:throw new TypeError(`invalid float width (${f}): ${u}`)}};function wi(u){return this.fromWireType(re[u>>>2>>>0])}var Ur=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,vi=(u,f)=>{for(var y=u>>1,_=y+f/2;!(y>=_)&&Z[y>>>0];)++y;if(y<<=1,32<y-u&&Ur)return Ur.decode(G.subarray(u>>>0,y>>>0));for(y="",_=0;!(_>=f/2);++_){var E=ie[u+2*_>>>1>>>0];if(E==0)break;y+=String.fromCharCode(E)}return y},le=(u,f,y)=>{if(y??=2147483647,2>y)return 0;y-=2;var _=f;y=y<2*u.length?y/2:u.length;for(var E=0;E<y;++E)ie[f>>>1>>>0]=u.charCodeAt(E),f+=2;return ie[f>>>1>>>0]=0,f-_},gr=u=>2*u.length,cn=(u,f)=>{for(var y=0,_="";!(y>=f/4);){var E=U[u+4*y>>>2>>>0];if(E==0)break;++y,65536<=E?(E-=65536,_+=String.fromCharCode(55296|E>>10,56320|E&1023)):_+=String.fromCharCode(E)}return _},$i=(u,f,y)=>{if(f>>>=0,y??=2147483647,4>y)return 0;var _=f;y=_+y-4;for(var E=0;E<u.length;++E){var z=u.charCodeAt(E);if(55296<=z&&57343>=z){var H=u.charCodeAt(++E);z=65536+((z&1023)<<10)|H&1023}if(U[f>>>2>>>0]=z,f+=4,f+4>y)break}return U[f>>>2>>>0]=0,f-_},pn=u=>{for(var f=0,y=0;y<u.length;++y){var _=u.charCodeAt(y);55296<=_&&57343>=_&&++y,f+=4}return f},Wr=(u,f)=>{var y=er[u];if(y===void 0)throw u=ir(u),y=lt(u),ct(u),new vt(f+" has unknown type "+y);return y},Nr=(u,f,y)=>{var _=[];return u=u.toWireType(_,y),_.length&&(re[f>>>2>>>0]=dt(_)),u},tr=u=>{try{u()}catch(f){F(f)}};function fn(){var u=oe,f={};for(let[y,_]of Object.entries(u))f[y]=typeof _=="function"?function(){qt.push(y);try{return _.apply(null,arguments)}finally{P||(qt.pop(),nt&&Ct===1&&qt.length===0&&(Ct=0,tr(Tn),typeof Fibers<"u"&&Fibers.Kb()))}}:_;return f}var Ct=0,nt=null,Vr=0,qt=[],Gr={},Hr={},mn=0,yr=null,hn=[];function gn(){return new Promise((u,f)=>{yr={resolve:u,reject:f}})}function yn(){var u=jt(65548),f=u+12;re[u>>>2>>>0]=f,re[u+4>>>2>>>0]=f+65536,f=qt[0];var y=Gr[f];return y===void 0&&(y=mn++,Gr[f]=y,Hr[y]=f),U[u+8>>>2>>>0]=y,u}function bn(u){if(!P){if(Ct===0){var f=!1,y=!1;u((_=0)=>{if(!P&&(Vr=_,f=!0,y)){Ct=2,tr(()=>It(nt)),typeof Browser<"u"&&Browser.lb.tb&&Browser.lb.resume(),_=!1;try{var E=(0,oe[Hr[U[nt+8>>>2>>>0]]])()}catch(q){E=q,_=!0}var z=!1;if(!nt){var H=yr;H&&(yr=null,(_?H.reject:H.resolve)(E),z=!0)}if(_&&!z)throw E}}),y=!0,f||(Ct=1,nt=yn(),typeof Browser<"u"&&Browser.lb.tb&&Browser.lb.pause(),tr(()=>ar(nt)))}else Ct===2?(Ct=0,tr(bt),ct(nt),nt=null,hn.forEach(_=>{if(!P)try{_();try{N=N=_=N,r.onExit?.(_),P=!0,p(_,new Lt(_))}catch(E){E instanceof Lt||E=="unwind"||p(1,E)}}catch(E){E instanceof Lt||E=="unwind"||p(1,E)}})):F(`invalid state: ${Ct}`);return Vr}}function Lr(u){return bn(f=>{u().then(f)})}var rr=[],wn={},br=u=>{var f=wn[u];return f===void 0?lt(u):f},Fr=()=>typeof globalThis=="object"?globalThis:Function("return this")(),yt=u=>{var f=rr.length;return rr.push(u),f},qr=(u,f)=>{for(var y=Array(u),_=0;_<u;++_)y[_]=Wr(re[f+4*_>>>2>>>0],"parameter "+_);return y},wr=(u,f)=>Object.defineProperty(f,"name",{value:u});function _i(u){var f=Function;if(!(f instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof f} which is not a function`);var y=wr(f.name||"unknownFunctionName",function(){});return y.prototype=f.prototype,y=new y,u=f.apply(y,u),u instanceof Object?u:y}var it=u=>u%4===0&&(u%100!==0||u%400===0),vn=[0,31,60,91,121,152,182,213,244,274,305,335],$t=[0,31,59,90,120,151,181,212,243,273,304,334],jr=u=>{var f=Nt(u)+1,y=jt(f);return y&&Pt(u,G,y,f),y},vr=[],at=(u,f)=>{vr.length=0;for(var y;y=G[u++>>>0];){var _=y!=105;_&=y!=112,f+=_&&f%8?4:0,vr.push(y==112?re[f>>>2>>>0]:y==106?Oe[f>>>3]:y==105?U[f>>>2>>>0]:te[f>>>3>>>0]),f+=_?8:4}return vr},nr={},Qe=()=>{if(!ot){var u={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:d||"./this.program"},f;for(f in nr)nr[f]===void 0?delete u[f]:u[f]=nr[f];var y=[];for(f in u)y.push(`${f}=${u[f]}`);ot=y}return ot},ot,$n=[null,[],[]],_n=[31,29,31,30,31,30,31,31,30,31,30,31],Sn=[31,28,31,30,31,30,31,31,30,31,30,31];function xn(u){var f=Array(Nt(u)+1);return Pt(u,f,0,f.length),f}function Cn(u,f,y,_){function E(R,ce,Ae){for(R=typeof R=="number"?R.toString():R||"";R.length<ce;)R=Ae[0]+R;return R}function z(R,ce){return E(R,ce,"0")}function H(R,ce){function Ae(Ht){return 0>Ht?-1:0<Ht?1:0}var Gt;return(Gt=Ae(R.getFullYear()-ce.getFullYear()))===0&&(Gt=Ae(R.getMonth()-ce.getMonth()))===0&&(Gt=Ae(R.getDate()-ce.getDate())),Gt}function q(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function J(R){var ce=R.ab;for(R=new Date(new Date(R.bb+1900,0,1).getTime());0<ce;){var Ae=R.getMonth(),Gt=(it(R.getFullYear())?_n:Sn)[Ae];if(ce>Gt-R.getDate())ce-=Gt-R.getDate()+1,R.setDate(1),11>Ae?R.setMonth(Ae+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+ce);break}}return Ae=new Date(R.getFullYear()+1,0,4),ce=q(new Date(R.getFullYear(),0,4)),Ae=q(Ae),0>=H(ce,R)?0>=H(Ae,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}u>>>=0,f>>>=0,y>>>=0,_>>>=0;var Y=re[_+40>>>2>>>0];_={Hb:U[_>>>2>>>0],Gb:U[_+4>>>2>>>0],hb:U[_+8>>>2>>>0],mb:U[_+12>>>2>>>0],ib:U[_+16>>>2>>>0],bb:U[_+20>>>2>>>0],Wa:U[_+24>>>2>>>0],ab:U[_+28>>>2>>>0],Jb:U[_+32>>>2>>>0],Fb:U[_+36>>>2>>>0],Ib:Y?Ke(Y):""},y=Ke(y),Y={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var de in Y)y=y.replace(new RegExp(de,"g"),Y[de]);var be="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Te="January February March April May June July August September October November December".split(" ");Y={"%a":R=>be[R.Wa].substring(0,3),"%A":R=>be[R.Wa],"%b":R=>Te[R.ib].substring(0,3),"%B":R=>Te[R.ib],"%C":R=>z((R.bb+1900)/100|0,2),"%d":R=>z(R.mb,2),"%e":R=>E(R.mb,2," "),"%g":R=>J(R).toString().substring(2),"%G":R=>J(R),"%H":R=>z(R.hb,2),"%I":R=>(R=R.hb,R==0?R=12:12<R&&(R-=12),z(R,2)),"%j":R=>{for(var ce=0,Ae=0;Ae<=R.ib-1;ce+=(it(R.bb+1900)?_n:Sn)[Ae++]);return z(R.mb+ce,3)},"%m":R=>z(R.ib+1,2),"%M":R=>z(R.Gb,2),"%n":()=>`
`,"%p":R=>0<=R.hb&&12>R.hb?"AM":"PM","%S":R=>z(R.Hb,2),"%t":()=>"	","%u":R=>R.Wa||7,"%U":R=>z(Math.floor((R.ab+7-R.Wa)/7),2),"%V":R=>{var ce=Math.floor((R.ab+7-(R.Wa+6)%7)/7);if(2>=(R.Wa+371-R.ab-2)%7&&ce++,ce)ce==53&&(Ae=(R.Wa+371-R.ab)%7,Ae==4||Ae==3&&it(R.bb)||(ce=1));else{ce=52;var Ae=(R.Wa+7-R.ab-1)%7;(Ae==4||Ae==5&&it(R.bb%400-1))&&ce++}return z(ce,2)},"%w":R=>R.Wa,"%W":R=>z(Math.floor((R.ab+7-(R.Wa+6)%7)/7),2),"%y":R=>(R.bb+1900).toString().substring(2),"%Y":R=>R.bb+1900,"%z":R=>{R=R.Fb;var ce=0<=R;return R=Math.abs(R)/60,(ce?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Ib,"%%":()=>"%"},y=y.replace(/%%/g,"\0\0");for(de in Y)y.includes(de)&&(y=y.replace(new RegExp(de,"g"),Y[de](_)));return y=y.replace(/\0\0/g,"%"),de=xn(y),de.length>f?0:(V.set(de,u>>>0),de.length-1)}for(var In=Array(256),$r=0;256>$r;++$r)In[$r]=String.fromCharCode($r);ln=In,vt=r.BindingError=class extends Error{constructor(u){super(u),this.name="BindingError"}},r.InternalError=class extends Error{constructor(u){super(u),this.name="InternalError"}},Object.assign(Br.prototype,{get(u){return this.$a[u]},has(u){return this.$a[u]!==void 0},kb(u){var f=this.nb.pop()||this.$a.length;return this.$a[f]=u,f},jb(u){this.$a[u]=void 0,this.nb.push(u)}}),Ue.$a.push({value:void 0},{value:null},{value:!0},{value:!1}),Ue.cb=Ue.$a.length,r.count_emval_handles=()=>{for(var u=0,f=Ue.cb;f<Ue.$a.length;++f)Ue.$a[f]!==void 0&&++u;return u};var Si={ia:function(u,f,y){return Lr(async()=>{await r.zb(u,f,y)})},a:function(u,f,y){throw u>>>=0,new kt(u).kb(f>>>0,y>>>0),mr=u,Jt++,mr},w:function(){return 0},ca:function(){},P:function(){},R:function(){},J:function(){return 0},aa:function(){},X:function(){},$:function(){},D:function(){},Q:function(){},N:function(){},ba:function(){},O:function(){},G:function(u,f,y,_,E){f>>>=0,f=lt(f);var z=f.indexOf("u")!=-1;z&&(E=(1n<<64n)-1n),Ze(u>>>0,{name:f,fromWireType:H=>H,toWireType:function(H,q){if(typeof q!="bigint"&&typeof q!="number")throw new TypeError(`Cannot convert "${kr(q)}" to ${this.name}`);if(q<_||q>E)throw new TypeError(`Passing a number "${kr(q)}" from JS side to C/C++ side to an argument of type "${f}", which is outside the valid range [${_}, ${E}]!`);return q},argPackAdvance:8,readValueFromPointer:zr(f,y>>>0,!z),eb:null})},ga:function(u,f,y,_){f=lt(f>>>0),Ze(u>>>0,{name:f,fromWireType:function(E){return!!E},toWireType:function(E,z){return z?y:_},argPackAdvance:8,readValueFromPointer:function(E){return this.fromWireType(G[E>>>0])},eb:null})},fa:function(u,f){f=lt(f>>>0),Ze(u>>>0,{name:f,fromWireType:y=>{var _=_e(y);return Dr(y),_},toWireType:(y,_)=>dt(_),argPackAdvance:8,readValueFromPointer:hr,eb:null})},F:function(u,f,y){f=lt(f>>>0),Ze(u>>>0,{name:f,fromWireType:_=>_,toWireType:(_,E)=>E,argPackAdvance:8,readValueFromPointer:Mr(f,y>>>0),eb:null})},s:function(u,f,y,_,E){if(u>>>=0,y>>>=0,f=lt(f>>>0),E===-1&&(E=4294967295),E=q=>q,_===0){var z=32-8*y;E=q=>q<<z>>>z}var H=f.includes("unsigned")?function(q,J){return J>>>0}:function(q,J){return J};Ze(u,{name:f,fromWireType:E,toWireType:H,argPackAdvance:8,readValueFromPointer:zr(f,y,_!==0),eb:null})},n:function(u,f,y){function _(z){return new E(V.buffer,re[z+4>>>2>>>0],re[z>>>2>>>0])}var E=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][f];y=lt(y>>>0),Ze(u>>>0,{name:y,fromWireType:_,argPackAdvance:8,readValueFromPointer:_},{ub:!0})},H:function(u,f){f=lt(f>>>0);var y=f==="std::string";Ze(u>>>0,{name:f,fromWireType:function(_){var E=re[_>>>2>>>0],z=_+4;if(y)for(var H=z,q=0;q<=E;++q){var J=z+q;if(q==E||G[J>>>0]==0){if(H=Ke(H,J-H),Y===void 0)var Y=H;else Y+=String.fromCharCode(0),Y+=H;H=J+1}}else{for(Y=Array(E),q=0;q<E;++q)Y[q]=String.fromCharCode(G[z+q>>>0]);Y=Y.join("")}return ct(_),Y},toWireType:function(_,E){E instanceof ArrayBuffer&&(E=new Uint8Array(E));var z=typeof E=="string";if(!(z||E instanceof Uint8Array||E instanceof Uint8ClampedArray||E instanceof Int8Array))throw new vt("Cannot pass non-string to std::string");var H=y&&z?Nt(E):E.length,q=jt(4+H+1),J=q+4;if(re[q>>>2>>>0]=H,y&&z)Pt(E,G,J,H+1);else if(z)for(z=0;z<H;++z){var Y=E.charCodeAt(z);if(255<Y)throw ct(J),new vt("String has UTF-16 code units that do not fit in 8 bits");G[J+z>>>0]=Y}else for(z=0;z<H;++z)G[J+z>>>0]=E[z];return _!==null&&_.push(ct,q),q},argPackAdvance:8,readValueFromPointer:wi,eb(_){ct(_)}})},y:function(u,f,y){if(f>>>=0,y>>>=0,y=lt(y),f===2)var _=vi,E=le,z=gr,H=()=>Z,q=1;else f===4&&(_=cn,E=$i,z=pn,H=()=>re,q=2);Ze(u>>>0,{name:y,fromWireType:J=>{for(var Y=re[J>>>2>>>0],de=H(),be,Te=J+4,R=0;R<=Y;++R){var ce=J+4+R*f;(R==Y||de[ce>>>q]==0)&&(Te=_(Te,ce-Te),be===void 0?be=Te:(be+=String.fromCharCode(0),be+=Te),Te=ce+f)}return ct(J),be},toWireType:(J,Y)=>{if(typeof Y!="string")throw new vt(`Cannot pass non-string to C++ string type ${y}`);var de=z(Y),be=jt(4+de+f);return re[be>>>2]=de>>q,E(Y,be+4,de+f),J!==null&&J.push(ct,be),be},argPackAdvance:8,readValueFromPointer:hr,eb(J){ct(J)}})},ha:function(u,f){f=lt(f>>>0),Ze(u>>>0,{vb:!0,name:f,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},da:()=>1,u:function(u,f,y){return f>>>=0,y>>>=0,u=_e(u>>>0),f=Wr(f,"emval::as"),Nr(f,y,u)},v:function(u){return u>>>=0,Lr(()=>(u=_e(u),u.then(dt)))},o:function(u,f,y,_){return y>>>=0,_>>>=0,u=rr[u>>>0],f=_e(f>>>0),u(null,f,y,_)},l:function(u,f,y,_,E){return y>>>=0,_>>>=0,E>>>=0,u=rr[u>>>0],f=_e(f>>>0),y=br(y),u(f,f[y],_,E)},b:Dr,z:function(u,f){return f>>>=0,u=_e(u>>>0),f=_e(f),u==f},m:function(u){return u>>>=0,u===0?dt(Fr()):(u=br(u),dt(Fr()[u]))},i:function(u,f,y){f=qr(u,f>>>0);var _=f.shift();u--;var E=`return function (obj, func, destructorsRef, args) {
`,z=0,H=[];y===0&&H.push("obj");for(var q=["retType"],J=[_],Y=0;Y<u;++Y)H.push("arg"+Y),q.push("argType"+Y),J.push(f[Y]),E+=`  var arg${Y} = argType${Y}.readValueFromPointer(args${z?"+"+z:""});
`,z+=f[Y].argPackAdvance;for(E+=`  var rv = ${y===1?"new func":"func.call"}(${H.join(", ")});
`,Y=0;Y<u;++Y)f[Y].deleteObject&&(E+=`  argType${Y}.deleteObject(arg${Y});
`);return _.vb||(q.push("emval_returnValue"),J.push(Nr),E+=`  return emval_returnValue(retType, destructorsRef, rv);
`),q.push(E+`};
`),u=_i(q).apply(null,J),y=`methodCaller<(${f.map(de=>de.name).join(", ")}) => ${_.name}>`,yt(wr(y,u))},r:function(u,f){return f>>>=0,u=_e(u>>>0),f=_e(f),dt(u[f])},d:function(u){u>>>=0,4<u&&(Ue.get(u).qb+=1)},t:function(){return dt([])},k:function(u){u=_e(u>>>0);for(var f=Array(u.length),y=0;y<u.length;y++)f[y]=u[y];return dt(f)},f:function(u){return dt(br(u>>>0))},j:function(){return dt({})},h:function(u){u>>>=0;for(var f=_e(u);f.length;){var y=f.pop();f.pop()(y)}Dr(u)},g:function(u,f,y){f>>>=0,y>>>=0,u=_e(u>>>0),f=_e(f),y=_e(y),u[f]=y},c:function(u,f){return f>>>=0,u=Wr(u>>>0,"_emval_take_value"),u=u.readValueFromPointer(f),dt(u)},U:function(u,f){u=-9007199254740992>u||9007199254740992<u?NaN:Number(u),f>>>=0,u=new Date(1e3*u),U[f>>>2>>>0]=u.getUTCSeconds(),U[f+4>>>2>>>0]=u.getUTCMinutes(),U[f+8>>>2>>>0]=u.getUTCHours(),U[f+12>>>2>>>0]=u.getUTCDate(),U[f+16>>>2>>>0]=u.getUTCMonth(),U[f+20>>>2>>>0]=u.getUTCFullYear()-1900,U[f+24>>>2>>>0]=u.getUTCDay(),U[f+28>>>2>>>0]=(u.getTime()-Date.UTC(u.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},V:function(u,f){u=-9007199254740992>u||9007199254740992<u?NaN:Number(u),f>>>=0,u=new Date(1e3*u),U[f>>>2>>>0]=u.getSeconds(),U[f+4>>>2>>>0]=u.getMinutes(),U[f+8>>>2>>>0]=u.getHours(),U[f+12>>>2>>>0]=u.getDate(),U[f+16>>>2>>>0]=u.getMonth(),U[f+20>>>2>>>0]=u.getFullYear()-1900,U[f+24>>>2>>>0]=u.getDay(),U[f+28>>>2>>>0]=(it(u.getFullYear())?vn:$t)[u.getMonth()]+u.getDate()-1|0,U[f+36>>>2>>>0]=-(60*u.getTimezoneOffset());var y=new Date(u.getFullYear(),6,1).getTimezoneOffset(),_=new Date(u.getFullYear(),0,1).getTimezoneOffset();U[f+32>>>2>>>0]=(y!=_&&u.getTimezoneOffset()==Math.min(_,y))|0},W:function(u){u>>>=0;var f=new Date(U[u+20>>>2>>>0]+1900,U[u+16>>>2>>>0],U[u+12>>>2>>>0],U[u+8>>>2>>>0],U[u+4>>>2>>>0],U[u>>>2>>>0],0),y=U[u+32>>>2>>>0],_=f.getTimezoneOffset(),E=new Date(f.getFullYear(),6,1).getTimezoneOffset(),z=new Date(f.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(z,E);return 0>y?U[u+32>>>2>>>0]=+(E!=z&&H==_):0<y!=(H==_)&&(E=Math.max(z,E),f.setTime(f.getTime()+6e4*((0<y?H:E)-_))),U[u+24>>>2>>>0]=f.getDay(),U[u+28>>>2>>>0]=(it(f.getFullYear())?vn:$t)[f.getMonth()]+f.getDate()-1|0,U[u>>>2>>>0]=f.getSeconds(),U[u+4>>>2>>>0]=f.getMinutes(),U[u+8>>>2>>>0]=f.getHours(),U[u+12>>>2>>>0]=f.getDate(),U[u+16>>>2>>>0]=f.getMonth(),U[u+20>>>2>>>0]=f.getYear(),u=f.getTime(),isNaN(u)?(U[An()>>>2>>>0]=61,u=-1):u/=1e3,BigInt(u)},S:function(){return-52},T:function(){},L:function(u,f,y){function _(J){return(J=J.toTimeString().match(/\(([A-Za-z ]+)\)$/))?J[1]:"GMT"}y>>>=0;var E=new Date().getFullYear(),z=new Date(E,0,1),H=new Date(E,6,1);E=z.getTimezoneOffset();var q=H.getTimezoneOffset();re[u>>>0>>>2>>>0]=60*Math.max(E,q),U[f>>>0>>>2>>>0]=+(E!=q),u=_(z),f=_(H),u=jr(u),f=jr(f),q<E?(re[y>>>2>>>0]=u,re[y+4>>>2>>>0]=f):(re[y>>>2>>>0]=f,re[y+4>>>2>>>0]=u)},A:()=>{F("")},e:function(u,f,y){return u>>>=0,f=at(f>>>0,y>>>0),gt[u].apply(null,f)},I:function(u,f,y){return u>>>=0,f=at(f>>>0,y>>>0),gt[u].apply(null,f)},E:()=>Date.now(),M:function(){return 4294901760},q:()=>performance.now(),K:function(u){u>>>=0;var f=G.length;if(4294901760<u)return!1;for(var y=1;4>=y;y*=2){var _=f*(1+.2/y);_=Math.min(_,u+100663296);var E=Math;_=Math.max(u,_);e:{E=(E.min.call(E,4294901760,_+(65536-_%65536)%65536)-A.buffer.byteLength+65535)/65536;try{A.grow(E),Me();var z=1;break e}catch{}z=void 0}if(z)return!0}return!1},Z:function(u,f){u>>>=0,f>>>=0;var y=0;return Qe().forEach((_,E)=>{var z=f+y;for(E=re[u+4*E>>>2>>>0]=z,z=0;z<_.length;++z)V[E++>>>0>>>0]=_.charCodeAt(z);V[E>>>0>>>0]=0,y+=_.length+1}),0},_:function(u,f){u>>>=0,f>>>=0;var y=Qe();re[u>>>2>>>0]=y.length;var _=0;return y.forEach(E=>_+=E.length+1),re[f>>>2>>>0]=_,0},x:()=>52,C:function(){return 52},Y:function(){return 70},B:function(u,f,y,_){f>>>=0,y>>>=0,_>>>=0;for(var E=0,z=0;z<y;z++){var H=re[f>>>2>>>0],q=re[f+4>>>2>>>0];f+=8;for(var J=0;J<q;J++){var Y=G[H+J>>>0],de=$n[u];Y===0||Y===10?((u===1?x:O)(Ft(de,0)),de.length=0):de.push(Y)}E+=q}return re[_>>>2>>>0]=E,0},ea:Cn,p:function(u,f,y,_){return Cn(u>>>0,f>>>0,y>>>0,_>>>0)}},oe=function(){function u(y){return oe=y.exports,oe=fn(),oe=En(),A=oe.ja,Me(),he.unshift(oe.ka),ge--,ge==0&&(ke!==null&&(clearInterval(ke),ke=null),Fe&&(y=Fe,Fe=null,y())),oe}var f={a:Si};if(ge++,r.instantiateWasm)try{return r.instantiateWasm(f,u)}catch(y){O(`Module.instantiateWasm callback failed with error: ${y}`),i(y)}return je(f,function(y){u(y.instance)}).catch(i),{}}();r._OrtInit=(u,f)=>(r._OrtInit=oe.la)(u,f),r._OrtGetLastError=(u,f)=>(r._OrtGetLastError=oe.ma)(u,f),r._OrtCreateSessionOptions=(u,f,y,_,E,z,H,q,J,Y)=>(r._OrtCreateSessionOptions=oe.na)(u,f,y,_,E,z,H,q,J,Y),r._OrtAppendExecutionProvider=(u,f)=>(r._OrtAppendExecutionProvider=oe.oa)(u,f),r._OrtAddFreeDimensionOverride=(u,f,y)=>(r._OrtAddFreeDimensionOverride=oe.pa)(u,f,y),r._OrtAddSessionConfigEntry=(u,f,y)=>(r._OrtAddSessionConfigEntry=oe.qa)(u,f,y),r._OrtReleaseSessionOptions=u=>(r._OrtReleaseSessionOptions=oe.ra)(u),r._OrtCreateSession=(u,f,y)=>(r._OrtCreateSession=oe.sa)(u,f,y),r._OrtReleaseSession=u=>(r._OrtReleaseSession=oe.ta)(u),r._OrtGetInputOutputCount=(u,f,y)=>(r._OrtGetInputOutputCount=oe.ua)(u,f,y),r._OrtGetInputName=(u,f)=>(r._OrtGetInputName=oe.va)(u,f),r._OrtGetOutputName=(u,f)=>(r._OrtGetOutputName=oe.wa)(u,f),r._OrtFree=u=>(r._OrtFree=oe.xa)(u),r._OrtCreateTensor=(u,f,y,_,E,z)=>(r._OrtCreateTensor=oe.ya)(u,f,y,_,E,z),r._OrtGetTensorData=(u,f,y,_,E)=>(r._OrtGetTensorData=oe.za)(u,f,y,_,E),r._OrtReleaseTensor=u=>(r._OrtReleaseTensor=oe.Aa)(u),r._OrtCreateRunOptions=(u,f,y,_)=>(r._OrtCreateRunOptions=oe.Ba)(u,f,y,_),r._OrtAddRunConfigEntry=(u,f,y)=>(r._OrtAddRunConfigEntry=oe.Ca)(u,f,y),r._OrtReleaseRunOptions=u=>(r._OrtReleaseRunOptions=oe.Da)(u),r._OrtCreateBinding=u=>(r._OrtCreateBinding=oe.Ea)(u),r._OrtBindInput=(u,f,y)=>(r._OrtBindInput=oe.Fa)(u,f,y),r._OrtBindOutput=(u,f,y,_)=>(r._OrtBindOutput=oe.Ga)(u,f,y,_),r._OrtClearBoundOutputs=u=>(r._OrtClearBoundOutputs=oe.Ha)(u),r._OrtReleaseBinding=u=>(r._OrtReleaseBinding=oe.Ia)(u),r._OrtRunWithBinding=(u,f,y,_,E)=>(r._OrtRunWithBinding=oe.Ja)(u,f,y,_,E),r._OrtRun=(u,f,y,_,E,z,H,q)=>(r._OrtRun=oe.Ka)(u,f,y,_,E,z,H,q),r._OrtEndProfiling=u=>(r._OrtEndProfiling=oe.La)(u),r._JsepOutput=(u,f,y)=>(r._JsepOutput=oe.Ma)(u,f,y),r._JsepGetNodeName=u=>(r._JsepGetNodeName=oe.Na)(u);var An=()=>(An=oe.Oa)(),jt=r._malloc=u=>(jt=r._malloc=oe.Pa)(u),ct=r._free=u=>(ct=r._free=oe.Qa)(u),ir=u=>(ir=oe.Ra)(u),_r=()=>(_r=oe.Ta)(),Sr=u=>(Sr=oe.Ua)(u),Kr=u=>(Kr=oe.Va)(u),ar=u=>(ar=oe.Xa)(u),Tn=()=>(Tn=oe.Ya)(),It=u=>(It=oe.Za)(u),bt=()=>(bt=oe._a)();r.___start_em_js=781024,r.___stop_em_js=781185;function En(){var u=oe;u=Object.assign({},u);var f=_=>()=>_()>>>0,y=_=>E=>_(E)>>>0;return u.Oa=f(u.Oa),u.Pa=y(u.Pa),u.Ra=y(u.Ra),u.Ta=f(u.Ta),u.Va=y(u.Va),u}r.stackAlloc=Kr,r.stackSave=_r,r.stackRestore=Sr,r.UTF8ToString=Ke,r.stringToUTF8=(u,f,y)=>Pt(u,G,f,y),r.lengthBytesUTF8=Nt;var Vt;Fe=function u(){Vt||Yr(),Vt||(Fe=u)};function Yr(){if(!(0<ge)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;){var u=r.preRun.shift();ye.unshift(u)}for(;0<ye.length;)ye.shift()(r);if(!(0<ge||Vt||(Vt=!0,r.calledRun=!0,P))){for(;0<he.length;)he.shift()(r);for(n(r);0<ue.length;)ue.shift()(r)}}}return Yr(),t.ready}})();typeof zo=="object"&&typeof Ni=="object"?Ni.exports=Ro:typeof define=="function"&&define.amd&&define([],()=>Ro)});var Do=xr(()=>{});var Mo=xr(()=>{});var Uo={};sr(Uo,{cpus:()=>dc});var dc,Wo=j(()=>{dc=void 0});var Go=xr((Vo,Vi)=>{"use strict";var No=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return te.buffer!=ue.buffer&&rt(),ue}function n(){return te.buffer!=ue.buffer&&rt(),ge}function i(){return te.buffer!=ue.buffer&&rt(),ke}function s(){return te.buffer!=ue.buffer&&rt(),Fe}function o(){return te.buffer!=ue.buffer&&rt(),F}function d(){return te.buffer!=ue.buffer&&rt(),ae}function p(){return te.buffer!=ue.buffer&&rt(),xe}function m(){return te.buffer!=ue.buffer&&rt(),ht}var l=t,g,b;l.ready=new Promise((a,c)=>{g=a,b=c}),l.mountExternalData=(a,c)=>{(l.Fb||(l.Fb=new Map)).set(a,c)},l.unmountExternalData=()=>{delete l.Fb};let $=()=>{let a=(h,w,C)=>(...k)=>{let W=bt,L=w?.();k=h(...k);let ee=w?.();return L!==ee&&(h=ee,C(L),w=C=null),bt!=W?E():k},c=h=>async(...w)=>{try{if(l.Eb)throw Error("Session already started");let C=l.Eb={kc:w[0],errors:[]},k=await h(...w);if(l.Eb!==C)throw Error("Session mismatch");l.Ob?.flush();let W=C.errors;if(0<W.length){let L=await Promise.all(W);if(L=L.filter(ee=>ee),0<L.length)throw Error(L.join(`
`))}return k}finally{l.Eb=null}};l._OrtCreateSession=a(l._OrtCreateSession,()=>l._OrtCreateSession,h=>l._OrtCreateSession=h),l._OrtRun=c(a(l._OrtRun,()=>l._OrtRun,h=>l._OrtRun=h)),l._OrtRunWithBinding=c(a(l._OrtRunWithBinding,()=>l._OrtRunWithBinding,h=>l._OrtRunWithBinding=h)),l._OrtBindInput=a(l._OrtBindInput,()=>l._OrtBindInput,h=>l._OrtBindInput=h),$=void 0};l.jsepInit=(a,c)=>{if($?.(),a==="webgpu"){[l.Ob,l.ac,l.ec,l.Pb,l.dc,l.eb,l.fc,l.ic,l.bc,l.cc,l.hc]=c;let h=l.Ob;l.jsepRegisterBuffer=(w,C,k,W)=>h.registerBuffer(w,C,k,W),l.jsepGetBuffer=w=>h.getBuffer(w),l.jsepCreateDownloader=(w,C,k)=>h.createDownloader(w,C,k),l.jsepOnReleaseSession=w=>{h.onReleaseSession(w)},l.jsepOnRunStart=w=>h.onRunStart(w)}};var v=Object.assign({},l),S="./this.program",T=(a,c)=>{throw c},I=typeof window=="object",x=typeof importScripts=="function",O=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",A=l.ENVIRONMENT_IS_PTHREAD||!1,P="";function N(a){return l.locateFile?l.locateFile(a,P):P+a}var V,G,ie;if(O){var Z=(Mi(),Kt(Di)),U=(Wi(),Kt(Ui));P=x?U.dirname(P)+"/":__dirname+"/",V=(c,h)=>(c=Nt(c)?new URL(c):U.normalize(c),Z.readFileSync(c,h?void 0:"utf8")),ie=c=>(c=V(c,!0),c.buffer||(c=new Uint8Array(c)),c),G=(c,h,w,C=!0)=>{c=Nt(c)?new URL(c):U.normalize(c),Z.readFile(c,C?void 0:"utf8",(k,W)=>{k?w(k):h(C?W.buffer:W)})},!l.thisProgram&&1<process.argv.length&&(S=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),T=(c,h)=>{throw process.exitCode=c,h},l.inspect=()=>"[Emscripten Module object]";let a;try{a=Do()}catch(c){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),c}global.Worker=a.Worker}else(I||x)&&(x?P=self.location.href:typeof document<"u"&&document.currentScript&&(P=document.currentScript.src),typeof e<"u"&&e&&(P=e),P.indexOf("blob:")!==0?P=P.substr(0,P.replace(/[?#].*/,"").lastIndexOf("/")+1):P="",O||(V=a=>{var c=new XMLHttpRequest;return c.open("GET",a,!1),c.send(null),c.responseText},x&&(ie=a=>{var c=new XMLHttpRequest;return c.open("GET",a,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),G=(a,c,h)=>{var w=new XMLHttpRequest;w.open("GET",a,!0),w.responseType="arraybuffer",w.onload=()=>{w.status==200||w.status==0&&w.response?c(w.response):h()},w.onerror=h,w.send(null)}));O&&typeof performance>"u"&&(global.performance=Mo().performance);var re=console.log.bind(console),Be=console.error.bind(console);O&&(re=(...a)=>Z.writeSync(1,a.join(" ")+`
`),Be=(...a)=>Z.writeSync(2,a.join(" ")+`
`));var Oe=re,Ie=Be;Object.assign(l,v),v=null,typeof WebAssembly!="object"&&Ft("no native wasm support detected");var te,Me,ye=!1,he,ue,ge,ke,Fe,F,ae,xe,Ge,Xe,ht;function rt(){var a=te.buffer;l.HEAP8=ue=new Int8Array(a),l.HEAP16=ke=new Int16Array(a),l.HEAPU8=ge=new Uint8Array(a),l.HEAPU16=Fe=new Uint16Array(a),l.HEAP32=F=new Int32Array(a),l.HEAPU32=ae=new Uint32Array(a),l.HEAPF32=xe=new Float32Array(a),l.HEAPF64=ht=new Float64Array(a),l.HEAP64=Ge=new BigInt64Array(a),l.HEAPU64=Xe=new BigUint64Array(a)}var qe=16777216;if(A)te=l.wasmMemory;else if(l.wasmMemory)te=l.wasmMemory;else if(te=new WebAssembly.Memory({initial:qe/65536,maximum:65536,shared:!0}),!(te.buffer instanceof SharedArrayBuffer))throw Ie("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),O&&Ie("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");rt(),qe=te.buffer.byteLength;var je=[],gt=[],Lt=[],kt=0,mr=null,Jt=null;function Or(){if(kt--,kt==0&&(mr!==null&&(clearInterval(mr),mr=null),Jt)){var a=Jt;Jt=null,a()}}function Ft(a){throw a="Aborted("+a+")",Ie(a),ye=!0,he=1,a=new WebAssembly.RuntimeError(a+". Build with -sASSERTIONS for more info."),b(a),a}var Ke=a=>a.startsWith("data:application/octet-stream;base64,"),Nt=a=>a.startsWith("file://"),Pt;Pt="ort-wasm-simd-threaded.wasm",Ke(Pt)||(Pt=N(Pt));function kr(a){if(ie)return ie(a);throw"both async and sync fetching of the wasm failed"}function ln(a){if(I||x){if(typeof fetch=="function"&&!Nt(a))return fetch(a,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at '"+a+"'";return c.arrayBuffer()}).catch(()=>kr(a));if(G)return new Promise((c,h)=>{G(a,w=>c(new Uint8Array(w)),h)})}return Promise.resolve().then(()=>kr(a))}function lt(a,c,h){return ln(a).then(w=>WebAssembly.instantiate(w,c)).then(w=>w).then(h,w=>{Ie(`failed to asynchronously prepare wasm: ${w}`),Ft(w)})}function Pr(a,c){var h=Pt;return typeof WebAssembly.instantiateStreaming!="function"||Ke(h)||Nt(h)||O||typeof fetch!="function"?lt(h,a,c):fetch(h,{credentials:"same-origin"}).then(w=>WebAssembly.instantiateStreaming(w,a).then(c,function(C){return Ie(`wasm streaming compile failed: ${C}`),Ie("falling back to ArrayBuffer instantiation"),lt(h,a,c)}))}var er={907972:(a,c,h,w)=>{if(typeof l>"u"||!l.Fb)return 1;if(a=Ue(a>>>0),a.startsWith("./")&&(a=a.substring(2)),a=l.Fb.get(a),!a)return 2;if(c>>>=0,h>>>=0,w>>>=0,c+h>a.byteLength)return 3;try{return n().set(a.subarray(c,c+h),w>>>0),0}catch{return 4}},908473:()=>{l.bc()},908504:()=>{l.cc()},908533:()=>{l.hc()},908558:a=>l.ac(a),908591:a=>l.ec(a),908623:(a,c,h)=>{l.Pb(a,c,h,!0)},908662:(a,c,h)=>{l.Pb(a,c,h)},908695:a=>{l.eb("Abs",a,void 0)},908746:a=>{l.eb("Neg",a,void 0)},908797:a=>{l.eb("Floor",a,void 0)},908850:a=>{l.eb("Ceil",a,void 0)},908902:a=>{l.eb("Reciprocal",a,void 0)},908960:a=>{l.eb("Sqrt",a,void 0)},909012:a=>{l.eb("Exp",a,void 0)},909063:a=>{l.eb("Erf",a,void 0)},909114:a=>{l.eb("Sigmoid",a,void 0)},909169:(a,c,h)=>{l.eb("HardSigmoid",a,{alpha:c,beta:h})},909248:a=>{l.eb("Log",a,void 0)},909299:a=>{l.eb("Sin",a,void 0)},909350:a=>{l.eb("Cos",a,void 0)},909401:a=>{l.eb("Tan",a,void 0)},909452:a=>{l.eb("Asin",a,void 0)},909504:a=>{l.eb("Acos",a,void 0)},909556:a=>{l.eb("Atan",a,void 0)},909608:a=>{l.eb("Sinh",a,void 0)},909660:a=>{l.eb("Cosh",a,void 0)},909712:a=>{l.eb("Asinh",a,void 0)},909765:a=>{l.eb("Acosh",a,void 0)},909818:a=>{l.eb("Atanh",a,void 0)},909871:a=>{l.eb("Tanh",a,void 0)},909923:a=>{l.eb("Not",a,void 0)},909974:(a,c,h)=>{l.eb("Clip",a,{min:c,max:h})},910043:a=>{l.eb("Clip",a,void 0)},910095:(a,c)=>{l.eb("Elu",a,{alpha:c})},910153:a=>{l.eb("Relu",a,void 0)},910205:(a,c)=>{l.eb("LeakyRelu",a,{alpha:c})},910269:(a,c)=>{l.eb("ThresholdedRelu",a,{alpha:c})},910339:(a,c)=>{l.eb("Cast",a,{to:c})},910397:a=>{l.eb("Add",a,void 0)},910448:a=>{l.eb("Sub",a,void 0)},910499:a=>{l.eb("Mul",a,void 0)},910550:a=>{l.eb("Div",a,void 0)},910601:a=>{l.eb("Pow",a,void 0)},910652:a=>{l.eb("Equal",a,void 0)},910705:a=>{l.eb("Greater",a,void 0)},910760:a=>{l.eb("GreaterOrEqual",a,void 0)},910822:a=>{l.eb("Less",a,void 0)},910874:a=>{l.eb("LessOrEqual",a,void 0)},910933:(a,c,h,w,C)=>{l.eb("ReduceMean",a,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},911092:(a,c,h,w,C)=>{l.eb("ReduceMax",a,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},911250:(a,c,h,w,C)=>{l.eb("ReduceMin",a,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},911408:(a,c,h,w,C)=>{l.eb("ReduceProd",a,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},911567:(a,c,h,w,C)=>{l.eb("ReduceSum",a,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},911725:(a,c,h,w,C)=>{l.eb("ReduceL1",a,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},911882:(a,c,h,w,C)=>{l.eb("ReduceL2",a,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},912039:(a,c,h,w,C)=>{l.eb("ReduceLogSum",a,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},912200:(a,c,h,w,C)=>{l.eb("ReduceSumSquare",a,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},912364:(a,c,h,w,C)=>{l.eb("ReduceLogSumExp",a,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},912528:a=>{l.eb("Where",a,void 0)},912581:(a,c,h)=>{l.eb("Transpose",a,{perm:c?Array.from(o().subarray(c>>>0,h>>>0)):[]})},912689:(a,c,h,w,C,k,W,L,ee,Q,pe,Ce,ze,B,fe)=>{l.eb("ConvTranspose",a,{format:ee?"NHWC":"NCHW",autoPad:c,dilations:[h],group:w,kernel_shape:[C],pads:[k,W],strides:[L],wIsConst:()=>!!r()[Q>>>0],outputPadding:pe?Array.from(o().subarray(pe>>>0,Ce>>>0)):[],outputShape:ze?Array.from(o().subarray(ze>>>0,B>>>0)):[],activation:Ue(fe)})},913091:(a,c,h,w,C,k,W,L,ee,Q,pe,Ce,ze,B)=>{l.eb("ConvTranspose",a,{format:L?"NHWC":"NCHW",autoPad:c,dilations:Array.from(o().subarray(h>>>0,(h>>>0)+2>>>0)),group:w,kernelShape:Array.from(o().subarray(C>>>0,(C>>>0)+2>>>0)),pads:Array.from(o().subarray(k>>>0,(k>>>0)+4>>>0)),strides:Array.from(o().subarray(W>>>0,(W>>>0)+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:Q?Array.from(o().subarray(Q>>>0,pe>>>0)):[],outputShape:Ce?Array.from(o().subarray(Ce>>>0,ze>>>0)):[],activation:Ue(B)})},913656:(a,c,h,w,C,k,W,L,ee,Q,pe,Ce,ze,B,fe)=>{l.eb("ConvTranspose",a,{format:ee?"NHWC":"NCHW",autoPad:c,dilations:[h],group:w,kernel_shape:[C],pads:[k,W],strides:[L],wIsConst:()=>!!r()[Q>>>0],outputPadding:pe?Array.from(o().subarray(pe>>>0,Ce>>>0)):[],outputShape:ze?Array.from(o().subarray(ze>>>0,B>>>0)):[],activation:Ue(fe)})},914058:(a,c,h,w,C,k,W,L,ee,Q,pe,Ce,ze,B)=>{l.eb("ConvTranspose",a,{format:L?"NHWC":"NCHW",autoPad:c,dilations:Array.from(o().subarray(h>>>0,(h>>>0)+2>>>0)),group:w,kernelShape:Array.from(o().subarray(C>>>0,(C>>>0)+2>>>0)),pads:Array.from(o().subarray(k>>>0,(k>>>0)+4>>>0)),strides:Array.from(o().subarray(W>>>0,(W>>>0)+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:Q?Array.from(o().subarray(Q>>>0,pe>>>0)):[],outputShape:Ce?Array.from(o().subarray(Ce>>>0,ze>>>0)):[],activation:Ue(B)})},914623:(a,c)=>{l.eb("GlobalAveragePool",a,{format:c?"NHWC":"NCHW"})},914714:(a,c,h,w,C,k,W,L,ee,Q,pe,Ce,ze,B,fe,Pe)=>{l.eb("AveragePool",a,{format:Pe?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:w,storage_order:C,dilations:[k,W],kernel_shape:[L,ee],pads:[Q,pe,Ce,ze],strides:[B,fe]})},914998:(a,c)=>{l.eb("GlobalAveragePool",a,{format:c?"NHWC":"NCHW"})},915089:(a,c,h,w,C,k,W,L,ee,Q,pe,Ce,ze,B,fe,Pe)=>{l.eb("AveragePool",a,{format:Pe?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:w,storage_order:C,dilations:[k,W],kernel_shape:[L,ee],pads:[Q,pe,Ce,ze],strides:[B,fe]})},915373:(a,c)=>{l.eb("GlobalMaxPool",a,{format:c?"NHWC":"NCHW"})},915460:(a,c,h,w,C,k,W,L,ee,Q,pe,Ce,ze,B,fe,Pe)=>{l.eb("MaxPool",a,{format:Pe?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:w,storage_order:C,dilations:[k,W],kernel_shape:[L,ee],pads:[Q,pe,Ce,ze],strides:[B,fe]})},915740:(a,c)=>{l.eb("GlobalMaxPool",a,{format:c?"NHWC":"NCHW"})},915827:(a,c,h,w,C,k,W,L,ee,Q,pe,Ce,ze,B,fe,Pe)=>{l.eb("MaxPool",a,{format:Pe?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:w,storage_order:C,dilations:[k,W],kernel_shape:[L,ee],pads:[Q,pe,Ce,ze],strides:[B,fe]})},916107:(a,c,h,w,C)=>{l.eb("Gemm",a,{alpha:c,beta:h,transA:w,transB:C})},916211:a=>{l.eb("MatMul",a,void 0)},916265:(a,c,h,w)=>{l.eb("ArgMax",a,{keepDims:!!c,selectLastIndex:!!h,axis:w})},916373:(a,c,h,w)=>{l.eb("ArgMin",a,{keepDims:!!c,selectLastIndex:!!h,axis:w})},916481:(a,c)=>{l.eb("Softmax",a,{axis:c})},916544:(a,c)=>{l.eb("Concat",a,{axis:c})},916604:(a,c,h,w,C)=>{l.eb("Split",a,{axis:c,numOutputs:h,splitSizes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},916744:a=>{l.eb("Expand",a,void 0)},916798:(a,c)=>{l.eb("Gather",a,{axis:Number(c)})},916869:(a,c)=>{l.eb("GatherElements",a,{axis:Number(c)})},916948:(a,c,h,w,C,k,W,L,ee,Q,pe)=>{l.eb("Resize",a,{antialias:c,axes:h?Array.from(o().subarray(h>>>0,w>>>0)):[],coordinateTransformMode:Ue(C),cubicCoeffA:k,excludeOutside:W,extrapolationValue:L,keepAspectRatioPolicy:Ue(ee),mode:Ue(Q),nearestMode:Ue(pe)})},917294:(a,c,h,w,C,k,W)=>{l.eb("Slice",a,{starts:c?Array.from(o().subarray(c>>>0,h>>>0)):[],ends:w?Array.from(o().subarray(w>>>0,C>>>0)):[],axes:k?Array.from(o().subarray(k>>>0,W>>>0)):[]})},917510:a=>{l.eb("Tile",a,void 0)},917562:(a,c,h)=>{l.eb("LayerNormalization",a,{axis:Number(c),epsilon:Number(h)})},917669:(a,c,h)=>{l.eb("InstanceNormalization",a,{epsilon:c,format:h?"NHWC":"NCHW"})},917783:(a,c,h)=>{l.eb("InstanceNormalization",a,{epsilon:c,format:h?"NHWC":"NCHW"})},917897:a=>{l.eb("Range",a,void 0)},917950:(a,c)=>{l.eb("Einsum",a,{equation:Ue(c)})},918031:(a,c,h,w,C)=>{l.eb("Pad",a,{mode:c,value:h,pads:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},918158:(a,c,h,w,C,k)=>{l.eb("BatchNormalization",a,{epsilon:c,momentum:h,spatial:!!C,trainingMode:!!w,format:k?"NHWC":"NCHW"})},918327:(a,c,h,w,C,k)=>{l.eb("BatchNormalization",a,{epsilon:c,momentum:h,spatial:!!C,trainingMode:!!w,format:k?"NHWC":"NCHW"})},918496:(a,c,h)=>{l.eb("CumSum",a,{exclusive:Number(c),reverse:Number(h)})},918593:(a,c,h,w,C,k,W,L,ee)=>{l.eb("Attention",a,{numHeads:c,isUnidirectional:h,maskFilterValue:w,scale:C,doRotary:k,qkvHiddenSizes:W?Array.from(o().subarray(Number(L)>>>0,Number(L)+W>>>0)):[],pastPresentShareBuffer:!!ee})},918865:a=>{l.eb("BiasAdd",a,void 0)},918920:a=>{l.eb("BiasSplitGelu",a,void 0)},918981:a=>{l.eb("FastGelu",a,void 0)},919037:(a,c,h,w,C,k,W,L,ee,Q,pe,Ce,ze)=>{l.eb("Conv",a,{format:ee?"NHWC":"NCHW",auto_pad:c,dilations:[h],group:w,kernel_shape:[C],pads:k?Array.from(o().subarray(k>>>0,W>>>0)):[],strides:[L],w_is_const:()=>!!r()[Q>>>0],activation:Ue(pe),activation_params:Ce?Array.from(p().subarray(Ce>>>0,ze>>>0)):[]})},919407:(a,c,h,w,C,k,W,L,ee,Q,pe,Ce,ze,B,fe,Pe)=>{l.eb("Conv",a,{format:Ce?"NHWC":"NCHW",auto_pad:c,dilations:[h,w],group:C,kernel_shape:[k,W],pads:L?Array.from(o().subarray(L>>>0,ee>>>0)):[],strides:[Q,pe],w_is_const:()=>!!r()[ze>>>0],activation:Ue(B),activation_params:fe?Array.from(p().subarray(fe>>>0,Pe>>>0)):[]})},919798:a=>{l.eb("Gelu",a,void 0)},919850:(a,c,h,w,C,k)=>{l.eb("MatMulNBits",a,{k:c,n:h,accuracyLevel:w,bits:C,blockSize:k})},919977:(a,c,h,w,C,k)=>{l.eb("MultiHeadAttention",a,{numHeads:c,isUnidirectional:h,maskFilterValue:w,scale:C,doRotary:k})},920136:(a,c)=>{l.eb("SkipLayerNormalization",a,{epsilon:c})},920217:a=>{l.fc(a)},920251:(a,c)=>l.ic(a,c,l.Eb.kc,l.Eb.errors)};function Rr(a){this.name="ExitStatus",this.message=`Program terminated with exit(${a})`,this.status=a}var vt=a=>{a.terminate(),a.onmessage=()=>{}},dn=a=>{le.yb.length==0&&(Ur(),le.Qb(le.yb[0]));var c=le.yb.pop();if(!c)return 6;le.zb.push(c),le.pb[a.xb]=c,c.xb=a.xb;var h={cmd:"run",start_routine:a.lc,arg:a.Wb,pthread_ptr:a.xb};return O&&c.unref(),c.postMessage(h,a.rc),0},Ze=0,zr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Br=(a,c,h)=>{c>>>=0;var w=c+h;for(h=c;a[h]&&!(h>=w);)++h;if(16<h-c&&a.buffer&&zr)return zr.decode(a.buffer instanceof SharedArrayBuffer?a.slice(c,h):a.subarray(c,h));for(w="";c<h;){var C=a[c++];if(C&128){var k=a[c++]&63;if((C&224)==192)w+=String.fromCharCode((C&31)<<6|k);else{var W=a[c++]&63;C=(C&240)==224?(C&15)<<12|k<<6|W:(C&7)<<18|k<<12|W<<6|a[c++]&63,65536>C?w+=String.fromCharCode(C):(C-=65536,w+=String.fromCharCode(55296|C>>10,56320|C&1023))}}else w+=String.fromCharCode(C)}return w},Ue=(a,c)=>(a>>>=0)?Br(n(),a,c):"",Dr=a=>{var c=Ei();return a=a(),Pn(c),a};function _e(a,c){var h=arguments.length-2,w=arguments;return Dr(()=>{for(var C=2*h,k=Oi(8*C),W=k>>>3,L=0;L<h;L++){var ee=w[2+L];typeof ee=="bigint"?(Ge[W+2*L]=1n,Ge[W+2*L+1]=ee):(Ge[W+2*L]=0n,m()[W+2*L+1>>>0]=ee)}return La(a,C,k,c)})}function dt(a){if(A)return _e(0,1,a);he=a,0<Ze||(le.mc(),l.onExit?.(a),ye=!0),T(a,new Rr(a))}var hr=a=>{if(he=a,A)throw cn(a),"unwind";dt(a)},Mr=a=>{a instanceof Rr||a=="unwind"||T(1,a)};function wi(){for(var a=l.numThreads;a--;)Ur();je.unshift(()=>{kt++,vi(()=>Or())})}function Ur(){var a=N("ort-wasm-simd-threaded.worker.js");a=new Worker(a),le.yb.push(a)}function vi(a){A?a():Promise.all(le.yb.map(le.Qb)).then(a)}var le={yb:[],zb:[],Vb:[],pb:{},Ib(){A?(le.receiveObjectTransfer=le.jc,le.threadInitTLS=le.Ub,le.setExitStatus=le.Tb):wi()},Tb:a=>he=a,vc:["$terminateWorker"],mc:()=>{for(var a of le.zb)vt(a);for(a of le.yb)vt(a);le.yb=[],le.zb=[],le.pb=[]},Sb:a=>{var c=a.xb;delete le.pb[c],le.yb.push(a),le.zb.splice(le.zb.indexOf(a),1),a.xb=0,Ai(c)},jc(){},Ub(){le.Vb.forEach(a=>a())},Qb:a=>new Promise(c=>{a.onmessage=k=>{k=k.data;var W=k.cmd;if(k.targetThread&&k.targetThread!=kn()){var L=le.pb[k.targetThread];L?L.postMessage(k,k.transferList):Ie(`Internal error! Worker sent a message "${W}" to target pthread ${k.targetThread}, but that thread no longer exists!`)}else W==="checkMailbox"?ir():W==="spawnThread"?dn(k):W==="cleanupThread"?le.Sb(le.pb[k.thread]):W==="killThread"?(k=k.thread,W=le.pb[k],delete le.pb[k],vt(W),Ai(k),le.zb.splice(le.zb.indexOf(W),1),W.xb=0):W==="cancelThread"?le.pb[k.thread].postMessage({cmd:"cancel"}):W==="loaded"?(a.loaded=!0,O&&!a.xb&&a.unref(),c(a)):W==="alert"?alert(`Thread ${k.threadId}: ${k.text}`):k.target==="setimmediate"?a.postMessage(k):W==="callHandler"?l[k.handler](...k.args):W&&Ie(`worker sent an unknown command ${W}`)},a.onerror=k=>{throw Ie(`worker sent an error! ${k.filename}:${k.lineno}: ${k.message}`),k},O&&(a.on("message",k=>a.onmessage({data:k})),a.on("error",k=>a.onerror(k)));var h=[],w=["onExit"],C;for(C of w)l.hasOwnProperty(C)&&h.push(C);a.postMessage({cmd:"load",handlers:h,urlOrBlob:l.mainScriptUrlOrBlob||e,wasmMemory:te,wasmModule:Me})})};l.PThread=le;var gr=a=>{for(;0<a.length;)a.shift()(l)};l.establishStackSpace=()=>{var a=kn(),c=d()[a+52>>>2>>>0];a=d()[a+56>>>2>>>0],qa(c,c-a),Pn(c)};function cn(a){if(A)return _e(1,0,a);hr(a)}l.invokeEntryPoint=(a,c)=>{a=ja.apply(null,[a,c]),0<Ze?le.Tb(a):Ti(a)};function $i(a){this.Db=a-24,this.tc=function(c){d()[this.Db+4>>>2>>>0]=c},this.Mb=function(c){d()[this.Db+8>>>2>>>0]=c},this.Ib=function(c,h){this.Kb(),this.tc(c),this.Mb(h)},this.Kb=function(){d()[this.Db+16>>>2>>>0]=0}}var pn=0,Wr=0;function Nr(a,c,h,w){return A?_e(2,1,a,c,h,w):tr(a,c,h,w)}function tr(a,c,h,w){if(a>>>=0,c>>>=0,h>>>=0,w>>>=0,typeof SharedArrayBuffer>"u")return Ie("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var C=[];return A&&C.length===0?Nr(a,c,h,w):(a={lc:h,xb:a,Wb:w,rc:C},A?(a.uc="spawnThread",postMessage(a,C),0):dn(a))}function fn(a,c,h){return A?_e(3,1,a,c,h):0}function Ct(a,c){if(A)return _e(4,1,a,c)}var nt=a=>{for(var c=0,h=0;h<a.length;++h){var w=a.charCodeAt(h);127>=w?c++:2047>=w?c+=2:55296<=w&&57343>=w?(c+=4,++h):c+=3}return c},Vr=(a,c,h,w)=>{if(h>>>=0,!(0<w))return 0;var C=h;w=h+w-1;for(var k=0;k<a.length;++k){var W=a.charCodeAt(k);if(55296<=W&&57343>=W){var L=a.charCodeAt(++k);W=65536+((W&1023)<<10)|L&1023}if(127>=W){if(h>=w)break;c[h++>>>0]=W}else{if(2047>=W){if(h+1>=w)break;c[h++>>>0]=192|W>>6}else{if(65535>=W){if(h+2>=w)break;c[h++>>>0]=224|W>>12}else{if(h+3>=w)break;c[h++>>>0]=240|W>>18,c[h++>>>0]=128|W>>12&63}c[h++>>>0]=128|W>>6&63}c[h++>>>0]=128|W&63}}return c[h>>>0]=0,h-C},qt=(a,c,h)=>Vr(a,n(),c,h);function Gr(a,c){if(A)return _e(5,1,a,c)}function Hr(a,c,h){if(A)return _e(6,1,a,c,h)}function mn(a,c,h){return A?_e(7,1,a,c,h):0}function yr(a,c){if(A)return _e(8,1,a,c)}function hn(a,c,h){if(A)return _e(9,1,a,c,h)}function gn(a,c,h,w){if(A)return _e(10,1,a,c,h,w)}function yn(a,c,h,w){if(A)return _e(11,1,a,c,h,w)}function bn(a,c,h,w){if(A)return _e(12,1,a,c,h,w)}function Lr(a){if(A)return _e(13,1,a)}function rr(a,c){if(A)return _e(14,1,a,c)}function wn(a,c,h){if(A)return _e(15,1,a,c,h)}var br=a=>{if(a===null)return"null";var c=typeof a;return c==="object"||c==="array"||c==="function"?a.toString():""+a},Fr,yt=a=>{for(var c="";n()[a>>>0];)c+=Fr[n()[a++>>>0]];return c},qr={},wr={},_i={},it;function vn(a,c,h={}){var w=c.name;if(!a)throw new it(`type "${w}" must have a positive integer typeid pointer`);if(wr.hasOwnProperty(a)){if(h.Zb)return;throw new it(`Cannot register type '${w}' twice`)}wr[a]=c,delete _i[a],qr.hasOwnProperty(a)&&(c=qr[a],delete qr[a],c.forEach(C=>C()))}function $t(a,c,h={}){if(!("argPackAdvance"in c))throw new TypeError("registerType registeredInstance requires argPackAdvance");vn(a,c,h)}var jr=(a,c,h)=>{switch(c){case 1:return h?w=>r()[w>>>0>>>0]:w=>n()[w>>>0>>>0];case 2:return h?w=>i()[w>>>1>>>0]:w=>s()[w>>>1>>>0];case 4:return h?w=>o()[w>>>2>>>0]:w=>d()[w>>>2>>>0];case 8:return h?w=>Ge[w>>>3]:w=>Xe[w>>>3];default:throw new TypeError(`invalid integer width (${c}): ${a}`)}};function vr(){this.wb=[void 0],this.Nb=[]}var at=new vr;function nr(a){a>>>=0,a>=at.Db&&--at.get(a).Rb===0&&at.Mb(a)}var Qe=a=>{if(!a)throw new it("Cannot use deleted val. handle = "+a);return at.get(a).value},ot=a=>{switch(a){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return at.Kb({Rb:1,value:a})}};function $n(a){return this.fromWireType(o()[a>>>2>>>0])}var _n=(a,c)=>{switch(c){case 4:return function(h){return this.fromWireType(p()[h>>>2>>>0])};case 8:return function(h){return this.fromWireType(m()[h>>>3>>>0])};default:throw new TypeError(`invalid float width (${c}): ${a}`)}};function Sn(a){return this.fromWireType(d()[a>>>2>>>0])}var xn=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Cn=(a,c)=>{for(var h=a>>1,w=h+c/2;!(h>=w)&&s()[h>>>0];)++h;if(h<<=1,32<h-a&&xn)return xn.decode(n().slice(a,h));for(h="",w=0;!(w>=c/2);++w){var C=i()[a+2*w>>>1>>>0];if(C==0)break;h+=String.fromCharCode(C)}return h},In=(a,c,h)=>{if(h??=2147483647,2>h)return 0;h-=2;var w=c;h=h<2*a.length?h/2:a.length;for(var C=0;C<h;++C){var k=a.charCodeAt(C);i()[c>>>1>>>0]=k,c+=2}return i()[c>>>1>>>0]=0,c-w},$r=a=>2*a.length,Si=(a,c)=>{for(var h=0,w="";!(h>=c/4);){var C=o()[a+4*h>>>2>>>0];if(C==0)break;++h,65536<=C?(C-=65536,w+=String.fromCharCode(55296|C>>10,56320|C&1023)):w+=String.fromCharCode(C)}return w},oe=(a,c,h)=>{if(c>>>=0,h??=2147483647,4>h)return 0;var w=c;h=w+h-4;for(var C=0;C<a.length;++C){var k=a.charCodeAt(C);if(55296<=k&&57343>=k){var W=a.charCodeAt(++C);k=65536+((k&1023)<<10)|W&1023}if(o()[c>>>2>>>0]=k,c+=4,c+4>h)break}return o()[c>>>2>>>0]=0,c-w},An=a=>{for(var c=0,h=0;h<a.length;++h){var w=a.charCodeAt(h);55296<=w&&57343>=w&&++h,c+=4}return c},jt=()=>{if(!(0<Ze))try{A?Ti(he):hr(he)}catch(a){Mr(a)}};function ct(a){a>>>=0,typeof Atomics.sc=="function"&&(Atomics.sc(o(),a>>>2,a).value.then(ir),a+=128,Atomics.store(o(),a>>>2,1))}l.__emscripten_thread_mailbox_await=ct;var ir=()=>{var a=kn();if(a&&(ct(a),!ye))try{Fa(),jt()}catch(c){Mr(c)}};l.checkMailbox=ir;var _r=[],Sr=(a,c)=>{var h=wr[a];if(h===void 0)throw a=Ga(a),h=yt(a),Rt(a),new it(c+" has unknown type "+h);return h},Kr=(a,c,h)=>{var w=[];return a=a.toWireType(w,h),w.length&&(d()[c>>>2>>>0]=ot(w)),a},ar=a=>{try{a()}catch(c){Ft(c)}};function Tn(){var a=ne,c={};for(let[h,w]of Object.entries(a))c[h]=typeof w=="function"?function(){Vt.push(h);try{return w.apply(null,arguments)}finally{ye||(Vt.pop(),bt&&It===1&&Vt.length===0&&(It=0,Ze+=1,ar(Ya),typeof Fibers<"u"&&Fibers.xc()))}}:w;return c}var It=0,bt=null,En=0,Vt=[],Yr={},u={},f=0,y=null,_=[];function E(){return new Promise((a,c)=>{y={resolve:a,reject:c}})}function z(){var a=Xr(65548),c=a+12;d()[a>>>2>>>0]=c,d()[a+4>>>2>>>0]=c+65536,c=Vt[0];var h=Yr[c];return h===void 0&&(h=f++,Yr[c]=h,u[h]=c),c=h,o()[a+8>>>2>>>0]=c,a}function H(){var a=o()[bt+8>>>2>>>0];return a=ne[u[a]],--Ze,a()}function q(a){if(!ye){if(It===0){var c=!1,h=!1;a((w=0)=>{if(!ye&&(En=w,c=!0,h)){It=2,ar(()=>Xa(bt)),typeof Browser<"u"&&Browser.Jb.Yb&&Browser.Jb.resume(),w=!1;try{var C=H()}catch(L){C=L,w=!0}var k=!1;if(!bt){var W=y;W&&(y=null,(w?W.reject:W.resolve)(C),k=!0)}if(w&&!k)throw C}}),h=!0,c||(It=1,bt=z(),typeof Browser<"u"&&Browser.Jb.Yb&&Browser.Jb.pause(),ar(()=>Ka(bt)))}else It===2?(It=0,ar(Za),Rt(bt),bt=null,_.forEach(w=>{if(!ye)try{w(),jt()}catch(C){Mr(C)}})):Ft(`invalid state: ${It}`);return En}}function J(a){return q(c=>{a().then(c)})}var Y=[],de={},be=a=>{var c=de[a];return c===void 0?yt(a):c},Te=()=>typeof globalThis=="object"?globalThis:Function("return this")(),R=a=>{var c=Y.length;return Y.push(a),c},ce=(a,c)=>{for(var h=Array(a),w=0;w<a;++w)h[w]=Sr(d()[c+4*w>>>2>>>0],"parameter "+w);return h},Ae=(a,c)=>Object.defineProperty(c,"name",{value:a});function Gt(a){var c=Function;if(!(c instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof c} which is not a function`);var h=Ae(c.name||"unknownFunctionName",function(){});return h.prototype=c.prototype,h=new h,a=c.apply(h,a),a instanceof Object?a:h}var Ht=a=>a%4===0&&(a%100!==0||a%400===0),xa=[0,31,60,91,121,152,182,213,244,274,305,335],Ca=[0,31,59,90,120,151,181,212,243,273,304,334];function Ia(a,c,h,w,C,k,W){return A?_e(16,1,a,c,h,w,C,k,W):-52}function Aa(a,c,h,w,C,k){if(A)return _e(17,1,a,c,h,w,C,k)}var Ta=a=>{var c=nt(a)+1,h=Xr(c);return h&&qt(a,h,c),h},xi=[],Ea=(a,c)=>{xi.length=0;for(var h;h=n()[a++>>>0];){var w=h!=105;w&=h!=112,c+=w&&c%8?4:0,xi.push(h==112?d()[c>>>2>>>0]:h==106?Ge[c>>>3]:h==105?o()[c>>>2>>>0]:m()[c>>>3>>>0]),c+=w?8:4}return xi},Ci={},Oa=()=>{if(!Ii){var a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:S||"./this.program"},c;for(c in Ci)Ci[c]===void 0?delete a[c]:a[c]=Ci[c];var h=[];for(c in a)h.push(`${c}=${a[c]}`);Ii=h}return Ii},Ii;function ka(a,c){if(A)return _e(18,1,a,c);a>>>=0,c>>>=0;var h=0;return Oa().forEach((w,C)=>{var k=c+h;for(C=d()[a+4*C>>>2>>>0]=k,k=0;k<w.length;++k)r()[C++>>>0>>>0]=w.charCodeAt(k);r()[C>>>0>>>0]=0,h+=w.length+1}),0}function Pa(a,c){if(A)return _e(19,1,a,c);a>>>=0,c>>>=0;var h=Oa();d()[a>>>2>>>0]=h.length;var w=0;return h.forEach(C=>w+=C.length+1),d()[c>>>2>>>0]=w,0}function Ra(a){return A?_e(20,1,a):52}function za(a,c,h,w){return A?_e(21,1,a,c,h,w):52}function Ba(a,c,h,w){return A?_e(22,1,a,c,h,w):70}var Yd=[null,[],[]];function Da(a,c,h,w){if(A)return _e(23,1,a,c,h,w);c>>>=0,h>>>=0,w>>>=0;for(var C=0,k=0;k<h;k++){var W=d()[c>>>2>>>0],L=d()[c+4>>>2>>>0];c+=8;for(var ee=0;ee<L;ee++){var Q=n()[W+ee>>>0],pe=Yd[a];Q===0||Q===10?((a===1?Oe:Ie)(Br(pe,0)),pe.length=0):pe.push(Q)}C+=L}return d()[w>>>2>>>0]=C,0}var Ma=[31,29,31,30,31,30,31,31,30,31,30,31],Ua=[31,28,31,30,31,30,31,31,30,31,30,31];function Xd(a){var c=Array(nt(a)+1);return Vr(a,c,0,c.length),c}var Zd=(a,c)=>{r().set(a,c>>>0)};function Wa(a,c,h,w){function C(B,fe,Pe){for(B=typeof B=="number"?B.toString():B||"";B.length<fe;)B=Pe[0]+B;return B}function k(B,fe){return C(B,fe,"0")}function W(B,fe){function Pe(Ja){return 0>Ja?-1:0<Ja?1:0}var or;return(or=Pe(B.getFullYear()-fe.getFullYear()))===0&&(or=Pe(B.getMonth()-fe.getMonth()))===0&&(or=Pe(B.getDate()-fe.getDate())),or}function L(B){switch(B.getDay()){case 0:return new Date(B.getFullYear()-1,11,29);case 1:return B;case 2:return new Date(B.getFullYear(),0,3);case 3:return new Date(B.getFullYear(),0,2);case 4:return new Date(B.getFullYear(),0,1);case 5:return new Date(B.getFullYear()-1,11,31);case 6:return new Date(B.getFullYear()-1,11,30)}}function ee(B){var fe=B.Ab;for(B=new Date(new Date(B.Bb+1900,0,1).getTime());0<fe;){var Pe=B.getMonth(),or=(Ht(B.getFullYear())?Ma:Ua)[Pe];if(fe>or-B.getDate())fe-=or-B.getDate()+1,B.setDate(1),11>Pe?B.setMonth(Pe+1):(B.setMonth(0),B.setFullYear(B.getFullYear()+1));else{B.setDate(B.getDate()+fe);break}}return Pe=new Date(B.getFullYear()+1,0,4),fe=L(new Date(B.getFullYear(),0,4)),Pe=L(Pe),0>=W(fe,B)?0>=W(Pe,B)?B.getFullYear()+1:B.getFullYear():B.getFullYear()-1}a>>>=0,c>>>=0,h>>>=0,w>>>=0;var Q=d()[w+40>>>2>>>0];w={pc:o()[w>>>2>>>0],oc:o()[w+4>>>2>>>0],Gb:o()[w+8>>>2>>>0],Lb:o()[w+12>>>2>>>0],Hb:o()[w+16>>>2>>>0],Bb:o()[w+20>>>2>>>0],vb:o()[w+24>>>2>>>0],Ab:o()[w+28>>>2>>>0],wc:o()[w+32>>>2>>>0],nc:o()[w+36>>>2>>>0],qc:Q?Ue(Q):""},h=Ue(h),Q={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var pe in Q)h=h.replace(new RegExp(pe,"g"),Q[pe]);var Ce="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ze="January February March April May June July August September October November December".split(" ");Q={"%a":B=>Ce[B.vb].substring(0,3),"%A":B=>Ce[B.vb],"%b":B=>ze[B.Hb].substring(0,3),"%B":B=>ze[B.Hb],"%C":B=>k((B.Bb+1900)/100|0,2),"%d":B=>k(B.Lb,2),"%e":B=>C(B.Lb,2," "),"%g":B=>ee(B).toString().substring(2),"%G":B=>ee(B),"%H":B=>k(B.Gb,2),"%I":B=>(B=B.Gb,B==0?B=12:12<B&&(B-=12),k(B,2)),"%j":B=>{for(var fe=0,Pe=0;Pe<=B.Hb-1;fe+=(Ht(B.Bb+1900)?Ma:Ua)[Pe++]);return k(B.Lb+fe,3)},"%m":B=>k(B.Hb+1,2),"%M":B=>k(B.oc,2),"%n":()=>`
`,"%p":B=>0<=B.Gb&&12>B.Gb?"AM":"PM","%S":B=>k(B.pc,2),"%t":()=>"	","%u":B=>B.vb||7,"%U":B=>k(Math.floor((B.Ab+7-B.vb)/7),2),"%V":B=>{var fe=Math.floor((B.Ab+7-(B.vb+6)%7)/7);if(2>=(B.vb+371-B.Ab-2)%7&&fe++,fe)fe==53&&(Pe=(B.vb+371-B.Ab)%7,Pe==4||Pe==3&&Ht(B.Bb)||(fe=1));else{fe=52;var Pe=(B.vb+7-B.Ab-1)%7;(Pe==4||Pe==5&&Ht(B.Bb%400-1))&&fe++}return k(fe,2)},"%w":B=>B.vb,"%W":B=>k(Math.floor((B.Ab+7-(B.vb+6)%7)/7),2),"%y":B=>(B.Bb+1900).toString().substring(2),"%Y":B=>B.Bb+1900,"%z":B=>{B=B.nc;var fe=0<=B;return B=Math.abs(B)/60,(fe?"+":"-")+("0000"+(B/60*100+B%60)).slice(-4)},"%Z":B=>B.qc,"%%":()=>"%"},h=h.replace(/%%/g,"\0\0");for(pe in Q)h.includes(pe)&&(h=h.replace(new RegExp(pe,"g"),Q[pe](w)));return h=h.replace(/\0\0/g,"%"),pe=Xd(h),pe.length>c?0:(Zd(pe,a),pe.length-1)}le.Ib();for(var Na=Array(256),On=0;256>On;++On)Na[On]=String.fromCharCode(On);Fr=Na,it=l.BindingError=class extends Error{constructor(a){super(a),this.name="BindingError"}},l.InternalError=class extends Error{constructor(a){super(a),this.name="InternalError"}},Object.assign(vr.prototype,{get(a){return this.wb[a]},has(a){return this.wb[a]!==void 0},Kb(a){var c=this.Nb.pop()||this.wb.length;return this.wb[c]=a,c},Mb(a){this.wb[a]=void 0,this.Nb.push(a)}}),at.wb.push({value:void 0},{value:null},{value:!0},{value:!1}),at.Db=at.wb.length,l.count_emval_handles=()=>{for(var a=0,c=at.Db;c<at.wb.length;++c)at.wb[c]!==void 0&&++a;return a};var Qd=[dt,cn,Nr,fn,Ct,Gr,Hr,mn,yr,hn,gn,yn,bn,Lr,rr,wn,Ia,Aa,ka,Pa,Ra,za,Ba,Da],Jd={ua:function(a,c,h){return J(async()=>{await l.dc(a,c,h)})},b:function(a,c,h){throw a>>>=0,new $i(a).Ib(c>>>0,h>>>0),pn=a,Wr++,pn},ga:function(a){Ha(a>>>0,!x,1,!I,131072,!1),le.Ub()},F:function(a){a>>>=0,A?postMessage({cmd:"cleanupThread",thread:a}):le.Sb(le.pb[a])},Y:tr,z:fn,ma:Ct,U:Gr,W:Hr,N:mn,ka:yr,da:hn,ja:gn,H:yn,V:bn,S:Lr,la:rr,T:wn,K:function(a,c,h,w,C){a>>>=0,c>>>=0,h>>>=0,c=yt(c);var k=c.indexOf("u")!=-1;k&&(C=(1n<<64n)-1n),$t(a,{name:c,fromWireType:W=>W,toWireType:function(W,L){if(typeof L!="bigint"&&typeof L!="number")throw new TypeError(`Cannot convert "${br(L)}" to ${this.name}`);if(L<w||L>C)throw new TypeError(`Passing a number "${br(L)}" from JS side to C/C++ side to an argument of type "${c}", which is outside the valid range [${w}, ${C}]!`);return L},argPackAdvance:8,readValueFromPointer:jr(c,h,!k),Cb:null})},sa:function(a,c,h,w){a>>>=0,c=yt(c>>>0),$t(a,{name:c,fromWireType:function(C){return!!C},toWireType:function(C,k){return k?h:w},argPackAdvance:8,readValueFromPointer:function(C){return this.fromWireType(n()[C>>>0])},Cb:null})},ra:function(a,c){a>>>=0,c=yt(c>>>0),$t(a,{name:c,fromWireType:h=>{var w=Qe(h);return nr(h),w},toWireType:(h,w)=>ot(w),argPackAdvance:8,readValueFromPointer:$n,Cb:null})},J:function(a,c,h){a>>>=0,h>>>=0,c=yt(c>>>0),$t(a,{name:c,fromWireType:w=>w,toWireType:(w,C)=>C,argPackAdvance:8,readValueFromPointer:_n(c,h),Cb:null})},v:function(a,c,h,w,C){if(a>>>=0,h>>>=0,c=yt(c>>>0),C===-1&&(C=4294967295),C=L=>L,w===0){var k=32-8*h;C=L=>L<<k>>>k}var W=c.includes("unsigned")?function(L,ee){return ee>>>0}:function(L,ee){return ee};$t(a,{name:c,fromWireType:C,toWireType:W,argPackAdvance:8,readValueFromPointer:jr(c,h,w!==0),Cb:null})},o:function(a,c,h){function w(k){var W=d()[k>>>2>>>0];return k=d()[k+4>>>2>>>0],new C(r().buffer,k,W)}a>>>=0;var C=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][c];h=yt(h>>>0),$t(a,{name:h,fromWireType:w,argPackAdvance:8,readValueFromPointer:w},{Zb:!0})},L:function(a,c){a>>>=0,c=yt(c>>>0);var h=c==="std::string";$t(a,{name:c,fromWireType:function(w){var C=d()[w>>>2>>>0],k=w+4;if(h)for(var W=k,L=0;L<=C;++L){var ee=k+L;if(L==C||n()[ee>>>0]==0){if(W=Ue(W,ee-W),Q===void 0)var Q=W;else Q+=String.fromCharCode(0),Q+=W;W=ee+1}}else{for(Q=Array(C),L=0;L<C;++L)Q[L]=String.fromCharCode(n()[k+L>>>0]);Q=Q.join("")}return Rt(w),Q},toWireType:function(w,C){C instanceof ArrayBuffer&&(C=new Uint8Array(C));var k=typeof C=="string";if(!(k||C instanceof Uint8Array||C instanceof Uint8ClampedArray||C instanceof Int8Array))throw new it("Cannot pass non-string to std::string");var W=h&&k?nt(C):C.length,L=Xr(4+W+1),ee=L+4;if(d()[L>>>2>>>0]=W,h&&k)qt(C,ee,W+1);else if(k)for(k=0;k<W;++k){var Q=C.charCodeAt(k);if(255<Q)throw Rt(ee),new it("String has UTF-16 code units that do not fit in 8 bits");n()[ee+k>>>0]=Q}else for(k=0;k<W;++k)n()[ee+k>>>0]=C[k];return w!==null&&w.push(Rt,L),L},argPackAdvance:8,readValueFromPointer:Sn,Cb(w){Rt(w)}})},B:function(a,c,h){if(a>>>=0,c>>>=0,h>>>=0,h=yt(h),c===2)var w=Cn,C=In,k=$r,W=()=>s(),L=1;else c===4&&(w=Si,C=oe,k=An,W=()=>d(),L=2);$t(a,{name:h,fromWireType:ee=>{for(var Q=d()[ee>>>2>>>0],pe=W(),Ce,ze=ee+4,B=0;B<=Q;++B){var fe=ee+4+B*c;(B==Q||pe[fe>>>L]==0)&&(ze=w(ze,fe-ze),Ce===void 0?Ce=ze:(Ce+=String.fromCharCode(0),Ce+=ze),ze=fe+c)}return Rt(ee),Ce},toWireType:(ee,Q)=>{if(typeof Q!="string")throw new it(`Cannot pass non-string to C++ string type ${h}`);var pe=k(Q),Ce=Xr(4+pe+c);return d()[Ce>>>2]=pe>>L,C(Q,Ce+4,pe+c),ee!==null&&ee.push(Rt,Ce),Ce},argPackAdvance:8,readValueFromPointer:$n,Cb(ee){Rt(ee)}})},ta:function(a,c){a>>>=0,c=yt(c>>>0),$t(a,{$b:!0,name:c,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},qa:()=>1,Q:function(a,c){a>>>=0,a==c>>>0?setTimeout(()=>ir()):A?postMessage({targetThread:a,cmd:"checkMailbox"}):(a=le.pb[a])&&a.postMessage({cmd:"checkMailbox"})},Z:function(a,c,h,w){c>>>=0,h/=2,_r.length=h,w=w>>>0>>>3;for(var C=0;C<h;C++)_r[C]=Ge[w+2*C]?Ge[w+2*C+1]:m()[w+2*C+1>>>0];return a=0>a?er[-a-1]:Qd[a],le.Xb=c,c=a.apply(null,_r),le.Xb=0,c},fa:ct,pa:function(a){O&&le.pb[a>>>0].ref()},t:function(a,c,h){return c>>>=0,h>>>=0,a=Qe(a>>>0),c=Sr(c,"emval::as"),Kr(c,h,a)},y:function(a){return a>>>=0,J(()=>(a=Qe(a),a.then(ot)))},p:function(a,c,h,w){return h>>>=0,w>>>=0,a=Y[a>>>0],c=Qe(c>>>0),a(null,c,h,w)},k:function(a,c,h,w,C){return h>>>=0,w>>>=0,C>>>=0,a=Y[a>>>0],c=Qe(c>>>0),h=be(h),a(c,c[h],w,C)},c:nr,C:function(a,c){return c>>>=0,a=Qe(a>>>0),c=Qe(c),a==c},n:function(a){return a>>>=0,a===0?ot(Te()):(a=be(a),ot(Te()[a]))},j:function(a,c,h){c=ce(a,c>>>0);var w=c.shift();a--;var C=`return function (obj, func, destructorsRef, args) {
`,k=0,W=[];h===0&&W.push("obj");for(var L=["retType"],ee=[w],Q=0;Q<a;++Q)W.push("arg"+Q),L.push("argType"+Q),ee.push(c[Q]),C+=`  var arg${Q} = argType${Q}.readValueFromPointer(args${k?"+"+k:""});
`,k+=c[Q].argPackAdvance;for(C+=`  var rv = ${h===1?"new func":"func.call"}(${W.join(", ")});
`,Q=0;Q<a;++Q)c[Q].deleteObject&&(C+=`  argType${Q}.deleteObject(arg${Q});
`);return w.$b||(L.push("emval_returnValue"),ee.push(Kr),C+=`  return emval_returnValue(retType, destructorsRef, rv);
`),L.push(C+`};
`),a=Gt(L).apply(null,ee),h=`methodCaller<(${c.map(pe=>pe.name).join(", ")}) => ${w.name}>`,R(Ae(h,a))},s:function(a,c){return c>>>=0,a=Qe(a>>>0),c=Qe(c),ot(a[c])},e:function(a){a>>>=0,4<a&&(at.get(a).Rb+=1)},w:function(){return ot([])},m:function(a){a=Qe(a>>>0);for(var c=Array(a.length),h=0;h<a.length;h++)c[h]=a[h];return ot(c)},f:function(a){return ot(be(a>>>0))},l:function(){return ot({})},i:function(a){a>>>=0;for(var c=Qe(a);c.length;){var h=c.pop();c.pop()(h)}nr(a)},h:function(a,c,h){c>>>=0,h>>>=0,a=Qe(a>>>0),c=Qe(c),h=Qe(h),a[c]=h},d:function(a,c){return c>>>=0,a=Sr(a>>>0,"_emval_take_value"),a=a.readValueFromPointer(c),ot(a)},aa:function(a,c){a=-9007199254740992>a||9007199254740992<a?NaN:Number(a),c>>>=0,a=new Date(1e3*a),o()[c>>>2>>>0]=a.getUTCSeconds(),o()[c+4>>>2>>>0]=a.getUTCMinutes(),o()[c+8>>>2>>>0]=a.getUTCHours(),o()[c+12>>>2>>>0]=a.getUTCDate(),o()[c+16>>>2>>>0]=a.getUTCMonth(),o()[c+20>>>2>>>0]=a.getUTCFullYear()-1900,o()[c+24>>>2>>>0]=a.getUTCDay(),a=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,o()[c+28>>>2>>>0]=a},ba:function(a,c){a=-9007199254740992>a||9007199254740992<a?NaN:Number(a),c>>>=0,a=new Date(1e3*a),o()[c>>>2>>>0]=a.getSeconds(),o()[c+4>>>2>>>0]=a.getMinutes(),o()[c+8>>>2>>>0]=a.getHours(),o()[c+12>>>2>>>0]=a.getDate(),o()[c+16>>>2>>>0]=a.getMonth(),o()[c+20>>>2>>>0]=a.getFullYear()-1900,o()[c+24>>>2>>>0]=a.getDay();var h=(Ht(a.getFullYear())?xa:Ca)[a.getMonth()]+a.getDate()-1|0;o()[c+28>>>2>>>0]=h,o()[c+36>>>2>>>0]=-(60*a.getTimezoneOffset()),h=new Date(a.getFullYear(),6,1).getTimezoneOffset();var w=new Date(a.getFullYear(),0,1).getTimezoneOffset();a=(h!=w&&a.getTimezoneOffset()==Math.min(w,h))|0,o()[c+32>>>2>>>0]=a},ca:function(a){a>>>=0;var c=new Date(o()[a+20>>>2>>>0]+1900,o()[a+16>>>2>>>0],o()[a+12>>>2>>>0],o()[a+8>>>2>>>0],o()[a+4>>>2>>>0],o()[a>>>2>>>0],0),h=o()[a+32>>>2>>>0],w=c.getTimezoneOffset(),C=new Date(c.getFullYear(),6,1).getTimezoneOffset(),k=new Date(c.getFullYear(),0,1).getTimezoneOffset(),W=Math.min(k,C);return 0>h?o()[a+32>>>2>>>0]=+(C!=k&&W==w):0<h!=(W==w)&&(C=Math.max(k,C),c.setTime(c.getTime()+6e4*((0<h?W:C)-w))),o()[a+24>>>2>>>0]=c.getDay(),h=(Ht(c.getFullYear())?xa:Ca)[c.getMonth()]+c.getDate()-1|0,o()[a+28>>>2>>>0]=h,o()[a>>>2>>>0]=c.getSeconds(),o()[a+4>>>2>>>0]=c.getMinutes(),o()[a+8>>>2>>>0]=c.getHours(),o()[a+12>>>2>>>0]=c.getDate(),o()[a+16>>>2>>>0]=c.getMonth(),o()[a+20>>>2>>>0]=c.getYear(),a=c.getTime(),isNaN(a)?(o()[Va()>>>2>>>0]=61,a=-1):a/=1e3,BigInt(a)},_:Ia,$:Aa,P:function(a,c,h){function w(Q){return(Q=Q.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Q[1]:"GMT"}a>>>=0,c>>>=0,h>>>=0;var C=new Date().getFullYear(),k=new Date(C,0,1),W=new Date(C,6,1);C=k.getTimezoneOffset();var L=W.getTimezoneOffset(),ee=Math.max(C,L);d()[a>>>2>>>0]=60*ee,o()[c>>>2>>>0]=+(C!=L),a=w(k),c=w(W),a=Ta(a),c=Ta(c),L<C?(d()[h>>>2>>>0]=a,d()[h+4>>>2>>>0]=c):(d()[h>>>2>>>0]=c,d()[h+4>>>2>>>0]=a)},q:()=>{Ft("")},g:function(a,c,h){return a>>>=0,c=Ea(c>>>0,h>>>0),er[a].apply(null,c)},M:function(a,c,h){return a>>>=0,c=Ea(c>>>0,h>>>0),er[a].apply(null,c)},G:()=>{},I:()=>Date.now(),oa:()=>{throw Ze+=1,"unwind"},R:function(){return 4294901760},u:()=>performance.timeOrigin+performance.now(),x:()=>O?(Wo(),Kt(Uo)).cpus().length:navigator.hardwareConcurrency,O:function(a){a>>>=0;var c=n().length;if(a<=c||4294901760<a)return!1;for(var h=1;4>=h;h*=2){var w=c*(1+.2/h);w=Math.min(w,a+100663296);var C=Math;w=Math.max(a,w);e:{C=(C.min.call(C,4294901760,w+(65536-w%65536)%65536)-te.buffer.byteLength+65535)/65536;try{te.grow(C),rt();var k=1;break e}catch{}k=void 0}if(k)return!0}return!1},ha:ka,ia:Pa,X:hr,A:Ra,E:za,ea:Ba,D:Da,a:te||l.wasmMemory,na:Wa,r:function(a,c,h,w){return Wa(a>>>0,c>>>0,h>>>0,w>>>0)}},ne=function(){function a(h,w){return ne=h.exports,ne=Tn(),ne=ec(),le.Vb.push(ne.bb),gt.unshift(ne.va),Me=w,Or(),ne}var c={a:Jd};if(kt++,l.instantiateWasm)try{return l.instantiateWasm(c,a)}catch(h){Ie(`Module.instantiateWasm callback failed with error: ${h}`),b(h)}return Pr(c,function(h){a(h.instance,h.module)}).catch(b),{}}();l._OrtInit=(a,c)=>(l._OrtInit=ne.wa)(a,c),l._OrtGetLastError=(a,c)=>(l._OrtGetLastError=ne.xa)(a,c),l._OrtCreateSessionOptions=(a,c,h,w,C,k,W,L,ee,Q)=>(l._OrtCreateSessionOptions=ne.ya)(a,c,h,w,C,k,W,L,ee,Q),l._OrtAppendExecutionProvider=(a,c)=>(l._OrtAppendExecutionProvider=ne.za)(a,c),l._OrtAddFreeDimensionOverride=(a,c,h)=>(l._OrtAddFreeDimensionOverride=ne.Aa)(a,c,h),l._OrtAddSessionConfigEntry=(a,c,h)=>(l._OrtAddSessionConfigEntry=ne.Ba)(a,c,h),l._OrtReleaseSessionOptions=a=>(l._OrtReleaseSessionOptions=ne.Ca)(a),l._OrtCreateSession=(a,c,h)=>(l._OrtCreateSession=ne.Da)(a,c,h),l._OrtReleaseSession=a=>(l._OrtReleaseSession=ne.Ea)(a),l._OrtGetInputOutputCount=(a,c,h)=>(l._OrtGetInputOutputCount=ne.Fa)(a,c,h),l._OrtGetInputName=(a,c)=>(l._OrtGetInputName=ne.Ga)(a,c),l._OrtGetOutputName=(a,c)=>(l._OrtGetOutputName=ne.Ha)(a,c),l._OrtFree=a=>(l._OrtFree=ne.Ia)(a),l._OrtCreateTensor=(a,c,h,w,C,k)=>(l._OrtCreateTensor=ne.Ja)(a,c,h,w,C,k),l._OrtGetTensorData=(a,c,h,w,C)=>(l._OrtGetTensorData=ne.Ka)(a,c,h,w,C),l._OrtReleaseTensor=a=>(l._OrtReleaseTensor=ne.La)(a),l._OrtCreateRunOptions=(a,c,h,w)=>(l._OrtCreateRunOptions=ne.Ma)(a,c,h,w),l._OrtAddRunConfigEntry=(a,c,h)=>(l._OrtAddRunConfigEntry=ne.Na)(a,c,h),l._OrtReleaseRunOptions=a=>(l._OrtReleaseRunOptions=ne.Oa)(a),l._OrtCreateBinding=a=>(l._OrtCreateBinding=ne.Pa)(a),l._OrtBindInput=(a,c,h)=>(l._OrtBindInput=ne.Qa)(a,c,h),l._OrtBindOutput=(a,c,h,w)=>(l._OrtBindOutput=ne.Ra)(a,c,h,w),l._OrtClearBoundOutputs=a=>(l._OrtClearBoundOutputs=ne.Sa)(a),l._OrtReleaseBinding=a=>(l._OrtReleaseBinding=ne.Ta)(a),l._OrtRunWithBinding=(a,c,h,w,C)=>(l._OrtRunWithBinding=ne.Ua)(a,c,h,w,C),l._OrtRun=(a,c,h,w,C,k,W,L)=>(l._OrtRun=ne.Va)(a,c,h,w,C,k,W,L),l._OrtEndProfiling=a=>(l._OrtEndProfiling=ne.Wa)(a),l._JsepOutput=(a,c,h)=>(l._JsepOutput=ne.Xa)(a,c,h),l._JsepGetNodeName=a=>(l._JsepGetNodeName=ne.Ya)(a);var Va=()=>(Va=ne.Za)(),kn=l._pthread_self=()=>(kn=l._pthread_self=ne._a)(),Xr=l._malloc=a=>(Xr=l._malloc=ne.$a)(a),Rt=l._free=a=>(Rt=l._free=ne.ab)(a);l.__emscripten_tls_init=()=>(l.__emscripten_tls_init=ne.bb)();var Ga=a=>(Ga=ne.cb)(a);l.__embind_initialize_bindings=()=>(l.__embind_initialize_bindings=ne.db)();var Ha=l.__emscripten_thread_init=(a,c,h,w,C,k)=>(Ha=l.__emscripten_thread_init=ne.fb)(a,c,h,w,C,k);l.__emscripten_thread_crashed=()=>(l.__emscripten_thread_crashed=ne.gb)();var La=(a,c,h,w)=>(La=ne.hb)(a,c,h,w),Ai=a=>(Ai=ne.ib)(a),Ti=l.__emscripten_thread_exit=a=>(Ti=l.__emscripten_thread_exit=ne.jb)(a),Fa=()=>(Fa=ne.kb)(),qa=(a,c)=>(qa=ne.lb)(a,c),Ei=()=>(Ei=ne.mb)(),Pn=a=>(Pn=ne.nb)(a),Oi=a=>(Oi=ne.ob)(a),ja=l.dynCall_ii=(a,c)=>(ja=l.dynCall_ii=ne.qb)(a,c),Ka=a=>(Ka=ne.rb)(a),Ya=()=>(Ya=ne.sb)(),Xa=a=>(Xa=ne.tb)(a),Za=()=>(Za=ne.ub)();l.___start_em_js=920363,l.___stop_em_js=920524;function ec(){var a=ne;a=Object.assign({},a);var c=w=>()=>w()>>>0,h=w=>C=>w(C)>>>0;return a.Za=c(a.Za),a._a=c(a._a),a.$a=h(a.$a),a.cb=h(a.cb),a.emscripten_main_runtime_thread_id=c(a.emscripten_main_runtime_thread_id),a.mb=c(a.mb),a.ob=h(a.ob),a}l.wasmMemory=te,l.stackAlloc=Oi,l.stackSave=Ei,l.stackRestore=Pn,l.keepRuntimeAlive=()=>0<Ze,l.UTF8ToString=Ue,l.stringToUTF8=qt,l.lengthBytesUTF8=nt,l.ExitStatus=Rr,l.PThread=le;var Rn;Jt=function a(){Rn||Qa(),Rn||(Jt=a)};function Qa(){if(!(0<kt))if(A)g(l),A||gr(gt),startWorker(l);else{if(l.preRun)for(typeof l.preRun=="function"&&(l.preRun=[l.preRun]);l.preRun.length;)je.unshift(l.preRun.shift());gr(je),0<kt||Rn||(Rn=!0,l.calledRun=!0,ye||(A||gr(gt),g(l),A||gr(Lt)))}}return Qa(),t.ready}})();typeof Vo=="object"&&typeof Vi=="object"?Vi.exports=No:typeof define=="function"&&define.amd&&define([],()=>No)});var Ho=xr((ch,cc)=>{cc.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs"),vm=require("vm");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,"utf8"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\n'});var Fo,pc,Gi,Hi,Vn,Lo,fc,mc,hc,qo,He,Cr=j(()=>{"use strict";Fo=Bo();pc=Go(),Hi=!1,Vn=!1,Lo=!1,fc=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},mc=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},hc=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",qo=async e=>{if(Hi)return Promise.resolve();if(Vn)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Lo)throw new Error("previous call to 'initializeWebAssembly()' failed.");Vn=!0;let t=e.initTimeout,r=e.numThreads,n=e.simd,i=fc(r),s=n&&mc(),o=e.wasmPaths,d=typeof o=="string"?o:void 0,p=hc(s,i),m=typeof o=="object"?o[p]:void 0,l=!1,g=[];if(t>0&&g.push(new Promise(b=>{setTimeout(()=>{l=!0,b()},t)})),g.push(new Promise((b,$)=>{let v=i?pc:Fo,S={locateFile:(T,I)=>{if(i&&T.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Ho()],{type:"text/javascript"}));if(T.endsWith(".wasm")){if(m)return m;let x=d??I;return p==="ort-wasm-simd.wasm"?x+"ort-wasm-simd.jsep.wasm":p==="ort-wasm-simd-threaded.wasm"?x+"ort-wasm-simd-threaded.jsep.wasm":x+p}return I+T}};if(i)if(S.numThreads=r,typeof Blob>"u")S.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let T=`var ortWasmThreaded=${v.toString()};`;S.mainScriptUrlOrBlob=new Blob([T],{type:"text/javascript"})}v(S).then(T=>{Vn=!1,Hi=!0,Gi=T,b()},T=>{Vn=!1,Lo=!0,$(T)})})),await Promise.race(g),l)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},He=()=>{if(Hi&&Gi)return Gi;throw new Error("WebAssembly is not initialized yet.")}});var Le,Jr,We,Gn=j(()=>{"use strict";Cr();Le=(e,t)=>{let r=He(),n=r.lengthBytesUTF8(e)+1,i=r._malloc(n);return r.stringToUTF8(e,i,n),t.push(i),i},Jr=(e,t,r,n)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([i,s])=>{let o=t?t+i:i;if(typeof s=="object")Jr(s,o+".",r,n);else if(typeof s=="string"||typeof s=="number")n(o,s.toString());else if(typeof s=="boolean")n(o,s?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof s}`)})},We=e=>{let t=He(),r=t.stackSave();try{let n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);let i=t.HEAP32[n/4],s=t.HEAPU32[n/4+1],o=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${i}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}});var jo,Ko=j(()=>{"use strict";Cr();Gn();jo=e=>{let t=He(),r=0,n=[],i=e||{};try{if(e?.logSeverityLevel===void 0)i.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)i.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(i.terminate=!1);let s=0;return e?.tag!==void 0&&(s=Le(e.tag,n)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,s),r===0&&We("Can't create run options."),e?.extra!==void 0&&Jr(e.extra,"",new WeakSet,(o,d)=>{let p=Le(o,n),m=Le(d,n);t._OrtAddRunConfigEntry(r,p,m)!==0&&We(`Can't set a run config entry: ${o} - ${d}.`)}),[r,n]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),n.forEach(o=>t._free(o)),s}}});var gc,yc,bc,wc,Yo,Xo=j(()=>{"use strict";Cr();Gn();gc=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},yc=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},bc=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},wc=(e,t,r)=>{for(let n of t){let i=typeof n=="string"?n:n.name;switch(i){case"webnn":if(i="WEBNN",typeof n!="string"){let o=n;if(o?.deviceType){let d=Le("deviceType",r),p=Le(o.deviceType,r);He()._OrtAddSessionConfigEntry(e,d,p)!==0&&We(`Can't set a session config entry: 'deviceType' - ${o.deviceType}.`)}if(o?.numThreads){let d=o.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let p=Le("numThreads",r),m=Le(d.toString(),r);He()._OrtAddSessionConfigEntry(e,p,m)!==0&&We(`Can't set a session config entry: 'numThreads' - ${o.numThreads}.`)}if(o?.powerPreference){let d=Le("powerPreference",r),p=Le(o.powerPreference,r);He()._OrtAddSessionConfigEntry(e,d,p)!==0&&We(`Can't set a session config entry: 'powerPreference' - ${o.powerPreference}.`)}}break;case"webgpu":if(i="JS",typeof n!="string"){let o=n;if(o?.preferredLayout){if(o.preferredLayout!=="NCHW"&&o.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${o.preferredLayout}`);let d=Le("preferredLayout",r),p=Le(o.preferredLayout,r);He()._OrtAddSessionConfigEntry(e,d,p)!==0&&We(`Can't set a session config entry: 'preferredLayout' - ${o.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${i}`)}let s=Le(i,r);He()._OrtAppendExecutionProvider(e,s)!==0&&We(`Can't append execution provider: ${i}.`)}},Yo=e=>{let t=He(),r=0,n=[],i=e||{};bc(i);try{let s=gc(i.graphOptimizationLevel??"all"),o=yc(i.executionMode??"sequential"),d=typeof i.logId=="string"?Le(i.logId,n):0,p=i.logSeverityLevel??2;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log serverity level is not valid: ${p}`);let m=i.logVerbosityLevel??0;if(!Number.isInteger(m)||m<0||m>4)throw new Error(`log verbosity level is not valid: ${m}`);let l=typeof i.optimizedModelFilePath=="string"?Le(i.optimizedModelFilePath,n):0;if(r=t._OrtCreateSessionOptions(s,!!i.enableCpuMemArena,!!i.enableMemPattern,o,!!i.enableProfiling,0,d,p,m,l),r===0&&We("Can't create session options."),i.executionProviders&&wc(r,i.executionProviders,n),i.enableGraphCapture!==void 0){if(typeof i.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${i.enableGraphCapture}`);let g=Le("enableGraphCapture",n),b=Le(i.enableGraphCapture.toString(),n);t._OrtAddSessionConfigEntry(r,g,b)!==0&&We(`Can't set a session config entry: 'enableGraphCapture' - ${i.enableGraphCapture}.`)}if(i.freeDimensionOverrides)for(let[g,b]of Object.entries(i.freeDimensionOverrides)){if(typeof g!="string")throw new Error(`free dimension override name must be a string: ${g}`);if(typeof b!="number"||!Number.isInteger(b)||b<0)throw new Error(`free dimension override value must be a non-negative integer: ${b}`);let $=Le(g,n);t._OrtAddFreeDimensionOverride(r,$,b)!==0&&We(`Can't set a free dimension override: ${g} - ${b}.`)}return i.extra!==void 0&&Jr(i.extra,"",new WeakSet,(g,b)=>{let $=Le(g,n),v=Le(b,n);t._OrtAddSessionConfigEntry(r,$,v)!==0&&We(`Can't set a session config entry: ${g} - ${b}.`)}),[r,n]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),n.forEach(o=>t._free(o)),s}}});var Li,Xt,en,Hn,tn,Ln,Fi,me=j(()=>{"use strict";Li=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Xt=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},en=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Hn=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},tn=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Ln=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool",Fi=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var rn,qi=j(()=>{"use strict";rn=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),n=[];for await(let i of r)n.push(i);return new Uint8Array(Buffer.concat(n))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let i=t.body.getReader(),s;try{s=new ArrayBuffer(n)}catch(d){if(d instanceof RangeError){let p=Math.ceil(n/65536);s=new WebAssembly.Memory({initial:p,maximum:p}).buffer}else throw d}let o=0;for(;;){let{done:d,value:p}=await i.read();if(d)break;let m=p.byteLength;new Uint8Array(s,o,m).set(p),o+=m}return new Uint8Array(s,0,n)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}});var vc,$c,Zo,Qo,Jo,_c,Ne,Zt=j(()=>{"use strict";me();vc=["V","I","W","E","F"],$c=(e,t)=>{console.log(`[${vc[e]},${new Date().toISOString()}]${t}`)},Jo=(e,t)=>{Zo=e,Qo=t},_c=(e,t)=>{let r=tn(e),n=tn(Zo);r>=n&&$c(r,typeof t=="function"?t():t)},Ne=(...e)=>{Qo&&_c(...e)}});var es,ts=j(()=>{"use strict";me();es=(e,t)=>new(Hn(t))(e)});var Fn=j(()=>{"use strict"});var qn,Sc,rs,Ki,ji,is,as=j(()=>{"use strict";Zt();Fn();qn=e=>Math.ceil(e/16)*16,Sc=1,rs=()=>Sc++,Ki=async(e,t,r,n)=>{let i=qn(r),s=e.device.createBuffer({size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let o=e.getCommandEncoder();e.endComputePass(),o.copyBufferToBuffer(t,0,s,0,i),e.flush(),await s.mapAsync(GPUMapMode.READ);let d=s.getMappedRange();if(n){let p=n();return p.set(new Uint8Array(d,0,r)),p}else return new Uint8Array(d.slice(0,r))}finally{s.destroy()}},ji=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map}upload(t,r){let n=r.buffer,i=r.byteOffset,s=r.byteLength,o=qn(s),d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${s}`);let p=this.backend.device.createBuffer({mappedAtCreation:!0,size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),m=p.getMappedRange();new Uint8Array(m).set(new Uint8Array(n,i,s)),p.unmap();let l=this.backend.getCommandEncoder();this.backend.endComputePass(),l.copyBufferToBuffer(p,0,d.gpuData.buffer,0,o),Ne("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(p)}memcpy(t,r){let n=this.storageCache.get(t);if(!n)throw new Error("source gpu data for memcpy does not exist");let i=this.storageCache.get(r);if(!i)throw new Error("destination gpu data for memcpy does not exist");if(n.originalSize!==i.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=qn(n.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(n.gpuData.buffer,0,i.gpuData.buffer,0,s)}registerExternalBuffer(t,r,n){let i;if(n){if(i=this.externalBuffers.get(n),i===void 0)throw new Error("previous buffer is not registered");if(t===n)return Ne("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${i}, buffer is the same, skip.`),i;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`);this.externalBuffers.delete(n)}else i=rs();return this.storageCache.set(i,{gpuData:{id:i,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,i),Ne("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${i}, registered.`),i}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Ne("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let n=qn(t),i,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,o=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||o){let p=s?this.freeBuffers:this.freeUniformBuffers,m=p.get(n);m||(m=[],p.set(n,m)),m.length>0?i=m.pop():i=this.backend.device.createBuffer({size:n,usage:r})}else i=this.backend.device.createBuffer({size:n,usage:r});let d={id:rs(),type:0,buffer:i};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),Ne("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Ne("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let n=this.storageCache.get(t);if(!n)throw new Error("data does not exist");await Ki(this.backend,n.gpuData.buffer,n.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}else{let t=this.capturedPendingBuffers.get(this.backend.currentSessionId);t||(t=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,t));for(let r of this.buffersPending)t.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(t){let r=this.capturedPendingBuffers.get(t);r&&(r.forEach(n=>{n.destroy()}),this.capturedPendingBuffers.delete(t))}},is=(...e)=>new ji(...e)});var Yi,we,Ye=j(()=>{"use strict";Yi=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},we=e=>new Yi(e)});var Xi,zt,D,dr,jn,Kn,Yn,Se=j(()=>{"use strict";Xi=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},zt=class{static calcShape(t,r,n=!1){let i=t.length,s=r.length;if(i===0)return r;if(s===0)return t;let o=Math.max(t.length,r.length),d=new Array(o);if(n){if(i<2||s<2)return;let p=Xi.calcMatMulShape([t[i-2],t[i-1]],[r[s-2],r[s-1]]);if(p===void 0)return;[d[o-2],d[o-1]]=p}for(let p=n?3:1;p<=o;p++){let m=i-p<0?1:t[i-p],l=s-p<0?1:r[s-p];if(m!==l&&m>1&&l>1)return;let g=Math.max(m,l);if(m&&l)d[o-p]=Math.max(m,l);else{if(g>1)return;d[o-p]=0}}return d}static isValidBroadcast(t,r){let n=t.length,i=r.length;if(n>i)return!1;for(let s=1;s<=n;s++)if(t[n-s]!==1&&t[n-s]!==r[i-s])return!1;return!0}},D=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let n=t.length;if(n===0)return[];let i=new Array(n),s=n-1;for(;s>=0;){if(t[s]%r===0){i[s]=t[s]/r;break}if(r%t[s]!==0)throw new Error("cannot convert shape");i[s]=1,r/=t[s],s--}for(s--;s>=0;s--)i[s]=t[s];return i}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,n){let i=1;for(let s=r;s<n;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");i*=t[s]}return i}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let n=new Array(r);n[r-1]=1,n[r-2]=t[r-1];for(let i=r-3;i>=0;--i)n[i]=n[i+1]*t[i+1];return n}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(n=>this.normalizeAxis(n,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(n=>t[n]):t.slice().reverse()}static padShape(t,r){let n=t.length;return t.map((i,s)=>i+r[s]+r[s+n])}static areEqual(t,r){return t.length!==r.length?!1:t.every((n,i)=>n===r[i])}},dr=class e{static adjustPoolAttributes(t,r,n,i,s,o){if(!t&&n.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=n.length?n.push(r[d+2]):n[d]=r[d+2];for(let d=0;d<n.length;d++)if(d<i.length){if(i[d]<0)throw new Error("strides should be greater than or equal to 1")}else i.push(1);for(let d=0;d<n.length;d++)if(d<s.length){if(s[d]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let d=0;d<n.length*2;d++)if(d<o.length){if(o[d]<0)throw new Error("pad should be greater than or equal to 1")}else o.push(0);for(let d=0;d<n.length;d++){if(n[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(o[d]>=n[d]||o[d+n.length]>=n[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,n,i,s,o,d){if(d){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(i.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let p=0;p<t.length-2;p++)e.adjustPadAndReturnShape(t[p+(o?1:2)],r[p],n[p],i[p],s,p,p+t.length-2,d)}}static computePoolOutputShape(t,r,n,i,s,o,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let p=[r[0],r[1]];return e.computeShapeHelper(t,r,p,n,i,s,o,d),p}static computeConvOutputShape(t,r,n,i,s,o,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let p=[t[0],r[0]];return e.computeShapeHelper(!1,t,p,n,i,s,o,d),p}static computeShapeHelper(t,r,n,i,s,o,d,p){if(t)for(let m=0;m<r.length-2;m++)n.push(1);else for(let m=0;m<r.length-2;m++)n.push(e.adjustPadAndReturnShape(r[m+2],i[m],s[m],o[m],d,m,m+r.length-2,p))}static adjustPadAndReturnShape(t,r,n,i,s,o,d,p){let m=n*(i-1)+1;if(p&&p!=="NOTSET")switch(p){case"VALID":return s[o]=0,s[d]=0,Math.floor((t-m)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(n!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let g=((t+r-1)/r-1)*r+i-t;return s[o]=Math.floor(p==="SAME_LOWER"?(g+1)/2:g/2),s[d]=g-s[o],Math.floor((t+g-i)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[o]+s[d]-m)/r+1)}},jn=class{static getShapeOfGemmResult(t,r,n,i,s){if(t.length!==2||n.length!==2)throw new Error("shape need to be of size 2");let o,d,p;r?(o=t[1],d=t[0]):(o=t[0],d=t[1]);let m=-1;if(i?(p=n[0],m=1):(p=n[1],m=0),n[m]!==d)throw new Error("dimension mismatch");if(o<=0||p<=0||d<=0)throw new Error("invalid shape specified");if(s&&!zt.isValidBroadcast(s,[o,p]))throw new Error("gemm: invalid bias shape for broadcast");return[o,p,d]}},Kn=-34028234663852886e22,Yn=34028234663852886e22});var cr,Qi,De,ft,X,Ve,et,At,mt,se,Ji,M,K,Xn,Zi,os,Ir,$e=j(()=>{"use strict";me();Se();cr=64,Qi=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},De=(e,t=1)=>{let r=Qi(e,t);return typeof r=="string"?r:r[0]},ft=(e,t=1)=>{let r=Qi(e,t);return typeof r=="string"?r:r[1]},X=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:D.computeStrides(r)})}),t},Ve=e=>e%4===0?4:e%2===0?2:1,et=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,At=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,mt=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,se=(e,t,r,n)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?n==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:n==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Ji=(e,t,r,n,i)=>{let s=typeof r=="number",o=s?r:r.length,d=[...new Array(o).keys()],p=o<2?"u32":o<=4?`vec${o}<u32>`:`array<u32, ${o}>`,m=Qi(t,i),l=typeof m=="string"?m:m[1],g=typeof m=="string"?m:m[0],b={indices:p,value:l,storage:g,tensor:t},$=F=>typeof F=="string"?F:`${F}u`,v={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},S=s?"uniforms.":"",T=`${S}${e}_shape`,I=`${S}${e}_strides`,x="";for(let F=0;F<o-1;F++)x+=`
    let dim${F} = current / ${se(I,F,o)};
    let rest${F} = current % ${se(I,F,o)};
    indices[${F}] = dim${F};
    current = rest${F};
    `;x+=`indices[${o-1}] = current;`;let O=o<2?"":`
  fn o2i_${e}(offset: u32) -> ${b.indices} {
    var indices: ${b.indices};
    var current = offset;
    ${x}
    return indices;
  }`,A=F=>(v.offsetToIndices=!0,o<2?F:`o2i_${e}(${F})`),P=[];if(o>=2)for(let F=o-1;F>=0;F--)P.push(`${se(I,F,o)} * (indices[${F}])`);let N=o<2?"":`
  fn i2o_${e}(indices: ${b.indices}) -> u32 {
    return ${P.join("+")};
  }`,V=F=>(v.indicesToOffset=!0,o<2?F:`i2o_${e}(${F})`),G=(...F)=>o===0?"0u":`${b.indices}(${F.map($).join(",")})`,ie=(F,ae)=>o<2?`${F}`:`${se(F,ae,o)}`,Z=(F,ae,xe)=>o<2?`${F}=${xe};`:`${se(F,ae,o)}=${xe};`,U={},re=(F,ae)=>{v.broadcastedIndicesToOffset=!0;let xe=`${ae.name}broadcastedIndicesTo${e}Offset`;if(xe in U)return`${xe}(${F})`;let Ge=[];for(let Xe=o-1;Xe>=0;Xe--){let ht=ae.indicesGet("outputIndices",Xe+ae.rank-o);Ge.push(`${ie(I,Xe)} * (${ht} % ${ie(T,Xe)})`)}return U[xe]=`fn ${xe}(outputIndices: ${ae.type.indices}) -> u32 {
             return ${Ge.length>0?Ge.join("+"):"0u"};
           }`,`${xe}(${F})`},Be=(F,ae)=>(()=>{if(b.storage===b.value)return`${e}[${F}]=${ae};`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`${e}[${F}]=vec2<u32>(u32(${ae}), select(0u, 0xFFFFFFFFu, ${ae} < 0));`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`${e}[${F}]=vec2<u32>(u32(${ae}), 0u);`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`${e}[${F}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ae}));`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),Oe=F=>(()=>{if(b.storage===b.value)return`${e}[${F}]`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`i32(${e}[${F}].x)`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`u32(${e}[${F}].x)`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${F}] & 0xFFu), bool(${e}[${F}] & 0xFF00u), bool(${e}[${F}] & 0xFF0000u), bool(${e}[${F}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),Ie=o<2?"":`
  fn get_${e}ByIndices(indices: ${b.indices}) -> ${l} {
    return ${Oe(`i2o_${e}(indices)`)};
  }`,te=o<2?"":(()=>{let F=d.map(xe=>`d${xe}: u32`).join(", "),ae=d.map(xe=>`d${xe}`).join(", ");return`
  fn get_${e}(${F}) -> ${l} {
    return get_${e}ByIndices(${G(ae)});
  }`})(),Me=(...F)=>{if(F.length!==o)throw new Error(`indices length must be ${o}`);let ae=F.map($).join(",");return o===0?Oe("0u"):o===1?Oe(ae[0]):(v.get=!0,v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}(${ae})`)},ye=F=>o<2?Oe(F):(v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}ByIndices(${F})`),he=o<2?"":`
  fn set_${e}ByIndices(indices: ${b.indices}, value: ${l}) {
    ${Be(`i2o_${e}(indices)`,"value")}
  }`,ue=o<2?"":(()=>{let F=d.map(xe=>`d${xe}: u32`).join(", "),ae=d.map(xe=>`d${xe}`).join(", ");return`
  fn set_${e}(${F}, value: ${l}) {
    set_${e}ByIndices(${G(ae)}, value);
  }`})();return{impl:()=>{let F=[],ae=!1;return v.offsetToIndices&&(F.push(O),ae=!0),v.indicesToOffset&&(F.push(N),ae=!0),v.broadcastedIndicesToOffset&&(Object.values(U).forEach(xe=>F.push(xe)),ae=!0),v.set&&(F.push(ue),ae=!0),v.setByIndices&&(F.push(he),ae=!0),v.get&&(F.push(te),ae=!0),v.getByIndices&&(F.push(Ie),ae=!0),!s&&ae&&F.unshift(`const ${T} = ${b.indices}(${r.join(",")});`,`const ${I} = ${b.indices}(${D.computeStrides(r).join(",")});`),F.join(`
`)},type:b,offsetToIndices:A,indicesToOffset:V,broadcastedIndicesToOffset:re,indices:G,indicesGet:ie,indicesSet:Z,set:(...F)=>{if(F.length!==o+1)throw new Error(`indices length must be ${o}`);let ae=F[o];if(typeof ae!="string")throw new Error("value must be string");let xe=F.slice(0,o).map($).join(",");return o===0?Be("0u",ae):o===1?Be(xe[0],ae):(v.set=!0,v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}(${xe}, ${ae})`)},setByOffset:Be,setByIndices:(F,ae)=>o<2?Be(F,ae):(v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}ByIndices(${F}, ${ae});`),get:Me,getByOffset:Oe,getByIndices:ye,usage:n,name:e,strides:I,shape:T,rank:o}},M=(e,t,r,n=1)=>Ji(e,t,r,"input",n),K=(e,t,r,n=1)=>Ji(e,t,r,"output",n),Xn=(e,t,r,n=1)=>Ji(e,t,r,"internal",n),Zi=class{constructor(t,r){this.normalizedDispatchGroup=t;this.limits=r;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=cr){let r=typeof t=="number"?t:t[0],n=typeof t=="number"?1:t[1],i=typeof t=="number"?1:t[2];if(r>this.limits.maxComputeWorkgroupSizeX||n>this.limits.maxComputeWorkgroupSizeY||i>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${r}, ${n}, ${i}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(r*n*i>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${r}, ${n}, ${i}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,o=s?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*n*i}u + local_idx;`;return`@compute @workgroup_size(${r}, ${n}, ${i})
  fn main(${o}) {
    ${d}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let n=t.usage==="input"?"read":"read_write",i=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${n}> ${t.name}: array<${i}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,n=1){return this.uniforms.push({name:t,type:r,length:n}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:n,length:i}of this.uniforms)if(i&&i>4)n==="f16"?t.push(`@align(16) ${r}:array<mat2x4<${n}>, ${Math.ceil(i/8)}>`):t.push(`${r}:array<vec4<${n}>, ${Math.ceil(i/4)}>`);else{let s=i==null||i===1?n:`vec${i}<${n}>`;t.push(`${r}:${s}`)}return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let t=r=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(r)];return this.uniforms.map(r=>[t(r.type),r.length??1])}},os=(e,t)=>new Zi(e,t),Ir=(e,t)=>{let r=e.length,n=[];for(let i=0;i<r;i++){let s=r-1-i,o=e[s]||1;(t[t.length-1-i]||1)>1&&o===1&&n.unshift(s)}return n}});var xc,ss,Cc,Ic,St,us,ls,Ar=j(()=>{"use strict";me();Se();Ye();$e();xc=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},ss=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,Cc=(e,t)=>D.sortBasedOnPerm(e,ss(e.length,t)),Ic=(e,t,r,n)=>{let i=[];i.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let s=0;s<t;++s)i.push(r.indicesSet("a",e[s],`i[${s}]`));return i.push("return a;}"),i.join(`
`)},St=(e,t)=>{let r=e.dataType,n=e.dims.length,i=ss(n,t),s=Cc(e.dims,i),o=K("output",r,s.length),d=M("a",r,n),p=m=>`
  ${m.registerUniform("output_size","u32").declareVariables(d,o)}

  ${Ic(i,n,d,o)}

  ${m.mainStart()}
    ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${o.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${o.setByOffset("global_idx",d.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:m=>{let l=D.size(s);return{outputs:[{dims:s,dataType:m[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:[{type:12,data:l},...X(m[0].dims,s)]}},getShaderSource:p}},us=(e,t)=>{xc(e.inputs),e.compute(St(e.inputs[0],t.perm))},ls=e=>we({perm:e.perm})});var Ac,Tc,Ec,Oc,kc,Pc,Rc,zc,Bc,Dc,Bt,ds,cs,ps,fs,ms,hs,gs,ys,bs,ws,vs=j(()=>{"use strict";me();Se();$e();Zn();Ar();Ac={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Tc={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Ec={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Oc={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},kc=(e,t)=>{let r=[];for(let n=t-e;n<t;++n)r.push(n);return r},Pc=(e,t)=>{let r=[],n=e.length;for(let s=0;s<n;s++)t.indexOf(s)===-1&&r.push(e[s]);let i=t.map(s=>e[s]);return[r,i]},Rc=(e,t)=>{let r=e.length+t.length,n=[],i=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?n.push(e[i++]):n.push(1);return n},zc=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Bc=(e,t)=>{let r=[];if(!zc(e,t)){for(let n=0;n<t;++n)e.indexOf(n)===-1&&r.push(n);e.forEach(n=>r.push(n))}return r},Dc=(e,t,r,n,i,s,o)=>{let d=r[0].dims,p=D.size(s),m=D.size(o),l=M("_A",r[0].dataType,d),g=K("output",i,s),b=32,$=`
          var<workgroup> aBestValues : array<f32, ${b}>;
       `;return{name:e,shaderCache:t,getShaderSource:S=>`
        ${S.registerUniform("reduceSize","u32").declareVariables(l,g)}
        ${$}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${S.mainStart(b)}

          let outputIndex = global_idx / ${b};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${Ec[n]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${b}) {
           let candidate = f32(${l.getByOffset("offset + k")});
           bestValue = ${Ac[n]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${b}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${Tc[n]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${g.setByOffset("outputIndex",`${n==="mean"?`${g.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${g.type.storage}(${Oc[n]})`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:s,dataType:i}],dispatchGroup:{x:p},programUniforms:[{type:12,data:m}]})}},Bt=(e,t,r,n)=>{let i=e.inputs.length===1?r:ea(e.inputs,r),s=i.axes;s.length===0&&!i.noopWithEmptyAxes&&(s=e.inputs[0].dims.map(($,v)=>v));let o=D.normalizeAxes(s,e.inputs[0].dims.length),d=o,p=e.inputs[0],m=Bc(d,e.inputs[0].dims.length);m.length>0&&(p=e.compute(St(e.inputs[0],m),{inputs:[0],outputs:[-1]})[0],d=kc(d.length,p.dims.length));let[l,g]=Pc(p.dims,d),b=l;i.keepDims&&(b=Rc(l,o)),e.compute(Dc(t,{hint:i.cacheKey,inputDependencies:["type"]},[p],n,e.inputs[0].dataType,b,g),{inputs:[p]})},ds=(e,t)=>{Bt(e,"ReduceMeanShared",t,"mean")},cs=(e,t)=>{Bt(e,"ReduceL1Shared",t,"l1")},ps=(e,t)=>{Bt(e,"ReduceL2Shared",t,"l2")},fs=(e,t)=>{Bt(e,"ReduceLogSumExpShared",t,"logSumExp")},ms=(e,t)=>{Bt(e,"ReduceMaxShared",t,"max")},hs=(e,t)=>{Bt(e,"ReduceMinShared",t,"min")},gs=(e,t)=>{Bt(e,"ReduceProdShared",t,"prod")},ys=(e,t)=>{Bt(e,"ReduceSumShared",t,"sum")},bs=(e,t)=>{Bt(e,"ReduceSumSquareShared",t,"sumSquare")},ws=(e,t)=>{Bt(e,"ReduceLogSumShared",t,"logSum")}});var Dt,Mc,Qn,ea,Mt,Uc,Wc,Nc,Vc,Gc,Hc,Lc,Fc,qc,jc,Ut,$s,_s,Ss,xs,Cs,Is,As,Ts,Es,Os,Zn=j(()=>{"use strict";me();Se();Ye();$e();vs();Dt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Mc=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Qn=(e,t,r,n,i,s,o=!1,d=!1)=>{let p=[],m=r[0].dims,l=m.length,g=D.normalizeAxes(i,l),b=!d&&g.length===0;m.forEach((T,I)=>{b||g.indexOf(I)>=0?o&&p.push(1):p.push(T)});let $=p.length,v=D.size(p);return{name:e,shaderCache:t,getShaderSource:T=>{let I=[],x=M("_A",r[0].dataType,l),O=K("output",s,$),A=n(x,O,g),P=A[2];for(let N=0,V=0;N<l;N++)b||g.indexOf(N)>=0?(o&&V++,P=`for(var j${N}: u32 = 0; j${N} < ${m[N]}; j${N}++) {
                  ${A[2].includes("last_index")?`let last_index = j${N};`:""}
                  ${x.indicesSet("input_indices",N,`j${N}`)}
                  ${P}
                }`):(I.push(`${x.indicesSet("input_indices",N,O.indicesGet("output_indices",V))};`),V++);return`

        ${T.registerUniform("output_size","u32").declareVariables(x,O)}

        ${T.mainStart()}
          ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${x.type.indices};
          let output_indices = ${O.offsetToIndices("global_idx")};

          ${I.join(`
`)}
          ${A[0]}       // init ops for reduce max/min
          ${A[1]}
          ${P}
          ${A[3]}
          ${A.length===4?O.setByOffset("global_idx","value"):A.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:p,dataType:s}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:[{type:12,data:v},...X(m,p)]})}},ea=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),we({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},Mt=(e,t,r,n)=>{let i=e.inputs,s=i.length===1?r:ea(i,r);e.compute(Qn(t,{hint:s.cacheKey,inputDependencies:["rank"]},[i[0]],s.noopWithEmptyAxes&&s.axes.length===0?Mc:n,s.axes,i[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},Uc=(e,t)=>{Dt(e.inputs),Mt(e,"ReduceLogSum",t,(n,i)=>[`var value = ${i.type.storage}(0);`,"",`value += ${n.getByIndices("input_indices")};`,"value = log(value);"])},Wc=(e,t)=>{Dt(e.inputs),Mt(e,"ReduceL1",t,(n,i)=>[`var value = ${i.type.storage}(0);`,"",`value += abs(${n.getByIndices("input_indices")});`,""])},Nc=(e,t)=>{Dt(e.inputs),Mt(e,"ReduceL2",t,(n,i)=>[`var t = ${i.type.value}(0); var value = ${i.type.value}(0);`,"",`t = ${n.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Vc=(e,t)=>{Dt(e.inputs),Mt(e,"ReduceLogSumExp",t,(n,i)=>[`var value = ${i.type.storage}(0);`,"",`value += exp(${n.getByIndices("input_indices")});`,"value = log(value);"])},Gc=(e,t)=>{Dt(e.inputs),Mt(e,"ReduceMax",t,(n,i,s)=>{let o=[];for(let d=0;d<n.rank;d++)(s.indexOf(d)>=0||s.length===0)&&o.push(n.indicesSet("input_indices",d,0));return[`${o.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};`,`value = max(value, ${n.getByIndices("input_indices")});`,""]})},Hc=(e,t)=>{Dt(e.inputs),Mt(e,"ReduceMean",t,(n,i,s)=>{let o=1;for(let d=0;d<n.rank;d++)(s.indexOf(d)>=0||s.length===0)&&(o*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${n.getByIndices("input_indices")});`,`let value = ${i.type.value}(sum / ${o});`]})},Lc=(e,t)=>{Dt(e.inputs),Mt(e,"ReduceMin",t,(n,i,s)=>{let o=[];for(let d=0;d<n.rank;d++)(s.indexOf(d)>=0||s.length===0)&&o.push(`input_indices[${d}] = 0;`);return[`${o.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};`,`value = min(value, ${n.getByIndices("input_indices")});`,""]})},Fc=(e,t)=>{Dt(e.inputs),Mt(e,"ReduceProd",t,(n,i)=>[`var value = ${i.type.storage}(1);`,"",`value *= ${n.getByIndices("input_indices")};`,""])},qc=(e,t)=>{Dt(e.inputs),Mt(e,"ReduceSum",t,(n,i)=>[`var value = ${i.type.storage}(0);`,"",`value += ${n.getByIndices("input_indices")};`,""])},jc=(e,t)=>{Dt(e.inputs),Mt(e,"ReduceSumSquare",t,(n,i)=>[`var t = ${i.type.value}(0); var value = ${i.type.value}(0);`,"",`t = ${n.getByIndices("input_indices")}; value += t * t;`,""])},Ut=(e,t,r)=>{if(t.length===0)return r;let n=1,i=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?n*=e[s]:i*=e[s];return i<32&&n>1024},$s=(e,t)=>{Ut(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Hc(e,t):ds(e,t)},_s=(e,t)=>{Ut(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Wc(e,t):cs(e,t)},Ss=(e,t)=>{Ut(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Nc(e,t):ps(e,t)},xs=(e,t)=>{Ut(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Vc(e,t):fs(e,t)},Cs=(e,t)=>{Ut(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Gc(e,t):ms(e,t)},Is=(e,t)=>{Ut(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Lc(e,t):hs(e,t)},As=(e,t)=>{Ut(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Fc(e,t):gs(e,t)},Ts=(e,t)=>{Ut(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?qc(e,t):ys(e,t)},Es=(e,t)=>{Ut(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?jc(e,t):bs(e,t)},Os=(e,t)=>{Ut(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Uc(e,t):ws(e,t)}});var ks,Ps,Rs,ta,zs=j(()=>{"use strict";me();Ye();Zn();ks=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Ps=(e,t)=>{ks(e.inputs);let r=(n,i,s)=>{let o=[];for(let d=0;d<n.rank;d++)(s.indexOf(d)>=0||s.length===0)&&o.push(`input_indices[${d}] = 0;`);return[`${o.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(Qn("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Rs=(e,t)=>{ks(e.inputs);let r=(n,i,s)=>{let o=[];for(let d=0;d<n.rank;d++)(s.indexOf(d)>=0||s.length===0)&&o.push(`input_indices[${d}] = 0;`);return[`${o.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(Qn("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},ta=e=>we(e)});var Kc,Yc,Xc,Zc,Jn,Qc,Bs,ra=j(()=>{"use strict";me();Fn();$e();Kc=(e,t)=>{let r=e[0],n=e[1],i=e[2],s=e[3],o=e[4],d=e[5];if(o&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let p=r.dims[0],m=r.dims[1],l=r.dims[2];if(i.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(n.dims[0]!==l)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(i.dims[0]!==n.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let g=i.dims[0]/3,b=g,$=b;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let O of t.qkvHiddenSizes)if(O%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");g=t.qkvHiddenSizes[0],b=t.qkvHiddenSizes[1],$=t.qkvHiddenSizes[2]}let v=m;if(g!==b)throw new Error("qkv_hidden_sizes first element should be same as the second");if(i.dims[0]!==g+b+$)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let S=0;if(o){if(b!==$)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(o.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(o.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(o.dims[1]!==p)throw new Error('Input "past" second dimension must be batch_size');if(o.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(o.dims[4]!==b/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(S=o.dims[3])}let T=v+S,I=-1,x=0;if(s)throw new Error("Mask not supported");if(o)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:p,sequenceLength:m,pastSequenceLength:S,kvSequenceLength:v,totalSequenceLength:T,maxSequenceLength:I,inputHiddenSize:l,hiddenSize:g,vHiddenSize:$,headSize:Math.floor(g/t.numHeads),vHeadSize:Math.floor($/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:x,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Yc=(e,t,r,n)=>{let i=Ve(n),s=64,o=n/i;o<s?s=1:o/8<64&&(s=Math.ceil(o/8));let d=Math.ceil(n/i/s),p=[{type:t.dataType,data:1/n},{type:12,data:o},{type:12,data:d}],m=De(t.dataType,i),l=g=>{let b=K("x",t.dataType,t.dims,i),$="thread_max_vector";i===2?$="max(thread_max_vector.x, thread_max_vector.y)":i===4&&($="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let v=ft(t.dataType),S=[{name:"d_inv",type:v},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`
  var<workgroup> wgMax: array<f32, ${s}>;
  var<workgroup> wgSum: array<f32, ${s}>;
  ${g.registerUniforms(S).declareVariables(b)}
  ${g.mainStart([s,1,1])}
    let localOffset = local_idx * uniforms.elements_per_wg;
    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;

    var thread_max_vector = ${et("f32",i,"-3.402823e+38f")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      thread_max_vector = max(${At(v,i,"x[offset + i]")}, thread_max_vector);
    }
    wgMax[local_idx] = ${$};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${s}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${et("f32",i,"0")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      sumVector += exp(${At(v,i,"x[offset + i]")} - maxValue);
    }
    wgSum[local_idx] = ${mt("sumVector",i)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${s}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        x[offset + i] = ${et(v,i,"uniforms.d_inv")};
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        let f32input = ${At(v,i,"x[offset + i]")};
        x[offset + i] = ${b.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${s};${m};${i}`},getShaderSource:l,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:p})},{inputs:[t],outputs:[]})},Xc=(e,t,r,n,i,s)=>{let o=[i.batchSize,i.numHeads,i.sequenceLength,i.kvSequenceLength+i.pastSequenceLength],d=s.scale===0?1/Math.sqrt(i.headSize):s.scale,p=Ve(i.headSize),m=i.headSize/p,l=12,g={x:Math.ceil(i.totalSequenceLength/l),y:Math.ceil(i.sequenceLength/l),z:i.batchSize*i.numHeads},b=[{type:12,data:i.sequenceLength},{type:12,data:m},{type:12,data:i.totalSequenceLength},{type:12,data:i.kvSequenceLength},{type:t.dataType,data:d}],$=[t,r],v=T=>{let I=M("q",t.dataType,t.dims,p),x=M("key",r.dataType,r.dims,p),O=K("output",t.dataType,o),A=De(t.dataType),P=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:A}];return`
  const beta: ${A} = 1.0;
  const TILE_SIZE = ${l}u;

  var<workgroup> tileQ: array<${I.type.storage}, ${l*l}>;
  var<workgroup> tileK: array<${I.type.storage}, ${l*l}>;
  ${T.registerUniforms(P).declareVariables(I,x,O)}
  ${T.mainStart([l,l,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;

    var value = ${et(A,p)};
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      output[outputIdx] = ${mt("value",p)} * uniforms.alpha;
    }
  }`},S=e.compute({name:"AttentionProbs",shaderCache:{hint:`${p}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType,gpuDataType:0}],dispatchGroup:g,programUniforms:b}),getShaderSource:v},{inputs:$,outputs:[-1]})[0];return Yc(e,S,i.batchSize*i.numHeads*i.sequenceLength,i.totalSequenceLength),S},Zc=(e,t,r,n)=>{let i=[n.batchSize,n.sequenceLength,n.vHiddenSize],s=12,o={x:Math.ceil(n.vHeadSize/s),y:Math.ceil(n.sequenceLength/s),z:n.batchSize*n.numHeads},d=[{type:12,data:n.sequenceLength},{type:12,data:n.totalSequenceLength},{type:12,data:n.vHeadSize},{type:12,data:n.numHeads},{type:12,data:n.vHiddenSize}],p=m=>{let l=M("probs",t.dataType,t.dims),g=M("v",r.dataType,r.dims),b=K("output",t.dataType,i),$=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`
  const TILE_SIZE = ${s}u;
  var<workgroup> tileQ: array<${l.type.value}, ${s*s}>;
  var<workgroup> tileK: array<${l.type.value}, ${s*s}>;
  ${m.registerUniforms($).declareVariables(l,g,b)}
  ${m.mainStart([s,s,1])}
   let headIdx = workgroup_id.z;
   let m = global_id.y;
   let n = global_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;

   var value = ${l.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
     if (m < uniforms.M && w + local_id.x < uniforms.K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < uniforms.N && w + local_id.y < uniforms.K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType,gpuDataType:0}],dispatchGroup:o,programUniforms:d}),getShaderSource:p},{inputs:[t,r],outputs:[0]})[0]},Jn=(e,t,r,n,i,s,o,d,p,m,l)=>{let g=Xc(e,t,r,p,m,l);Zc(e,g,n,m)},Qc=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],n=t.sequenceLength,i=t.inputHiddenSize,s=t.headSize,o=12,d={x:Math.ceil(t.headSize/o),y:Math.ceil(t.sequenceLength/o),z:t.batchSize*t.numHeads},p=[e.inputs[0],e.inputs[1],e.inputs[2]],m=[{type:12,data:n},{type:12,data:i},{type:12,data:s},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],l=g=>{let b=K("output_q",p[0].dataType,r),$=K("output_k",p[0].dataType,r),v=K("output_v",p[0].dataType,r),S=M("input",p[0].dataType,p[0].dims),T=M("weight",p[1].dataType,p[1].dims),I=M("bias",p[2].dataType,p[2].dims),x=S.type.storage,O=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${o}u;
  var<workgroup> tileInput: array<${x}, ${o*o}>;
  var<workgroup> tileWeightQ: array<${x}, ${o*o}>;
  var<workgroup> tileWeightK: array<${x}, ${o*o}>;
  var<workgroup> tileWeightV: array<${x}, ${o*o}>;
  ${g.registerUniforms(O).declareVariables(S,T,I,b,$,v)}
  ${g.mainStart([o,o,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${x}(0);
    var valueK = ${x}(0);
    var valueV = ${x}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:d,programUniforms:m}),getShaderSource:l},{inputs:p,outputs:[-1,-1,-1]})},Bs=(e,t)=>{let r=Kc(e.inputs,t),[n,i,s]=Qc(e,r);return Jn(e,n,i,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Jc,ep,tp,Ds,Ms=j(()=>{"use strict";_t();me();Se();Ye();$e();Jc=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(n,i,s)=>{let o=i.length;if(o!==n.length)throw new Error(`${s}: num dimensions != ${o}`);i.forEach((d,p)=>{if(d!==n[p])throw new Error(`${s}: dim[${p}] do not match`)})};if(e[0].dims.length>1){let n=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,n,"Invalid input scale"),r(e[2].dims,n,"Invalid input B"),r(e[3].dims,n,"Invalid input mean"),r(e[4].dims,n,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},ep=(e,t)=>{let{epsilon:r,spatial:n,format:i}=t,s=e[0].dims,o=n?Ve(s[s.length-1]):1,d=i==="NHWC"&&s.length>1?o:1,p=D.size(s)/o,m=n,l=m?s.length:s,g=M("x",e[0].dataType,e[0].dims,o),b=M("scale",e[1].dataType,e[1].dims,d),$=M("bias",e[2].dataType,e[2].dims,d),v=M("inputMean",e[3].dataType,e[3].dims,d),S=M("inputVar",e[4].dataType,e[4].dims,d),T=K("y",e[0].dataType,l,o),I=()=>{let O="";if(n)O=`let cOffset = ${s.length===1?"0u":i==="NHWC"?`outputIndices[${s.length-1}] / ${o}`:"outputIndices[1]"};`;else if(i==="NCHW")O=`
            ${T.indicesSet("outputIndices","0","0")}
            let cOffset = ${T.indicesToOffset("outputIndices")};`;else{O=`var cIndices = ${b.type.indices}(0);
                       cIndices[0] = outputIndices[${s.length-1}];`;for(let A=1;A<b.rank;A++)O+=`cIndices[${A}] = outputIndices[${A}];`;O+=`let cOffset = ${b.indicesToOffset("cIndices")};`}return O},x=O=>`
  const epsilon = ${r};
  ${O.registerUniform("outputSize","u32").declareVariables(g,b,$,v,S,T)}
  ${O.mainStart()}
  ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${T.offsetToIndices(`global_idx * ${o}`)};
    ${I()}
    let scale = ${b.getByOffset("cOffset")};
    let bias = ${$.getByOffset("cOffset")};
    let inputMean = ${v.getByOffset("cOffset")};
    let inputVar = ${S.getByOffset("cOffset")};
    let x = ${g.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${T.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${n}_${o}`,inputDependencies:m?["rank","type","type","type","type"]:void 0},getShaderSource:x,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m?[{type:12,data:p},...X(s)]:[{type:12,data:p}]})}},tp=e=>we(e),Ds=(e,t)=>{let{inputs:r,outputCount:n}=e,i=tp({...t,outputCount:n});if(Ee.webgpu.validateInputContent&&Jc(r,i),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(ep(r,i))}});var rp,np,Us,Ws=j(()=>{"use strict";Se();$e();rp=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},np=e=>{let t=e[0].dims,r=e[0].dims[2],n=D.size(t)/4,i=e[0].dataType,s=M("input",i,t,4),o=M("bias",i,[r],4),d=M("residual",i,t,4),p=K("output",i,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:l=>`
  const channels = ${r}u / 4;
  ${l.declareVariables(s,o,d,p)}

  ${l.mainStart()}
    ${l.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let value = ${s.getByOffset("global_idx")}
      + ${o.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};
    ${p.setByOffset("global_idx","value")}
  }`}},Us=e=>{rp(e.inputs),e.compute(np(e.inputs))}});var ip,Re,Ns,Vs,Gs,Hs,Ls,Fs,qs,js,Ks,ap,Ys,Xs,Zs,Qs,ei,Js,ti,eu,tu,ru,nu,iu,au,ou,su,uu,lu,du,cu,pu,fu,mu,hu,gu,yu,na,ia,bu,wu,vu,ri=j(()=>{"use strict";me();Se();Ye();$e();ip=(e,t,r,n,i,s)=>{let o=Math.ceil(t/4),d="";typeof i=="string"?d=`${i}(a)`:d=i("a");let p=M("inputData",r,[o],4),m=K("outputData",n,[o],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(p,m)}

  ${s??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${p.getByOffset("global_idx")};
    ${m.setByOffset("global_idx",d)}
  }`},Re=(e,t,r,n,i,s=e.dataType)=>({name:t,shaderCache:{hint:i,inputDependencies:["type"]},getShaderSource:o=>ip(o,D.size(e.dims),e.dataType,s,r,n),getRunData:o=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(D.size(o[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(D.size(e.dims)/4)}]})}),Ns=e=>{e.compute(Re(e.inputs[0],"Abs","abs"))},Vs=e=>{e.compute(Re(e.inputs[0],"Acos","acos"))},Gs=e=>{e.compute(Re(e.inputs[0],"Acosh","acosh"))},Hs=e=>{e.compute(Re(e.inputs[0],"Asin","asin"))},Ls=e=>{e.compute(Re(e.inputs[0],"Asinh","asinh"))},Fs=e=>{e.compute(Re(e.inputs[0],"Atan","atan"))},qs=e=>{e.compute(Re(e.inputs[0],"Atanh","atanh"))},js=e=>we(e),Ks=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(Re(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},ap=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Kn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:Yn;return we({min:t,max:r})},Ys=(e,t)=>{let r=e.inputs.length===1?t:ap(e.inputs),n=ft(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"Clip",i=>`clamp(${i}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${n}> = vec4(${n}(${r.min}));
    const clip_max_: vec4<${n}> = vec4(${n}(${r.max}));
`,r.cacheKey),{inputs:[0]})},Xs=e=>{e.compute(Re(e.inputs[0],"Ceil","ceil"))},Zs=e=>{e.compute(Re(e.inputs[0],"Cos","cos"))},Qs=e=>{e.compute(Re(e.inputs[0],"Cosh","cosh"))},ei=e=>we(e),Js=(e,t)=>{let r=ft(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"Elu",n=>`elu_vf32(${n})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},ti=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,eu=e=>{let t=ft(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,ti(t)))},tu=e=>{e.compute(Re(e.inputs[0],"Exp","exp"))},ru=e=>{e.compute(Re(e.inputs[0],"Floor","floor"))},nu=e=>{let t=ft(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,ti(t)))},iu=(e,t)=>{let r=ft(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"LeakyRelu",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},au=e=>{e.compute(Re(e.inputs[0],"Not",t=>`!${t}`))},ou=e=>{e.compute(Re(e.inputs[0],"Neg",t=>`-${t}`))},su=e=>{e.compute(Re(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},uu=e=>{let t=ft(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},lu=e=>{e.compute(Re(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},du=e=>we(e),cu=(e,t)=>{let r=ft(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"HardSigmoid",n=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${n} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},pu=e=>{e.compute(Re(e.inputs[0],"Sin","sin"))},fu=e=>{e.compute(Re(e.inputs[0],"Sinh","sinh"))},mu=e=>{e.compute(Re(e.inputs[0],"Sqrt","sqrt"))},hu=e=>{e.compute(Re(e.inputs[0],"Tan","tan"))},gu=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,yu=e=>{e.compute(Re(e.inputs[0],"Tanh",gu))},na=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${gu("v")};
}
`,ia=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,bu=e=>{let t=ft(e.inputs[0].dataType);e.compute(Re(e.inputs[0],"FastGelu",ia,na(t),void 0,e.inputs[0].dataType))},wu=(e,t)=>{let r=ft(e.inputs[0].dataType);return e.compute(Re(e.inputs[0],"ThresholdedRelu",n=>`select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},vu=e=>{e.compute(Re(e.inputs[0],"Log","log"))}});var op,sp,_u,Su=j(()=>{"use strict";Se();$e();ri();op=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},sp=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=M("input",e[0].dataType,e[0].dims,4),n=M("bias",e[0].dataType,[e[0].dims[2]],4),i=K("output",e[0].dataType,t,4),s=D.size(t)/4,o=De(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:p=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${p.declareVariables(r,n,i)}

  ${ti(o)}

  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${i.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},_u=e=>{op(e.inputs),e.compute(sp(e.inputs))}});var up,lp,Wt,xu,Cu,Iu,Au,Tu,Eu,Ou,ku,Pu,Ru,zu=j(()=>{"use strict";me();Se();$e();up=(e,t,r,n,i,s,o,d,p,m,l,g)=>{let b,$;typeof d=="string"?b=$=(x,O)=>`${d}((${x}),(${O}))`:typeof d=="function"?b=$=d:(b=d.scalar,$=d.vector);let v=K("outputData",l,n.length,4),S=M("aData",p,t.length,4),T=M("bData",m,r.length,4),I;if(i)if(s){let x=D.size(t)===1,O=D.size(r)===1,A=t.length>0&&t[t.length-1]%4===0,P=r.length>0&&r[r.length-1]%4===0;x||O?I=v.setByOffset("global_idx",$(x?`${S.type.value}(${S.getByOffset("0")}.x)`:S.getByOffset("global_idx"),O?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"))):I=`
            let outputIndices = ${v.offsetToIndices("global_idx * 4u")};
            let offsetA = ${S.broadcastedIndicesToOffset("outputIndices",v)};
            let offsetB = ${T.broadcastedIndicesToOffset("outputIndices",v)};
            ${v.setByOffset("global_idx",$(o||A?S.getByOffset("offsetA / 4u"):`${S.type.value}(${S.getByOffset("offsetA / 4u")}[offsetA % 4u])`,o||P?T.getByOffset("offsetB / 4u"):`${T.type.value}(${T.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else I=v.setByOffset("global_idx",$(S.getByOffset("global_idx"),T.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let x=(O,A,P="")=>{let N=`aData[indexA${A}][componentA${A}]`,V=`bData[indexB${A}][componentB${A}]`;return`
            let outputIndices${A} = ${v.offsetToIndices(`global_idx * 4u + ${A}u`)};
            let offsetA${A} = ${S.broadcastedIndicesToOffset(`outputIndices${A}`,v)};
            let offsetB${A} = ${T.broadcastedIndicesToOffset(`outputIndices${A}`,v)};
            let indexA${A} = offsetA${A} / 4u;
            let indexB${A} = offsetB${A} / 4u;
            let componentA${A} = offsetA${A} % 4u;
            let componentB${A} = offsetB${A} % 4u;
            ${O}[${A}] = ${P}(${b(N,V)});
          `};l===9?I=`
            var data = vec4<u32>(0);
            ${x("data",0,"u32")}
            ${x("data",1,"u32")}
            ${x("data",2,"u32")}
            ${x("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:I=`
            ${x("outputData[global_idx]",0)}
            ${x("outputData[global_idx]",1)}
            ${x("outputData[global_idx]",2)}
            ${x("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(S,T,v)}

        ${g??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${I}
      }`},lp=(e,t,r,n,i,s,o=r.dataType)=>{let d=!D.areEqual(r.dims,n.dims),p=r.dims,m=D.size(r.dims),l=!1,g=!1,b=[d];if(d){let $=zt.calcShape(r.dims,n.dims,!1);if(!$)throw new Error("Can't perform binary op on the given tensors");p=$,m=D.size(p);let v=D.size(r.dims)===1,S=D.size(n.dims)===1,T=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,I=n.dims.length>0&&n.dims[n.dims.length-1]%4===0;b.push(v),b.push(S),b.push(T),b.push(I);let x=1;for(let O=1;O<p.length;O++){let A=r.dims[r.dims.length-O]??1,P=n.dims[n.dims.length-O]??1;if(A===P)x*=A;else break}x%4===0?(g=!0,l=!0):(v||S||T||I)&&(l=!0)}else l=!0;return b.push(l),{name:e,shaderCache:{hint:t+b.map($=>$.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:$=>up($,r.dims,n.dims,p,l,d,g,i,r.dataType,n.dataType,o,s),getRunData:()=>({outputs:[{dims:p,dataType:o}],dispatchGroup:{x:Math.ceil(m/64/4)},programUniforms:[{type:12,data:Math.ceil(D.size(p)/4)},...X(r.dims,n.dims,p)]})}},Wt=(e,t,r,n,i,s)=>{e.compute(lp(t,i??"",e.inputs[0],e.inputs[1],r,n,s))},xu=e=>{Wt(e,"Add",(t,r)=>`${t}+${r}`)},Cu=e=>{Wt(e,"Div",(t,r)=>`${t}/${r}`)},Iu=e=>{Wt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Au=e=>{Wt(e,"Mul",(t,r)=>`${t}*${r}`)},Tu=e=>{let t=M("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Wt(e,"Pow",{scalar:(n,i)=>`pow_custom(${n},${i})`,vector:(n,i)=>`pow_vector_custom(${n},${i})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Eu=e=>{Wt(e,"Sub",(t,r)=>`${t}-${r}`)},Ou=e=>{Wt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},ku=e=>{Wt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Pu=e=>{Wt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Ru=e=>{Wt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var cp,pp,fp,mp,Bu,Du,Mu=j(()=>{"use strict";me();Se();Ye();$e();cp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let r=0,n=e[r],i=n.dataType,s=n.dims.length;e.forEach((o,d)=>{if(d!==r){if(o.dataType!==i)throw new Error("input tensors should be one type");if(o.dims.length!==s)throw new Error("input tensors should have the same shape");o.dims.forEach((p,m)=>{if(m!==t&&p!==n.dims[m])throw new Error("non concat dimensions must match")})}})},pp=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,fp=(e,t)=>{let r=e.length,n=[];for(let i=0;i<r;++i){let s=t.setByOffset("global_idx",e[i].getByIndices("indices"));r===1?n.push(s):i===0?n.push(`if (inputIndex == ${i}u) { ${s} }`):i===r-1?n.push(`else { ${s} }`):n.push(`else if (inputIndex == ${i}) { ${s} }`)}return n.join(`
`)},mp=(e,t,r,n)=>{let i=D.size(r),s=new Array(e.length),o=new Array(e.length),d=0,p=[],m=[],l=[{type:12,data:i}];for(let S=0;S<e.length;++S)d+=e[S].dims[t],s[S]=d,m.push(e[S].dims.length),o[S]=M(`input${S}`,n,m[S]),p.push("rank"),l.push({type:12,data:s[S]});for(let S=0;S<e.length;++S)l.push(...X(e[S].dims));l.push(...X(r));let g=K("output",n,r.length),b=g.indicesGet("indices",t),$=Array.from(Array(s.length).keys()).map(S=>`uniforms.sizeInConcatAxis${S}`).join(","),v=S=>`

  ${(()=>{S.registerUniform("outputSize","u32");for(let T=0;T<e.length;T++)S.registerUniform(`sizeInConcatAxis${T}`,"u32");return S.declareVariables(...o,g)})()}

  ${pp(s.length,$)}

  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${g.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${b});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${s.length}u>(${$});
      ${b} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${fp(o,g)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:r,dataType:n}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:l}),getShaderSource:v}},Bu=(e,t)=>{let r=e.inputs,n=r[0].dims,i=D.normalizeAxis(t.axis,n.length);cp(r,i);let s=n.slice();s[i]=r.reduce((d,p)=>d+(p.dims.length>i?p.dims[i]:0),0);let o=r.filter(d=>D.size(d.dims)>0);e.compute(mp(o,i,s,r[0].dataType),{inputs:o})},Du=e=>we({axis:e.axis})});var Tt,Et,Ot,ni,Qt=j(()=>{"use strict";me();Se();Tt=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},Et=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},Ot=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},ni=e=>{let t=e?.activation||"";if(t==="HardSigmoid"){let[r,n]=e?.activation_params||[.2,.5];return{activation:t,alpha:r,beta:n}}else if(t==="Clip"){let[r,n]=e?.activation_params||[Kn,Yn];return{activation:t,clipMax:n,clipMin:r}}else if(t==="LeakyRelu"){let[r]=e?.activation_params||[.01];return{activation:t,alpha:r}}return{activation:t}}});var tt,ii,ai=j(()=>{"use strict";tt=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},ii=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var oi,aa=j(()=>{"use strict";oi=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var hp,gp,nn,Uu,yp,an,bp,si,on=j(()=>{"use strict";me();Se();$e();Qt();ai();hp=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,gp=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,nn=(e,t,r="f32",n,i=!1,s=32,o=!1,d=32)=>{let p=t[1]*e[1],m=t[0]*e[0],l=i?p:s,g=i?s:p,b=l/t[0],$=s/t[1];if(!((i&&b===4&&e[1]===4||!i&&(b===3||b===4))&&l%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${i} is true, innerElementSize ${b} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${b} must be 3 or 4.
  tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${b}<${r}>, ${l/b}>, ${g}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${m/e[0]}>, ${s}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${b};
const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${o?"0":"i32(globalId.z)"};
  ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${p};

  let num_tiles = ${o?`${Math.ceil(d/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${o?`i32(globalId.z) * ${d}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${$};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${hp(i,n)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${b===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${gp(i,b)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Uu=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,yp=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",an=(e,t,r="f32",n,i=!1,s=32,o=!1,d=32,p=!1)=>{let m=e[1]*t[1],l=e[0]*t[0],g=i?m:s,b=i?s:m;if(!(b%t[1]===0&&g%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${b} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let $=b/t[1],v=g/t[0],S=s/t[1],T=p?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${m};
    let globalColStart = i32(workgroupId.x) * ${l};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${b}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {
          ${Uu(i,n)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${n?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${i?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${m};

let tileRowA = i32(localId.y) * ${$};
let tileColA = i32(localId.x) * ${v};
let tileRowB = i32(localId.y) * ${S};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${v}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Uu(i,n)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${n?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${yp(i)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${g}>, ${b}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${l}>, ${s}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${o?"0":"i32(globalId.z)"};
    ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${o?`${Math.ceil(d/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${o?`i32(globalId.z) * ${d}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${T}
  }
`},bp=(e,t,r,n,i,s=!1)=>{let[o,d,p]=i,[m,l,g,b]=n,$=Ir(o,p),v=Ir(d,p),S=De(n[0].type.tensor),T=()=>{let O=l.rank,A=m.rank,P=`var aIndices: ${l.type.indices};`;for(let N=O-2-1,V=A-1;N>=0;N--,V--)P+=`
aIndices[${N}] = ${A>1?`batchIndices[${V}]`:"batchIndices"};`;return $.forEach(N=>{P+=`
aIndices[${N}] = 0;`}),P+=`
aIndices[${O-2}] = u32(row);
                   aIndices[${O-1}] = u32(colIn);`,P},I=()=>{let O=g.rank,A=m.rank,P=`var bIndices: ${g.type.indices};`;for(let N=O-2-1,V=A-1;N>=0;N--,V--)P+=`
bIndices[${N}] = ${A>1?`batchIndices[${V}]`:"batchIndices"};`;return v.forEach(N=>{P+=`
bIndices[${N}] = 0;`}),P+=`
bIndices[${O-2}] = u32(row);
                   bIndices[${O-1}] = u32(colIn);`,P};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${m.type.indices}) -> ${tt(e,S)} {
      var value = ${tt(e,S)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        ${T()}
        value = ${l.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${m.type.indices}) -> ${tt(e,S)} {
      var value = ${tt(e,S)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        ${I()}
        value = ${g.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${tt(e,S)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${s?"bias[colIn]":`${tt(e,S)}(bias[row])`};`:""}
        ${r}
        ${b.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},si=(e,t,r,n,i=!1)=>{let s=e[0].dims,o=e[1].dims,d=s.slice(0,-2),p=o.slice(0,-2),m=n?n.slice(0,-2):r.slice(0,-2),l=D.size(m),g=s[s.length-2],b=s[s.length-1],$=o[o.length-1],v=b%4===0&&$%4===0,S=g<=8?[4,1,1]:[4,4,1],T=[8,8,1],I=[Math.ceil($/T[0]/S[0]),Math.ceil(g/T[1]/S[1]),Math.ceil(l/T[2]/S[2])],x=v?4:1,O=[...d,g,b/x],A=O.length,P=[...p,b,$/x],N=P.length,V=[l,g,$/x],G=[{type:6,data:g},{type:6,data:$},{type:6,data:b}];Et(t,G),G.push(...X(m,O,P));let ie=["rank","rank"],Z=e.length>2;Z&&(G.push(...X(e[2].dims)),ie.push("rank")),G.push(...X(V));let U=re=>{let Be=m.length,Oe=Xn("batchDims",e[0].dataType,Be,1),Ie=De(e[0].dataType),te=M("a",e[0].dataType,A,x),Me=M("b",e[1].dataType,N,x),ye=K("result",e[0].dataType,V.length,x),he=[te,Me];if(Z){let F=i?x:1;he.push(M("bias",e[2].dataType,e[2].dims.length,F))}let ue=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Ot(t,ue);let ge=De(ye.type.tensor),ke=Tt(t,ye.type.value,ge),Fe=bp(x,Z,ke,[Oe,te,Me,ye],[d,p,m],i);return`
  ${re.registerUniforms(ue).registerInternalVariables(Oe).declareVariables(...he,ye)}
  ${Fe}
  ${v?nn(S,T,Ie,Oe):an(S,T,Ie,Oe)}
                   `};return{name:"MatMul",shaderCache:{hint:`${S};${t.activation};${v};${i}`,inputDependencies:ie},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:I[0],y:I[1],z:I[2]},programUniforms:G}),getShaderSource:U}}});var wp,Wu,Nu=j(()=>{"use strict";me();Zt();$e();Qt();ai();aa();on();wp=(e,t,r,n,i=!1,s,o=4,d=4,p=4,m="f32")=>{let l=Z=>{switch(Z){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${m}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${Z} is not supported.`)}},g=Z=>{switch(Z){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${Z} is not supported.`)}},b=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,$=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,v=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",S=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",T=e?"row":"col",I=e?"col":"row",x=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${T} / outWidth;
    let outCol = ${T} % outWidth;

    let WRow = ${I} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${I} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${I} % inChannels;
    var resData = ${tt(o,m)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${v} && xCol >= 0 && xCol < ${S}) {
      ${b}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${l(o)}
    }
    return resData;`,O=e?t&&n?`
    let col = colIn * ${o};
    ${x}`:`
    let col = colIn * ${o};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${x}
    }
    return ${tt(o,m)}(0.0);`:n&&r?`
    let col = colIn * ${o};
    ${x}`:`
    let col = colIn * ${o};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${x}
    }
    return ${tt(o,m)}(0.0);`,A=`${g(d)}`,P=tt(p,m),N=e?tt(o,m):tt(d,m),V=e?tt(d,m):tt(o,m),G=Tt(s,P,m);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${N} {
      ${e?O:A}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${V} {
      ${e?A:O}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${P}) {
      let col = colIn * ${p};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${$}
      ${ii(i)}
      ${G}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Wu=(e,t,r,n,i,s,o,d)=>{let p=t.format==="NHWC",m=p?e[0].dims[3]:e[0].dims[1],l=r[0],g=p?r[2]:r[3],b=p?r[1]:r[2],$=p?r[3]:r[1],v=p&&(m%4===0||m%3===0)&&$%4===0,S=p?$:g*b,T=p?g*b:$,I=[8,8,1],x=n<=8?[4,1,1]:[4,4,1],O=[Math.ceil(S/I[0]/x[0]),Math.ceil(T/I[1]/x[1]),Math.ceil(l/I[2]/x[2])];Ne("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${O}`);let A=v?p&&m%4!==0?3:4:1,P=I[1]*x[1],N=I[0]*x[0],V=Math.max(I[0]*A,I[1]),G=n%P===0,ie=i%N===0,Z=s%V===0,U=v?[A,4,4]:[1,1,1],re=[{type:6,data:n},{type:6,data:i},{type:6,data:s},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];Et(t,re),re.push(...X(e[0].dims,e[1].dims));let Be=["rank","rank"];o&&(re.push(...X(e[2].dims)),Be.push("rank")),re.push(...X(r));let Oe=Ie=>{let te=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Ot(t,te);let Me=v?4:1,ye=De(e[0].dataType),he=`
      fn setOutputAtIndex(flatIndex : i32, value : ${v?`vec4<${ye}>`:ye}) {
        result[flatIndex] = ${v?`vec4<${ye}>`:ye}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${v?`vec4<${ye}>`:ye}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${v?"/ 4":""}, value);
      }`,ue=M("x",e[0].dataType,e[0].dims.length,A===3?1:A),ge=M("w",e[1].dataType,e[1].dims.length,Me),ke=[ue,ge],Fe=K("result",e[0].dataType,r.length,Me);if(o){let F=M("bias",e[2].dataType,e[2].dims.length,Me);ke.push(F),he+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${v?`vec4<${ye}>`:ye} {
          return bias[coords.${p?"w":"y"}${v?"/ 4":""}];
        }`}return`
        ${oi("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${Ie.registerUniforms(te).declareVariables(...ke,Fe)}
        ${he}
        ${wp(p,G,ie,Z,o,t,U[0],U[1],U[2],ye)}
        ${v?nn(x,I,ye,void 0,!p,V):an(x,I,ye,void 0,!p,V,!1,void 0,d)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${A};${v};${G};${ie};${Z};${P};${N};${V}`,inputDependencies:Be},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:O[0],y:O[1],z:O[2]},programUniforms:re}),getShaderSource:Oe}}});var oa,Vu,Gu=j(()=>{"use strict";me();Se();$e();sa();Qt();oa=(e,t,r)=>{let n=e.length>2,i=n?"value += b[output_channel];":"",s=e[0].dims,o=e[1].dims,d=o[0]/t.group,p=t.format==="NHWC",m=ui(s,o,t.dilations,t.pads,t.strides,p),l=D.size(m),g=[{type:12,data:l},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:d}];Et(t,g),g.push(...X(s,o));let b=["rank","rank"];n&&(g.push(...X(e[2].dims)),b.push("rank")),g.push(...X(m));let $=v=>{let S=K("output",e[0].dataType,m.length),T=De(S.type.tensor),I=Tt(t,S.type.value,T),x=M("x",e[0].dataType,s.length),O=M("w",e[1].dataType,o.length),A=[x,O];n&&A.push(M("b",e[2].dataType,e[2].dims.length));let P=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return Ot(t,P),`
  ${v.registerUniforms(P).declareVariables(...A,S)}

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${S.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${p?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${p?1:2}], outputIndices[${p?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel / uniforms.output_channels_per_group;

    var value: ${S.type.value} = ${S.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[${p?1:2}]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[${p?2:3}]) {
            continue;
          }

          let xVal = ${p?x.get("batch","xHeight","xWidth","input_channel"):x.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${O.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${i}
    ${I}
    ${S.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:b},getRunData:()=>({outputs:[{dims:r?r(m):m,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:g}),getShaderSource:$}},Vu=(e,t,r)=>{let n=e.length>2,i=Ve(r[3]),s=Ve(r[2]),o=D.size(r)/i/s,d=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/i],p=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/i],m=[r[0],r[1],r[2],r[3]/i],l=[{type:12,data:o},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];Et(t,l),l.push(...X(d,p,m));let g=(s-1)*t.strides[1]+p[1],b=$=>{let v=K("output",e[0].dataType,m.length,i),S=De(v.type.tensor),T=Tt(t,v.type.value,S),I=M("x",e[0].dataType,d.length,i),x=M("w",e[1].dataType,p.length,i),O=[I,x];n&&O.push(M("b",e[2].dataType,e[2].dims,i));let A=n?"value += b[output_channel];":"",P=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Ot(t,P),`
  ${$.registerUniforms(P).declareVariables(...O,v)}
  ${$.mainStart()}
    ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${s}u;
    let col = (index1 % width1) * ${s}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${I.type.value}, ${g}>;
    var values: array<${v.type.value}, ${s}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${p[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${g}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${I.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${I.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${p[1]}; w_width++) {
          let w_val = ${x.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${s}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${s}u; i++) {
      var value = values[i];
      ${A}
      ${T}
      ${v.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${i};${s};${g};${p[0]};${p[1]}`,inputDependencies:n?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:l}),getShaderSource:b}}});var ua,vp,Hu,la=j(()=>{"use strict";me();Se();on();$e();Qt();ua=(e,t,r,n,i=!1)=>{let s=e[0].dims,o=e[1].dims,d=s[s.length-2],p=o[o.length-1],m=s[s.length-1],l=Ve(p),g=Ve(m),b=Ve(d),$=D.size(r)/l/b,v=e.length>2,S=n?n.slice(0,-2):r.slice(0,-2),I=[D.size(S),d,p],x=[{type:12,data:$},{type:12,data:d},{type:12,data:p},{type:12,data:m}];Et(t,x),x.push(...X(S,s,o)),v&&x.push(...X(e[2].dims)),x.push(...X(I));let O=A=>{let P=Xn("batch_dims",e[0].dataType,S.length),N=M("a",e[0].dataType,s.length,g),V=M("b",e[1].dataType,o.length,l),G=K("output",e[0].dataType,I.length,l),ie=De(G.type.tensor),Z=Tt(t,G.type.value,ie),U=[N,V],re="";if(v){let ue=i?l:1;U.push(M("bias",e[2].dataType,e[2].dims.length,ue)),re=`${i?`value += bias[col / ${ue}];`:`value += ${G.type.value}(bias[row + i]);`}`}let Be=s.slice(0,-2),Oe=o.slice(0,-2),Ie=Ir(Be,S),te=Ir(Oe,S),Me=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Ot(t,Me);let ye=(ue,ge)=>{let ke=ue.rank,Fe=ue.name;if(ke===2)return`var ${Fe}_indices = ${ue.type.indices}(0u, 0u);`;let F=P.rank,ae=`var ${Fe}_indices: ${ue.type.indices};`;for(let xe=ke-2-1,Ge=F-1;xe>=0;xe--,Ge--)ae+=`
${Fe}_indices[${xe}] = ${F>1?`batch_indices[${Ge}]`:"batch_indices"};`;return ge.forEach(xe=>{ae+=`
${Fe}_indices[${xe}] = 0;`}),ae+=`${Fe}_indices[${ke-2}] = 0u;
                     ${Fe}_indices[${ke-1}] = 0u;`,ae},he=()=>{let ue=`var a_data: ${N.type.value};`;for(let ge=0;ge<g;ge++)ue+=`
              let b_data${ge} = b[(b_offset + (k + ${ge}) * uniforms.N + col) / ${l}];`;for(let ge=0;ge<b;ge++){ue+=`a_data = a[(a_offset + (row + ${ge}) * uniforms.K + k) / ${g}];`;for(let ke=0;ke<g;ke++)ue+=`
            values[${ge}] = fma(${V.type.value}(a_data${g===1?"":`[${ke}]`}), b_data${ke}, values[${ge}]);
`}return ue};return`
  ${A.registerUniforms(Me).registerInternalVariables(P).declareVariables(...U,G)}
  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${l})) * ${l};
    var index1 = global_idx / (uniforms.N / ${l});
    let stride1 = uniforms.M / ${b};
    let row = (index1 % stride1) * ${b};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${P.offsetToIndices("batch")};`}
    ${ye(N,Ie)}
    let a_offset = ${N.indicesToOffset("a_indices")};
    ${ye(V,te)}
    let b_offset = ${V.indicesToOffset("b_indices")};
    var values: array<${G.type.value}, ${b}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${g}) {
      ${he()}
    }
    for (var i = 0u; i < ${b}u; i++) {
      var value = values[i];
      ${re}
      ${Z}
      let cur_indices = ${G.type.indices}(batch, row + i, col);
      let offset = ${G.indicesToOffset("cur_indices")};
      ${G.setByOffset(`offset / ${l}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${l};${g};${b};${i}`,inputDependencies:v?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil($/64)},programUniforms:x}),getShaderSource:O}},vp=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Hu=e=>{vp(e.inputs);let t=zt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],n=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&n<8?e.compute(ua(e.inputs,{activation:""},t)):e.compute(si(e.inputs,{activation:""},t))}});var ui,da,$p,Lu,ca,_p,Sp,pa,sa=j(()=>{"use strict";Se();Nu();on();Gu();Qt();la();Ar();ui=(e,t,r,n,i,s)=>{let o=e[0],d=e.slice(s?1:2,s?3:4),p=d.length,m=t[0],g=t.slice(2).map((v,S)=>v+(v-1)*(r[S]-1)),$=d.map((v,S)=>v+n[S]+n[S+p]).map((v,S)=>Math.floor((v-g[S]+i[S])/i[S]));return $.splice(0,0,o),$.splice(s?3:1,0,m),$},da=[2,3,1,0],$p=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[1]*t.group;if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let i=e[0].dims.length-2;if(t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Lu=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let n=e.pads.slice();dr.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,n,e.format==="NHWC",e.autoPad);let i=Object.assign({},e);return Object.assign(i,{kernelShape:r,pads:n}),i},ca=e=>{let t=ni(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],i=e.dilations,s=e.group,o=e.kernel_shape,d=e.pads,p=e.strides,m=e.w_is_const();return{autoPad:n,format:r,dilations:i,group:s,kernelShape:o,pads:d,strides:p,wIsConst:m,...t,cacheKey:`${e.format};${t.activation};`}},_p=(e,t,r)=>{let n=Lu(r,t),i=r.format==="NHWC";if(r.group!==1){if(!e.adapterInfo.isArchitecture("ampere")&&i&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1){let V=ui(t[0].dims,t[1].dims,r.dilations,n.pads,r.strides,i),G=e.kernelCustomData.wT??e.compute(St(t[1],da),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=G);let ie=[t[0],G];t.length===3&&ie.push(t[2]),e.compute(Vu(ie,n,V),{inputs:ie})}else e.compute(oa(t,n));return}let s=t.length===3,o=t[0].dims[i?1:2],d=t[0].dims[i?2:3],p=t[0].dims[i?3:1],m=t[1].dims[2],l=t[1].dims[3],g=ui(t[0].dims,t[1].dims,r.dilations,n.pads,r.strides,i),b=g[i?1:2],$=g[i?2:3],v=g[i?3:1],S=i&&m===o&&l===d&&r.pads[0]===0&&r.pads[1]===0;if(S||m===1&&l===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let N=g[0],V,G,ie,Z=[];if(i){let Be=e.kernelCustomData.wT??e.compute(St(t[1],da),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Be),S){let Oe=o*d*p;V=t[0].reshape([1,N,Oe]),G=Be.reshape([1,Oe,v]),ie=[1,N,v]}else V=t[0].reshape([N,o*d,p]),G=Be.reshape([1,p,v]),ie=[N,b*$,v];Z.push(V),Z.push(G)}else V=t[0].reshape([N,p,o*d]),G=t[1].reshape([1,v,p]),ie=[N,v,b*$],Z.push(G),Z.push(V);s&&Z.push(t[2]);let U=ie[2],re=Z[0].dims[Z[0].dims.length-1];U<8&&re<8?e.compute(ua(Z,n,g,ie,i),{inputs:Z}):e.compute(si(Z,n,g,ie,i),{inputs:Z});return}let T=!0,I=e.kernelCustomData.wT??e.compute(St(t[1],da),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let x=[t[0],I];s&&x.push(t[2]);let O=i?b*$:v,A=i?v:b*$,P=m*l*p;e.compute(Wu(x,n,g,O,A,P,s,T),{inputs:x})},Sp=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let i=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),o=[1].concat(t.dilations),d=[1].concat(t.kernelShape),p=Lu({...t,pads:i,strides:s,dilations:o,kernelShape:d},n);e.compute(oa(n,p,m=>r?[m[0],m[2],m[3]]:[]))},pa=(e,t)=>{$p(e.inputs,t),e.inputs[0].dims.length===3?Sp(e,t):_p(e,e.inputs,t)}});var xp,Fu,qu=j(()=>{"use strict";me();Zt();$e();Qt();ai();aa();on();xp=(e,t=!1,r,n,i=4)=>{let s=I=>{switch(I){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return ${n}(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${I} is not supported.`)}},o=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,d=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,p=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",m=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",l=e?"row":"col",g=e?"col":"row",b=`
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${l} / outWidth;
      let outCol = ${l} % outWidth;

      let WRow = ${g} / (uniforms.filter_dims[1] * inChannels);
      let WCol = ${g} / inChannels % uniforms.filter_dims[1];
      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(${p}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${m}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${g} % inChannels;
      ${o}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${i}];`,$=e?`
      let col = colIn * ${i};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
        ${b}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${i};
      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
        ${b}
      }
      return ${n}(0.0);`,v=`
      let col = colIn * ${i};
      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};
      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);
      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];
      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${s(i)}
      }
      return ${n}(0.0);
      `,S=Tt(r,n);return`
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?$:v}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?v:$}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${i};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${d}
      ${ii(t)}
      ${S}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${i}] = value;
    }
  }`},Fu=(e,t,r,n,i,s,o,d)=>{let p=t.format==="NHWC",m=p?e[0].dims[3]:e[0].dims[1],l=r[0],g=p?r[2]:r[3],b=p?r[1]:r[2],$=p?r[3]:r[1],v=p&&m%4===0&&m%3&&$%4===0,S=p?$:g*b,T=p?g*b:$,I=[8,8,1],x=n<=8?[4,1,1]:[4,4,1],O=[Math.ceil(S/I[0]/x[0]),Math.ceil(T/I[1]/x[1]),Math.ceil(l/I[2]/x[2])];Ne("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${O}`);let A=v?4:1,P=Math.max(I[0]*A,I[1]),N=v?4:1,V=[t.kernelShape[p?1:2],t.kernelShape[p?2:3]],G=[V[0]+(t.dilations[0]<=1?0:(V[0]-1)*(t.dilations[0]-1)),V[1]+(t.dilations[1]<=1?0:(V[1]-1)*(t.dilations[1]-1))],ie=[G[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),G[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],Z=[{type:6,data:n},{type:6,data:i},{type:6,data:s},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:V},{type:6,data:ie}];Et(t,Z),Z.push(...X(e[0].dims,e[1].dims));let U=["rank","rank"];o&&(Z.push(...X(e[2].dims)),U.push("rank")),Z.push(...X(r));let re=Be=>{let Oe=M("x",e[0].dataType,e[0].dims.length,N),Ie=M("w",e[1].dataType,e[1].dims.length,1),te=K("result",e[0].dataType,r.length,N),Me=[Oe,Ie],ye="";if(o){let ge=M("bias",e[2].dataType,e[2].dims.length,N);Me.push(ge),ye+=`
          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${ge.type.value} {
            return bias[coords.${p?"w":"y"}${v?"/ 4":""}];
          }`}let he=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:V.length},{name:"pads",type:"i32",length:ie.length}];Ot(t,he);let ue=De(e[0].dataType,1);if(ue!=="f16"&&ue!=="f32")throw new Error(`elemType ${ue} is not supported.`);return`
        ${oi("uniforms.result_strides")}
        ${Be.registerUniforms(he).declareVariables(...Me,te)};
        ${ye}
        ${xp(p,o,t,Oe.type.value,A)}
        ${v?nn(x,I,ue,void 0,!p,P):an(x,I,ue,void 0,!p,P,!1,void 0,d)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${x};${I};${v}`,inputDependencies:U},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:O[0],y:O[1],z:O[2]},programUniforms:Z}),getShaderSource:re}}});var Cp,fa,ju=j(()=>{"use strict";me();Zt();Se();$e();Cp=(e,t,r,n,i,s=!1,o,d,p=!1)=>{let m=p?1:2,l=p?2:3,g=p?3:1,b=s?2:1,$=`
  fn setOutputAtIndex(flatIndex : u32, value : ${s?`vec4<${o}>`:o}) {
    result[flatIndex] = ${s?`vec4<${o}>`:o}(value);
  }`;n&&($+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${s?`vec4<${o}>`:o} {
      return bias[coords.${p?"w":"y"}${s?"/ 4":""}];
    }`);let v=s?4:1,S=M("W",t[1].dataType,t[1].dims.length,v),T=M("Dy",t[0].dataType,t[0].dims.length,v),I=[T,S];n&&I.push(M("bias",t[2].dataType,[r[g]].length,v));let x=K("result",t[0].dataType,r.length,v),O=`{
        let batch: u32 = ${i?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];
        let r = ${i?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];
        let c = ${i?"global_id.y":"workgroup_id.y"} * ${b};
        let d1: u32 = ${i?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${o}>, ${b}>;
        for (var i = 0; i < ${b}; i++) {
          dotProd[i] = vec4<${o}>(0.0);
        }
        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {
          var dyR = (${o}(dyCorner.x) + ${o}(wR)) / ${o}(uniforms.strides.x);
          let wRPerm = uniforms.filter_dims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${o}(uniforms.Dy_shape[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {
            let dyC = (${o}(dyCorner.y) + ${o}(wC)) / ${o}(uniforms.strides.y);
            let dyC2 = (${o}(dyCorner.y) + 1.0 + ${o}(wC)) / ${o}(uniforms.strides.y);
            let wCPerm = uniforms.filter_dims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${o}(uniforms.Dy_shape[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${o}(uniforms.Dy_shape[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${T.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${o}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${T.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${o}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = uniforms.Dy_shape[${g}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${T.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${o}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = uniforms.Dy_shape[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${T.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${o}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${b}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":`vec4<${o}>(0.0)`};
          ${x.set("batch","r","c + i","d1","value")};
        }
      }`,A=`
          let outputIndices = ${x.offsetToIndices("global_idx")};
          let batch = ${x.indicesGet("outputIndices",0)};
          let d1 = ${x.indicesGet("outputIndices",g)};
          let r = ${x.indicesGet("outputIndices",m)};
          let c = ${x.indicesGet("outputIndices",l)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / uniforms.output_channels_per_group;
          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${o}(0.0);
          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
            if (wR % uniforms.dilations.x != 0) {
              continue;
            }
            let dyR = (${o}(dyRCorner) + ${o}(wR)) / ${o}(uniforms.strides[0]);
            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
            if (dyR < 0.0 || dyR >= ${o}(uniforms.Dy_shape[${m}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
              if (wC % uniforms.dilations.y != 0) {
                continue;
              }
              let dyC = (${o}(dyCCorner) + ${o}(wC)) / ${o}(uniforms.strides.y);
              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
              if (dyC < 0.0 || dyC >= ${o}(uniforms.Dy_shape[${l}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * uniforms.input_channels_per_group;
              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {
                let xValue = ${p?T.get("batch","idyR","idyC","inputChannel"):T.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${S.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":`${o}(0.0)`};
          ${x.setByOffset("global_idx","value")};
        `;return`
  ${e.registerUniforms(d).declareVariables(...I,x)}
  ${$}

    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
  ${s?O:A}}`},fa=(e,t,r)=>{let n=e.length>2,i=t.outputShape,s=D.size(i),o=[Math.ceil(s/64),1,1];Ne("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${o}`);let d=t.format==="NHWC",p=["rank","rank"],m=[t.strides[0],t.strides[1]],l=[t.kernelShape[d?1:2],t.kernelShape[d?2:3]],g=[t.dilations[0],t.dilations[1]],b=[l[0]+(t.dilations[0]<=1?0:(t.kernelShape[d?1:2]-1)*(t.dilations[0]-1)),l[1]+(t.dilations[1]<=1?0:(t.kernelShape[d?2:3]-1)*(t.dilations[1]-1))],$=[b[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),b[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],v=!1,S=t.group,T=e[1].dims,I=T[0]/S,x=T[1],O=[{type:12,data:s},{type:12,data:m},{type:12,data:l},{type:12,data:g},{type:12,data:b},{type:6,data:$},{type:12,data:I},{type:12,data:x},...X(e[0].dims,e[1].dims)];n&&(O.push(...X(e[2].dims)),p.push("rank")),O.push(...X(i));let A=o[1]===1&&o[2]===1,P=N=>{let V=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:m.length},{name:"filter_dims",type:"u32",length:l.length},{name:"dilations",type:"u32",length:l.length},{name:"effective_filter_dims",type:"u32",length:b.length},{name:"pads",type:"i32",length:$.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],G=De(e[0].dataType);return`${Cp(N,e,i,n,A,v,G,V,d)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:p},getRunData:()=>({dispatchGroup:{x:o[0],y:o[1],z:o[2]},outputs:[{dims:r?r(i):i,dataType:e[0].dataType}],programUniforms:O}),getShaderSource:P}}});var Ip,Ap,Tp,Ku,Yu,Ep,Op,kp,Pp,Xu,Zu=j(()=>{"use strict";qu();ju();Qt();Ar();Ip=(e,t,r,n,i,s)=>(e-1)*t+r+(n-1)*i+1-s,Ap=(e,t,r,n,i)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[n]=s,r[i]=e-s):t==="SAME_LOWER"&&(r[n]=e-s,r[i]=s)},Tp=(e,t,r,n,i,s,o,d,p,m)=>{let l=e.length-2,g=m.length===0;if(p.length===0)for(let v=0;v<l;++v)p.push(0);let b=e[0],$=t[d?3:1]*i;for(let v=0,S=e.length-l-(d?1:0);v<l;++v,++S){let T=e[S],I=g?T*o[v]:m[v],x=Ip(T,o[v],s[v],t[S],r[v],I);Ap(x,n,s,v,v+l),g&&m.push(o[v]*(T-1)+p[v]+(t[S]-1)*r[v]+1-s[v]-s[v+l])}m.splice(0,0,b),m.splice(d?3:1,0,$)},Ku=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((g,b)=>g*b,1)===0){r.length=0;for(let g=2;g<t[1].dims.length;++g)r.push(t[1].dims[g])}let n=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(n?3:1,0,t[1].dims[1]);let i=e.pads.slice(),s=e.outputShape.slice(),o=e.outputPadding.slice(),d=t[0].dims,p=e.dilations.slice();if(p.reduce((g,b)=>g+b,0)===0){let g=t[0].dims.length-2;p=new Array(g).fill(1)}let m=e.strides.slice();if(m.reduce((g,b)=>g+b,0)===0){let g=t[0].dims.length-2;m=new Array(g).fill(1)}Tp(d,r,p,e.autoPad,e.group,i,m,n,o,s);let l=Object.assign({},e);return Object.assign(l,{kernelShape:r,pads:i,outputPadding:o,outputShape:s,dilations:p,strides:m}),l},Yu=e=>{let t=ni(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],i=e.dilations,s=e.group,o=e.kernelShape,d=e.pads,p=e.strides,m=e.wIsConst(),l=e.outputPadding,g=e.outputShape;return{autoPad:n,format:r,dilations:i,group:s,kernelShape:o,outputPadding:l,outputShape:g,pads:d,strides:p,wIsConst:m,...t,cacheKey:`${e.format};${t.activation};`}},Ep=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[0];if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let i=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==i))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((l,g)=>l+g,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((l,g)=>l+g,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((l,g)=>l+g,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((l,g)=>l+g,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Op=[2,3,1,0],kp=(e,t,r)=>{let n=Ku(r,t),i=r.format==="NHWC",s=n.outputShape,o=s[i?3:1],d=t[0].dims[i?3:1];if(n.group!==1||o===1&&d===1){e.compute(fa(t,n));return}let p=s[i?1:2],m=s[i?2:3],l=t[1].dims[2],g=t[1].dims[3],b=i?p*m:o,$=i?o:p*m,v=l*g*d,S=!0,T=e.kernelCustomData.wT??e.compute(St(t[1],Op),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=T);let I=[t[0],T],x=t.length===3;x&&(!i&&t[2].dims.length===1?I.push(t[2].reshape([t[2].dims[0],1,1])):I.push(t[2])),e.compute(Fu(I,n,s,b,$,v,x,S),{inputs:I})},Pp=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let i=t.kernelShape;(i.length===0||i[0]===0)&&(i=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let o=t.strides;(o.length===0||o[0]===0)&&(o=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],o=[1].concat(o),s=[1].concat(s),i=[1].concat(i);let p=Ku({...t,pads:d,strides:o,dilations:s,kernelShape:i},n);e.compute(fa(n,p,m=>r?[m[0],m[2],m[3]]:[m[0],m[1],m[3]]))},Xu=(e,t)=>{Ep(e.inputs,t),e.inputs[0].dims.length===3?Pp(e,t):kp(e,e.inputs,t)}});var Rp,Qu,Ju,el=j(()=>{"use strict";me();Se();Ye();$e();Rp=(e,t,r,n)=>{let i=D.size(t),s=t.length,o=M("input",e,s),d=K("output",e,s),p=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),m=D.normalizeAxis(p,s),l=g=>{let b=` i32(${o.indicesGet("inputIndices","uniforms.axis")}) `,$=se("uniforms.input_shape","uniforms.axis",s),v=n.reverse?b+(n.exclusive?" + 1":""):"0",S=n.reverse?$:b+(n.exclusive?"":" + 1");return`
                ${g.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(o,d)}
                ${g.mainStart()}
                  ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${d.offsetToIndices("global_idx")};
                  var sum = ${d.type.value}(0);
                  let first : i32 = ${v};
                  let last : i32 = ${S};
                  for (var i : i32 = first; i < last; i++) {
                    ${o.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${o.getByIndices("inputIndices")};
                  }
                  ${d.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:n.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},{type:6,data:m},...X(t,t)]}),getShaderSource:l}},Qu=(e,t)=>{let r=e.inputs[0].dims,n=e.inputs[0].dataType,i=e.inputs[1];e.compute(Rp(n,r,i,t),{inputs:[0]})},Ju=e=>{let t=e.exclusive===1,r=e.reverse===1;return we({exclusive:t,reverse:r})}});var ma,li,tl,zp,Bp,ha,ga,rl,Dp,nl,il,al=j(()=>{"use strict";me();Se();Ye();$e();ma="[a-zA-Z]|\\.\\.\\.",li="("+ma+")+",tl="^"+li+"$",zp="("+li+",)*"+li,Bp="^"+zp+"$",ha=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let n=this.symbolToIndices.get(t);n===void 0?n=[r]:n.push(r),this.symbolToIndices.set(t,n)}},ga=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[n,i]=r.includes("->")?r.split("->",2):[r,""];if(!n.match(RegExp(Bp)))throw new Error("Invalid LHS term");if(n.split(",").forEach((d,p)=>{let m=t[p].dims.slice();if(!d.match(RegExp(tl)))throw new Error("Invalid LHS term");let l=this.processTerm(d,!0,m,p);this.lhs.push(l)}),i==="")i+=[...this.symbolToInfo.entries()].filter(([d,p])=>p.count===1||d==="...").map(([d])=>d).join("");else if(!i.match(RegExp(li)))throw new Error("Invalid RHS");i.match(RegExp(ma,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let p=this.symbolToInfo.get(d);if(p===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(p.dimValue)}}),this.rhs=this.processTerm(i,!1,this.outputDims)}addSymbol(t,r,n){let i=this.symbolToInfo.get(t);if(i!==void 0){if(i.dimValue!==r&&i.count!==1)throw new Error("Dimension mismatch");i.count++,i.inputIndices.push(n)}else i={count:1,dimValue:r,inputIndices:[n]};this.symbolToInfo.set(t,i)}processTerm(t,r,n,i=-1){let s=n.length,o=!1,d=[],p=0;if(!t.match(RegExp(tl))&&!r&&t!=="")throw new Error("Invalid LHS term");let m=t.match(RegExp(ma,"g")),l=new ha(i);return m?.forEach((g,b)=>{if(g==="..."){if(o)throw new Error("Only one ellipsis is allowed per input term");o=!0;let $=s-m.length+1;if($<0)throw new Error("Ellipsis out of bounds");if(d=n.slice(p,p+$),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let v=0;v<d.length;v++){let S=String.fromCharCode("0".charCodeAt(0)+v);l.addSymbol(S,b+v),this.addSymbol(S,n[p++],i)}}else l.addSymbol(g,b+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(g,n[p++],i)}),l}},rl=e=>e+"_max",Dp=(e,t,r,n)=>{let s=e.map(l=>l.length).map((l,g)=>M(`input${g}`,t,l)),o=D.size(n),d=K("output",t,n.length),p=[...r.symbolToInfo.keys()].filter(l=>!r.rhs.symbolToIndices.has(l)),m=l=>{let g=[],b="var prod = 1.0;",$="var sum = 0.0;",v="sum += prod;",S=[],T=[],I=[],x=[],O=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((P,N)=>{if(r.rhs.symbolToIndices.has(N)){let V=r.rhs.symbolToIndices.get(N)?.[0];V!==void 0&&r.lhs.forEach((G,ie)=>{if(P.inputIndices.includes(ie)){let Z=G.symbolToIndices.get(N);if(Z===void 0)throw new Error("Invalid symbol error");Z.forEach(U=>{g.push(`${s[ie].indicesSet(`input${ie}Indices`,U,d.indicesGet("outputIndices",V))}`)})}})}else r.lhs.forEach((V,G)=>{if(P.inputIndices.includes(G)){let ie=V.symbolToIndices.get(N);if(ie===void 0)throw new Error("Invalid symbol error");ie.forEach(Z=>{S.push(`${s[G].indicesSet(`input${G}Indices`,Z,`${N}`)}`)}),x.push(`prod *= ${s[G].getByIndices(`input${G}Indices`)};`)}}),T.push(`for(var ${N}: u32 = 0; ${N} < uniforms.${rl(N)}; ${N}++) {`),I.push("}")});let A=O?[...g,`let sum = ${s.map((P,N)=>P.getByIndices(`input${N}Indices`)).join(" * ")};`]:[...g,$,...T,...S,b,...x,v,...I];return`
            ${l.registerUniforms(p.map(P=>({name:`${rl(P)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...s,d)}

            ${l.mainStart()}
            ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${d.offsetToIndices("global_idx")};
            ${s.map((P,N)=>`var input${N}Indices: ${s[N].type.indices};`).join(`
`)}
            ${A.join(`
`)};
            ${d.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let l=p.filter(b=>r.symbolToInfo.has(b)).map(b=>({type:12,data:r.symbolToInfo.get(b)?.dimValue||0}));l.push({type:12,data:o});let g=e.map((b,$)=>[...X(b)]).reduce((b,$)=>b.concat($),l);return g.push(...X(n)),{outputs:[{dims:n,dataType:t}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:g}},getShaderSource:m}},nl=(e,t)=>{let r=new ga(e.inputs,t.equation),n=r.outputDims,i=e.inputs.map((s,o)=>s.dims);e.compute(Dp(i,e.inputs[0].dataType,r,n))},il=e=>{let t=e.equation.replace(/\s+/g,"");return we({equation:t})}});var Mp,ol,Up,Wp,sl,ul=j(()=>{"use strict";me();Se();$e();Mp=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=r.length<t.length?0:r.length-t.length,i=t.length<r.length?0:t.length-r.length;for(;n<r.length&&i<t.length;++n,++i)if(r[n]!==t[i]&&r[n]!==1&&t[i]!==1)throw new Error("Expand requires shape to be broadcastable to input")},ol=(e,t)=>{let r=e.length-t.length,n=[];for(let i=0;i<r;++i)n.push(e[i]);for(let i=0;i<t.length;++i)n.push(t[i]===1?e[i+r]:t[i]);return n},Up=(e,t)=>e.length>t.length?ol(e,t):ol(t,e),Wp=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=Up(t,r),i=e[0].dataType,s=i===9?4:1,o=Math.ceil(D.size(n)/s),d=m=>{let l=M("input",i,t.length,s),g=K("output",i,n.length,s),b;if(i===9){let $=(v,S,T="")=>`
          let outputIndices${S} = ${g.offsetToIndices(`outputOffset + ${S}u`)};
          let offset${S} = ${l.broadcastedIndicesToOffset(`outputIndices${S}`,g)};
          let index${S} = offset${S} / 4u;
          let component${S} = offset${S} % 4u;
          ${v}[${S}] = ${T}(${l.getByOffset(`index${S}`)}[component${S}]);
        `;b=`
        let outputOffset = global_idx * ${s};
        var data = vec4<u32>(0);
        ${$("data",0,"u32")}
        ${$("data",1,"u32")}
        ${$("data",2,"u32")}
        ${$("data",3,"u32")}
        ${g.setByOffset("global_idx","data")}
      }`}else b=`
        let outputIndices = ${g.offsetToIndices("global_idx")};
        let inputOffset = ${l.broadcastedIndicesToOffset("outputIndices",g)};
        ${g.setByOffset("global_idx",l.getByOffset("inputOffset"))}
      }`;return`
    ${m.registerUniform("vec_size","u32").declareVariables(l,g)}
    ${m.mainStart()}
    ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${b}`},p=[{type:12,data:o},...X(t,n)];return{name:"Expand",shaderCache:{hint:`${n.length}`,inputDependencies:["rank"]},getShaderSource:d,getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:p})}},sl=e=>{Mp(e.inputs),e.compute(Wp(e.inputs),{inputs:[0]})}});var Np,ll,dl=j(()=>{"use strict";me();Se();$e();ri();Np=e=>{let t=e[0].dataType,r=D.size(e[0].dims),n=D.size(e[1].dims),i=n%4===0,s=o=>{let d=M("x",t,[1],4),p=M("bias",t,[1],4),m=K("y",t,[1],4),l=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],g=$=>`
      let bias${$}_offset: u32 = (global_idx * 4 + ${$}) % uniforms.bias_size;
      let bias${$} = ${p.getByOffset(`bias${$}_offset / 4`)}[bias${$}_offset % 4];`,b=i?`
      let bias = ${p.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${g(0)}${g(1)}${g(2)}${g(3)}
      let bias = ${d.type.value}(bias0, bias1, bias2, bias3);`;return`${o.registerUniforms(l).declareVariables(d,p,m)}

    ${na(ft(t))}

    ${o.mainStart(cr)}
      ${o.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${d.getByOffset("global_idx")};
      ${b}
      let x_in = x + bias;
      ${m.setByOffset("global_idx",ia("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${i}`,inputDependencies:["type","type"]},getShaderSource:s,getRunData:o=>({outputs:[{dims:o[0].dims,dataType:o[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:n}],dispatchGroup:{x:Math.ceil(r/cr/4)}})}},ll=e=>{e.inputs.length<2||D.size(e.inputs[1].dims)===0?bu(e):e.compute(Np(e.inputs))}});var Vp,Gp,cl,pl,fl=j(()=>{"use strict";me();Se();Ye();$e();Vp=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Gp=(e,t)=>{let r=e[0].dims,n=e[1].dims,i=r.length,s=D.normalizeAxis(t.axis,i),o=r.slice(0);o.splice(s,1,...n);let d=r[s],p=e[0].dataType===9?4:1,m=Math.ceil(D.size(o)/p),l=[{type:12,data:m},{type:6,data:d},{type:12,data:s},...X(e[0].dims,e[1].dims,o)],g=b=>{let $=M("data",e[0].dataType,e[0].dims.length,p),v=M("inputIndices",e[1].dataType,e[1].dims.length),S=K("output",e[0].dataType,o.length,p),T=x=>{let O=n.length,A=`var indicesIndices${x}  = ${v.type.indices}(0);`;for(let P=0;P<O;P++)A+=`${O>1?`indicesIndices${x}[${P}]`:`indicesIndices${x}`} = ${o.length>1?`outputIndices${x}[uniforms.axis + ${P}]`:`outputIndices${x}`};`;A+=`
          var idx${x} = ${v.getByIndices(`indicesIndices${x}`)};
          if (idx${x} < 0) {
            idx${x} = idx${x} + uniforms.axisDimLimit;
          }
          var dataIndices${x} : ${$.type.indices};
        `;for(let P=0,N=0;P<i;P++)P===s?(A+=`${i>1?`dataIndices${x}[${P}]`:`dataIndices${x}`} = u32(idx${x});`,N+=O):(A+=`${i>1?`dataIndices${x}[${P}]`:`dataIndices${x}`} = ${o.length>1?`outputIndices${x}[${N}]`:`outputIndices${x}`};`,N++);return A},I;if(e[0].dataType===9){let x=(O,A,P="")=>`
          let outputIndices${A} = ${S.offsetToIndices(`outputOffset + ${A}u`)};
          ${T(A)};
          let offset${A} = ${$.indicesToOffset(`dataIndices${A}`)};
          let index${A} = offset${A} / 4u;
          let component${A} = offset${A} % 4u;
          ${O}[${A}] = ${P}(${$.getByOffset(`index${A}`)}[component${A}]);
        `;I=`
        let outputOffset = global_idx * ${p};
        var value = vec4<u32>(0);
        ${x("value",0,"u32")}
        ${x("value",1,"u32")}
        ${x("value",2,"u32")}
        ${x("value",3,"u32")}
        ${S.setByOffset("global_idx","value")}
      `}else I=`
      let outputIndices = ${S.offsetToIndices("global_idx")};
      ${T("")};
      let value = ${$.getByIndices("dataIndices")};
      ${S.setByOffset("global_idx","value")};
      `;return`
      ${b.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables($,v,S)}
      ${b.mainStart()}
        ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${I}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:l}),getShaderSource:g}},cl=e=>we({axis:e.axis}),pl=(e,t)=>{let r=e.inputs;Vp(r),e.compute(Gp(e.inputs,t))}});var Hp,Lp,ml,hl,gl=j(()=>{"use strict";me();Se();Ye();$e();Hp=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Lp=(e,t)=>{let r=e[0].dims,n=e[0].dataType,i=r.length,s=e[1].dims,o=e[1].dataType,d=D.normalizeAxis(t.axis,i),p=r[d],m=s.slice(0),l=D.size(m),g=M("input",n,i),b=M("indicesInput",o,s.length),$=K("output",n,m.length),v=[{type:12,data:l},{type:6,data:p},{type:12,data:d}];return v.push(...X(r,s,m)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:m,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:v}),getShaderSource:I=>`
      ${I.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(g,b,$)}
      ${I.mainStart()}
      ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${$.offsetToIndices("global_idx")};

      var idx = ${b.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${g.type.indices}(outputIndices);
      ${g.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${g.getByIndices("inputIndices")};

      ${$.setByOffset("global_idx","value")};
  }`}},ml=e=>we({axis:e.axis}),hl=(e,t)=>{let r=e.inputs;Hp(r),e.compute(Lp(e.inputs,t))}});var Fp,qp,yl,bl,wl=j(()=>{"use strict";me();Se();$e();Fp=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},qp=(e,t)=>{let r=e[0].dims.slice(),n=e[1].dims.slice(),[i,s,o]=jn.getShapeOfGemmResult(r,t.transA,n,t.transB,e.length===3?e[2].dims:void 0),d=[i,s];if(!d)throw new Error("Can't use gemm on the given tensors");let p=D.size(d),m=[{type:12,data:p},{type:12,data:i},{type:12,data:s},{type:12,data:o},{type:1,data:t.alpha},{type:1,data:t.beta}],l=["type","type"];e.length===3&&(m.push(...X(e[2].dims)),l.push("rank")),m.push(...X(d));let g=b=>{let $="";t.transA&&t.transB?$="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?$="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?$="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&($="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let v=t.alpha===1?"":"value *= uniforms.alpha;",S=M("a",e[0].dataType,e[0].dims),T=M("b",e[1].dataType,e[1].dims),I=S.type.value,x=null,O=[S,T];e.length===3&&(x=M("c",e[2].dataType,e[2].dims.length),O.push(x));let A=K("output",e[0].dataType,d.length);O.push(A);let P=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${b.registerUniforms(P).declareVariables(...O)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${I}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${$}
    }

    ${v}
    ${(()=>x!=null?`let cOffset = ${x.broadcastedIndicesToOffset("vec2(m, n)",A)}; value += ${I}(uniforms.beta) * ${x.getByOffset("cOffset")};`:"")()}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m}),getShaderSource:g}},yl=e=>{let t=e.transA,r=e.transB,n=e.alpha,i=e.beta;return{transA:t,transB:r,alpha:n,beta:i,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},bl=(e,t)=>{Fp(e.inputs),e.compute(qp(e.inputs,t))}});var jp,Kp,Yp,vl,$l=j(()=>{"use strict";me();Se();$e();jp=(e,t)=>{let r=e[0].dims,n=r,i=2,s=D.sizeToDimension(r,i),o=D.sizeFromDimension(r,i),d=Ve(o),p=o/d,m=[r[0],r[1],p],l=["rank","type","type"],g=[{type:12,data:o},{type:12,data:p}];g.push(...X(m,m));let b=$=>{let v=M("x",e[0].dataType,m.length,d),S=M("scale",e[1].dataType,e[1].dims),T=M("bias",e[2].dataType,e[2].dims),I=K("output",e[0].dataType,m.length,d),x=[v,S,T,I],O=v.type.value,A=d===1?"f32":`vec${d}<f32>`,P=64,N=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`
  var<workgroup> meanShared : f32;
  var<workgroup> squaredNormShared : f32;
  var<workgroup> workgroupShared : array<${A}, ${P}>;
  const workgroupSize = ${P}u;
  ${$.registerUniforms(N).declareVariables(...x)}
  ${$.mainStart(P)}
    let norm = global_idx / workgroupSize;
    let batch = norm / uniforms.x_shape[1];
    let channel = norm % uniforms.x_shape[1];
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial = ${A}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      initial = initial + ${A}(${v.get("batch","channel","h")});
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = ${mt("workgroupShared[0]",d)} / f32(uniforms.normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = ${A}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let deviation =  ${A}(${v.get("batch","channel","h")}) - ${A}(meanShared);
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = ${mt("workgroupShared[0]",d)};
    }
    workgroupBarrier();

    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));
    let channelScale = invStdDev * f32(${S.getByOffset("channel")});
    let channelShift = f32(${T.getByOffset("channel")}) - meanShared * channelScale;
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let value = ${v.get("batch","channel","h")} * ${O}(${A}(channelScale)) + ${O}(${A}(channelShift));
      ${I.set("batch","channel","h","value")};
    }
  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${d}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:s},programUniforms:g}),getShaderSource:b}},Kp=(e,t,r,n,i,s,o,d)=>{let p=Ve(o),m=64,l=p===1?"vec2f":`mat2x${p}f`,g=p===1?"f32":`vec${p}f`,b=(N,V)=>`${l}(${N}, ${V})`,$=i*o/p,v=Math.ceil(s/m),S=["type"],T=[{type:12,data:v},{type:12,data:s},{type:12,data:Math.floor(o/p)},{type:12,data:Math.floor(s*o/p)}],I=N=>{let V=M("input",t.dataType,t.dims,p);return`
  ${N.declareVariables(V)}
  @group(0) @binding(1) var<storage, read_write> output : array<${l}>;
  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};
  @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  ${N.mainStart(m)}
    let currentImageNumber = global_idx / ${m} / uniforms.C;
    let currentChannelNumber = (global_idx / ${m}) % uniforms.C;
    let wgOffset = local_id.x * uniforms.wg_size;
    if (wgOffset >= uniforms.H) {
        return;
    }
    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);

    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;
    var sum = ${et("f32",p)};
    var squaredSum = ${et("f32",p)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${g}(input[offset + i * uniforms.C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${b("sum","squaredSum")};
  }`},x=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${p}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:[i,o,m,2],dataType:1}],dispatchGroup:{x:i*o/p},programUniforms:T}),getShaderSource:I},{inputs:[t],outputs:[-1]})[0],O=[{type:12,data:$},{type:12,data:s},{type:12,data:Math.floor(o/p)},{type:12,data:Math.floor(m*o/p)}],A=["type","type","type"],P=N=>{let V=M("scale",r.dataType,r.dims,p),G=M("bias",n.dataType,n.dims,p);return`
  @group(0) @binding(0) var<storage, read> input : array<${l}>;
  @group(0) @binding(1) var<storage, read> scale : array<${V.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${G.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${l}>;
  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};
  @group(0) @binding(4) var<uniform> uniforms: Uniforms;

  ${N.mainStart()}
    ${N.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}
    let currentImageNumber = global_idx / uniforms.C;
    let currentChannelNumber = global_idx % uniforms.C;

    let offset = currentImageNumber * uniforms.image_size;
    var sum = ${et("f32",p)};
    var squaredSum = ${et("f32",p)};
    for (var i: u32 = 0; i < min(${m}, uniforms.H); i++) {
        let value = input[offset + i + currentChannelNumber * ${m}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(uniforms.H);
    squaredSum = squaredSum / f32(uniforms.H);
    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${d}));
    let channelScale = invStdDev * ${g}(scale[currentChannelNumber]);
    let channelShift = ${g}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${b("channelScale","channelShift")};
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${p};${d}`,inputDependencies:A},getRunData:()=>({outputs:[{dims:[i,o,2],dataType:1}],dispatchGroup:{x:Math.ceil($/64)},programUniforms:O}),getShaderSource:P},{inputs:[x,r,n],outputs:[-1]})[0]},Yp=(e,t,r)=>{let n=t[0].dims,i=n,s=n[0],o=n[n.length-1],d=D.sizeFromDimension(n,1)/o,p=Ve(o),m=D.size(i)/p,l=[{type:12,data:d},{type:12,data:Math.floor(o/p)}],g=["type","type"],b=Kp(e,t[0],t[1],t[2],s,d,o,r.epsilon),$=v=>{let S=De(t[0].dataType),T=p===1?"vec2f":`mat2x${p}f`,I=p===1?S:`vec${p}<${S}>`,x=M("input",t[0].dataType,t[0].dims,p),O=K("output",t[0].dataType,i,p);return`
  @group(0) @binding(0) var<storage, read> input : array<${x.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${T}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${O.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${v.mainStart()}
    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);
    let currentChannelNumber = global_idx % uniforms.C;

    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${I}(scale[0]), ${I}(scale[1]));
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${p}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:i,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:l}),getShaderSource:$},{inputs:[t[0],b]})},vl=(e,t)=>{t.format==="NHWC"?Yp(e,e.inputs,t):e.compute(jp(e.inputs,t))}});var Xp,Zp,_l,Sl=j(()=>{"use strict";me();Se();$e();Xp=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Zp=(e,t,r)=>{let n=e[0].dims,i=e[1],s=e[2],o=n,d=D.normalizeAxis(t.axis,n.length),p=D.sizeToDimension(n,d),m=D.sizeFromDimension(n,d),l=D.size(i.dims),g=s?D.size(s.dims):0;if(l!==m||s&&g!==m)throw new Error(`Size of X.shape()[axis:] == ${m}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${l} and bias size of ${g}`);let b=[];for(let A=0;A<n.length;++A)A<d?b.push(n[A]):b.push(1);let $=Ve(m),v=["type","type"],S=[{type:12,data:p},{type:1,data:m},{type:12,data:Math.floor(m/$)},{type:1,data:t.epsilon}];s&&v.push("type");let T=r>1,I=r>2,x=A=>{let P=De(e[0].dataType),N=[M("x",e[0].dataType,e[0].dims,$),M("scale",i.dataType,i.dims,$)];s&&N.push(M("bias",s.dataType,s.dims,$)),N.push(K("output",e[0].dataType,o,$)),T&&N.push(K("mean_data_output",1,b)),I&&N.push(K("inv_std_output",1,b));let V=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${A.registerUniforms(V).declareVariables(...N)}
  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${et("f32",$)};
    var mean_square_vector = ${et("f32",$)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${At(P,$,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${mt("mean_vector",$)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${mt("mean_square_vector",$)} / uniforms.norm_size - mean * mean + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${At(P,$,"x[j + offset]")};
      let f32scale = ${At(P,$,"scale[j]")};
      output[j + offset] = ${N[0].type.value}((f32input - mean) * inv_std_dev * f32scale
        ${s?`+ ${At(P,$,"bias[j]")}`:""}
      );
    }

    ${T?"mean_data_output[global_idx] = mean":""};
    ${I?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},O=[{dims:o,dataType:e[0].dataType}];return T&&O.push({dims:b,dataType:1}),I&&O.push({dims:b,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${$};${r}`,inputDependencies:v},getRunData:()=>({outputs:O,dispatchGroup:{x:Math.ceil(p/64)},programUniforms:S}),getShaderSource:x}},_l=(e,t)=>{Xp(e.inputs),e.compute(Zp(e.inputs,t,e.outputCount))}});var Qp,Jp,xl,Cl,Il=j(()=>{"use strict";me();Se();Ye();$e();Qp=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],n=r.dims.length;if(r.dims[n-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let i=Math.floor((t.k+t.blockSize-1)/t.blockSize),s=t.blockSize/8*t.bits,o=e[1];if(!D.areEqual(o.dims,[t.n,i,s]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let p=e[2].dims;if(D.size(p)!==t.n*i)throw new Error("scales input size error.");if(e.length===4){let l=e[3].dims,g=t.bits>4?t.n*i:t.n*Math.floor((i+1)/2);if(D.size(l)!==g)throw new Error("zeroPoints input size error.")}},Jp=(e,t)=>{let r=e[0].dims,n=r.length,i=r.slice(0,n-1).concat(t.n),s=r[n-2],d=t.blockSize/8*t.bits/4,p=Ve(s),m=Ve(t.n),l=Ve(t.k),g=Ve(d),b=D.size(i)/m/p,$=[{type:12,data:b},{type:12,data:t.k},{type:12,data:t.n},{type:12,data:t.accuracyLevel},{type:12,data:t.bits},{type:12,data:t.blockSize}],v=r.slice();v.splice(-1,1,t.k/l);let S=D.convertShape(e[1].dims).slice();S.splice(-1,1,d/g),$.push(...X(v)),$.push(...X(S)),$.push(...X(e[2].dims)),e.length===4&&$.push(...X(D.convertShape(e[3].dims)));let T=i.slice();T.splice(-1,1,t.n/m),$.push(...X(T));let I=x=>{let O=M("a",e[0].dataType,v.length,l),A=M("b",12,S.length,g),P=M("scales",e[2].dataType,e[2].dims.length),N=[O,A,P],V=e.length===4?M("zero_points",12,e[3].dims.length):void 0;V&&N.push(V);let G=K("output",e[0].dataType,i.length,m),ie=[{name:"output_size",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"accuracy_level",type:"u32"},{name:"bits",type:"u32"},{name:"block_size",type:"u32"}],Z=Math.floor((t.k+t.blockSize-1)/t.blockSize),U=De(e[0].dataType),re=(()=>{switch(l){case 1:return`array<${U}, 8>`;case 2:return`mat4x2<${U}>`;case 4:return`mat2x4<${U}>`;default:throw new Error(`${l}-component is not supported.`)}})(),Be=`
        fn dequantize(quantized: ${re}, zero_point: ${U}, scale: ${U}) -> ${re} {
          ${(()=>l===1?`var dequantized = ${re}(${Array.from({length:8},(te,Me)=>`(quantized[${Me}] - zero_point) * scale`).join(", ")});
              return dequantized;`:`var zero_points: ${re} = ${re}(${Array(8).fill("zero_point").join(",")});
              return (quantized - zero_points) * scale;`)()}
        }`,Oe=`
        fn ortUnpack8x4snorm(value: u32) -> ${re} {
          var quantized: ${re};
          var offset: u32 = 0;
          let count: u32 = 4;
          for (var i: u32 = 0; i < 8u; i++) {
            var result = ${U}(extractBits(value, offset, count));
            ${(()=>{switch(l){case 1:return"quantized[i] = result;";case 2:return"quantized[i / 2][i % 2] = result;";case 4:return"quantized[i / 4][i % 4] = result;";default:throw new Error(`${l}-component is not supported.`)}})()}
            offset += count;
          }
          return quantized;
        }`,Ie=V?`
          zero_point_offset += 4;
          if (zero_point_offset == 32) {
            zero_point_offset = 0;
            zero_point_index++;
            zero_point_word = ${V.getByOffset("zero_point_index")};
          }`:"";return`
        ${Be};
        ${Oe};
        ${x.registerUniforms(ie).declareVariables(...N,G)}
        ${x.mainStart()}
          ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var output_values: array<${G.type.value}, ${p}>;
          var output_indices = ${G.offsetToIndices("global_idx")};
          var n = ${G.indicesGet("output_indices",n-1)};
          var m = ${G.indicesGet("output_indices",n-2)};
          var a_indices: ${O.type.indices} = output_indices;
          // Two zero points are packed into one byte because uniforms.bits <= 4.
          // zero_point_offset is either 0 or 4. It is bit offset within one byte.
          // TODO support zero_point_offset for bits > 4
          ${V?`
          var zero_point_index: u32 = n * ${m} * ((${Z} + 1) / 2) / 4;
          var zero_point_word: u32 = ${V.getByOffset("zero_point_index")};
          var zero_point_offset: u32 = 0;`:""}
          var scale_index = n * ${Z*m};
          var b_indices: ${A.type.indices};
          for (var c: u32 = 0; c < ${m}; c++) {
            ${A.indicesSet("b_indices","0",`n * ${m} + c`)};
            var block_offset: u32 = 0;
            for (var block: u32 = 0; block < ${Z}; block++) {
              // The scale and zero points are computed per block.
              let scale = ${P.getByOffset("scale_index")};
              // The default zero point is 8 for unsigned 4-bit quantization.
              let zero_point = ${U}(${V?"extractBits(zero_point_word, zero_point_offset, 4)":8});
              ${A.indicesSet("b_indices","1","block")};
              var word_offset: u32 = block_offset;
              for (var word: u32 = 0; word < ${d}; word += ${g}) {
                ${A.indicesSet("b_indices","2","word")};
                let b_data = ${A.getByIndices("b_indices")};
                for (var i: u32 = 0; i < ${g}; i++) {
                  let b_value = ${g===1?"b_data":"b_data[word + i]"};
                  let b_quantized_values: ${re} = ortUnpack8x4snorm(b_value);
                  let b_dequantized_values = dequantize(b_quantized_values, zero_point, scale);
                  // Number of B elements per 32-bit word is 32/bits = 32/4 = 8
                  var offset: u32 = word_offset;
                  for (var j: u32 = 0; j < 8/${l}; j++) {
                    ${O.indicesSet("a_indices",n-1,`offset/${l}`)};
                    for (var k: u32 = 0; k < ${p}u; k++) {
                      ${O.indicesSet("a_indices",n-2,`m * ${p} + k`)};
                      let a_data = ${O.getByIndices("a_indices")};
                      output_values[k]${m>1?"[c]":""} += ${l===1?"a_data * b_dequantized_values[j]":"dot(a_data, b_dequantized_values[j])"};
                    }
                    offset += ${l};
                  }
                  word_offset += 8;
                }
              }
              scale_index++;
              ${Ie}
              block_offset += uniforms.block_size;
            }
            // Drop the trailing 4 bits if the zero_poit_offset is not a byte boundary to align with the next byte.
            ${V?`if (zero_point_offset % 8 > 0) {
                ${Ie}
              }`:""}
            }
            for (var k: u32 = 0u; k < ${p}u; k++) {
              ${G.indicesSet("output_indices",n-2,`${p+" * m + k"}`)};
              ${G.setByIndices("output_indices","output_values[k]")}
            }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${t.cacheKey};${e.length}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:$}),getShaderSource:I}},xl=(e,t)=>{Qp(e.inputs,t),e.compute(Jp(e.inputs,t))},Cl=e=>we(e)});var ef,Tl,Al,tf,ya,El,Ol=j(()=>{"use strict";me();Se();Ye();Fn();ra();$e();Ar();ef=(e,t)=>{let r=e[0],n=e[1],i=e[2],s=e[3],o=e[4],d=e[5],p=e[6],m=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let l=!1,g=r.dims[0],b=r.dims[1],$=r.dims.length===3?l?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],v=b,S=0,T=0,I=Math.floor($/t.numHeads);if(p&&m){if(p.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(m.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');S=p.dims[2],T=p.dims[2]}else if(p||m)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let x;if(n){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');x=2,v=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==I)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(i)throw new Error('Expect "value" be none when "key" has packed kv format.');x=5,v=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==I)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');x=0,v=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');x=3}if(s){if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(i&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let O=0;if(o){O=8;let G=o.dims;throw G.length===1?G[0]===g?O=1:G[0]===3*g+2&&(O=3):G.length===2&&G[0]===g&&G[1]===v&&(O=5),O===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let A=!1,P=$;if(i){if(i.dims.length!==3&&i.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==i.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(i.dims.length===3){if(v!==i.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');P=i.dims[2]}else{if(v!==i.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');P=i.dims[1]*i.dims[3],A=!0}}let N=S+v,V=!1;if(o)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(p)throw new Error("pastKey is not supported");if(m)throw new Error("pastValue is not supported");return{batchSize:g,sequenceLength:b,pastSequenceLength:S,kvSequenceLength:v,totalSequenceLength:N,maxSequenceLength:T,inputHiddenSize:0,hiddenSize:$,vHiddenSize:P,headSize:I,vHeadSize:Math.floor(P/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:O,scale:t.scale,broadcastResPosBias:V,passPastInKv:A,qkvFormat:x}},Tl=e=>we({...e}),Al=we({perm:[0,2,1,3]}),tf=(e,t,r,n,i,s,o)=>{let d=[n,i,s],p=D.size(d),m=[{type:12,data:p},{type:12,data:o},{type:12,data:s}],l=g=>{let b=K("qkv_with_bias",t.dataType,d),$=M("qkv",t.dataType,d),v=M("bias",r.dataType,d),S=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${g.registerUniforms(S).declareVariables($,v,b)}
  ${g.mainStart()}
    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m}),getShaderSource:l},{inputs:[t,r],outputs:[-1]})[0]},ya=(e,t,r,n,i,s,o,d)=>{let p=s;if(o){if(n===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return p=tf(e,s,o,t,n,r*i,d),p=p.reshape([t,n,r,i]),e.compute(St(p,Al.perm),{inputs:[p],outputs:[-1]})[0]}else return s.dims.length===3&&(p=s.reshape([t,n,r,i])),e.compute(St(p,Al.perm),{inputs:[p],outputs:[-1]})[0]},El=(e,t)=>{let r=ef(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let n=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,i=ya(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(n)return Jn(e,i,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=ya(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),o=ya(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Jn(e,i,s,o,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var rf,nf,af,of,sf,uf,lf,df,kl,Pl=j(()=>{"use strict";me();Se();$e();rf=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},nf=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
            k = i32(${e.indicesGet("indices",i)}) - ${se("uniforms.pads",i,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${se("uniforms.x_shape",i,t)})) {
              break;
            }
            offset += k * i32(${se("uniforms.x_strides",i,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${n}
            value = x[offset];
          }
      `},af=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
                k = i32(${e.indicesGet("indices",i)}) - ${se("uniforms.pads",i,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${se("uniforms.x_shape",i,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${se("uniforms.x_shape",i,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${se("uniforms.x_strides",i,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},of=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
                k = i32(${e.indicesGet("indices",i)}) - ${se("uniforms.pads",i,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${se("uniforms.x_shape",i,t)})) {
                  k = i32(${se("uniforms.x_shape",i,t)}) - 1;
                }
                offset += k * i32(${se("uniforms.x_strides",i,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},sf=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
                k = i32(${e.indicesGet("indices",i)}) - ${se("uniforms.pads",i,r)};
                if (k < 0)  {
                  k += i32(${se("uniforms.x_shape",i,t)}]);
                }
                if (k >= i32(${se("uniforms.x_shape",i,t)})) {
                  k -= i32(${se("uniforms.x_shape",i,t)});
                }
                offset += k * i32(${se("uniforms.x_strides",i,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},uf=(e,t,r)=>{switch(r.mode){case 0:return nf(e,t,r.pads.length);case 1:return af(e,t,r.pads.length);case 2:return of(e,t,r.pads.length);case 3:return sf(e,t,r.pads.length);default:throw new Error("Invalid mode")}},lf=(e,t)=>{let r=D.padShape(e[0].dims.slice(),t.pads),n=e[0].dims,i=D.size(r),s=[{type:12,data:i},{type:6,data:t.pads}];t.mode===0&&s.push({type:e[0].dataType,data:t.value}),s.push(...X(e[0].dims,r));let o=["rank"],d=p=>{let m=K("output",e[0].dataType,r.length),l=M("x",e[0].dataType,n.length),g=l.type.value,b=uf(m,n.length,t),$=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&$.push({name:"constant_value",type:g}),`
            ${p.registerUniforms($).declareVariables(l,m)}
            ${p.mainStart()}
            ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${m.offsetToIndices("global_idx")};

            var value = ${g}(0);
            ${b}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:o},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(D.size(r)/64)},programUniforms:s}),getShaderSource:d}},df=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),n=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,i=e[0].dims.length,s=new Int32Array(2*i).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let p=0;p<d.length;p++)s[Number(d[p])]=Number(r[p]),s[Number(d[p])+i]=Number(r[p+d.length])}else r.forEach((d,p)=>s[Number(p)]=Number(d));let o=[];return s.forEach(d=>o.push(d)),{mode:t.mode,value:n,pads:o}}else return t},kl=(e,t)=>{rf(e.inputs);let r=df(e.inputs,t);e.compute(lf(e.inputs,r),{inputs:[0]})}});var di,Rl,zl,Bl,Dl,cf,pf,Ml,Ul,Wl,Nl,Vl,Gl,Hl,Ll,Fl,ql,jl,Kl,Yl=j(()=>{"use strict";_t();me();Se();$e();di=e=>{if(Ee.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},Rl=(e,t,r)=>{let n=t.format==="NHWC",i=e.dims.slice();n&&i.splice(1,0,i.pop());let s=Object.hasOwnProperty.call(t,"dilations"),o=t.kernelShape.slice(),d=t.strides.slice(),p=s?t.dilations.slice():[],m=t.pads.slice();dr.adjustPoolAttributes(r,i,o,d,p,m);let l=dr.computePoolOutputShape(r,i,d,p,o,m,t.autoPad),g=Object.assign({},t);s?Object.assign(g,{kernelShape:o,strides:d,pads:m,dilations:p,cacheKey:t.cacheKey}):Object.assign(g,{kernelShape:o,strides:d,pads:m,cacheKey:t.cacheKey});let b=l.slice();return b.push(b.splice(1,1)[0]),[g,n?b:l]},zl=(e,t)=>{let r=t.format==="NHWC",n=D.size(e),i=D.size(t.kernelShape),s=[{type:12,data:n},{type:12,data:i}],o=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let d=t.kernelShape[t.kernelShape.length-1],p=t.strides[t.strides.length-1],m=t.pads[t.pads.length/2-1],l=t.pads[t.pads.length-1],g=!!(m+l);s.push({type:12,data:d},{type:12,data:p},{type:12,data:m},{type:12,data:l}),o.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let b=!1;if(t.kernelShape.length===2){let $=t.kernelShape[t.kernelShape.length-2],v=t.strides[t.strides.length-2],S=t.pads[t.pads.length/2-2],T=t.pads[t.pads.length-2];b=!!(S+T),s.push({type:12,data:$},{type:12,data:v},{type:12,data:S},{type:12,data:T}),o.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[s,o,!0,g,b]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let d=D.computeStrides(t.kernelShape);s.push({type:12,data:d},{type:12,data:t.pads},{type:12,data:t.strides}),o.push({name:"kernelStrides",type:"u32",length:d.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let p=t.pads.reduce((m,l)=>m+l);return[s,o,!!p,!1,!1]}},Bl=(e,t,r,n,i,s,o,d,p,m,l,g)=>{let b=i.format==="NHWC",$=t.type.value,v=K("output",t.type.tensor,n);if(i.kernelShape.length<=2){let S="",T="",I="",x=r-(b?2:1);if(l?S=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${x}] = indices[${x}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${x}] < 0 || xIndices[${x}]
                      >= uniforms.x_shape[${x}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`:S=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${x}] = indices[${x}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`,i.kernelShape.length===2){let A=r-(b?3:2);g?T=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${A}] = indices[${A}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${A}] < 0 || xIndices[${A}] >= uniforms.x_shape[${A}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:T=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${A}] = indices[${A}] * uniforms.sh - uniforms.phStart + j;
                `,I=`
              }
            `}return`
            ${e.registerUniforms(p).declareVariables(t,v)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${v.offsetToIndices("global_idx")};
              var xIndices = ${v.offsetToIndices("global_idx")};

              var value = ${$}(${d});
              var pad = 0;
              ${T}
              ${S}
              ${I}
              ${o}

              output[global_idx] = value;
            }`}else{if(b)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let S=i.kernelShape.length,T=i.pads.length,I="";return m?I=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${s}
              }`:I=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${s}
            `,`
            ${e.registerUniforms(p).declareVariables(t,v)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${v.offsetToIndices("global_idx")};
              var xIndices = ${v.offsetToIndices("global_idx")};

              var offsets: array<u32, ${S}>;

              var value = ${$}(${d});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${S-1}u; j++) {
                  offsets[j] = offset / ${se("uniforms.kernelStrides","j",S)};
                  offset -= offsets[j] * ${se("uniforms.kernelStrides","j",S)};
                }
                offsets[${S-1}] = offset;

                isPad = false;
                for (var j = ${r-S}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${se("uniforms.strides",`j - ${r-S}u`,S)}
                    + offsets[j - ${r-S}u] - ${se("uniforms.pads","j - 2u",T)};
                  ${I}
              }
              ${o}

              output[global_idx] = value;
            }`}},Dl=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,cf=e=>`${Dl(e)};${e.countIncludePad}`,pf=e=>`${Dl(e)};${e.storageOrder};${e.dilations}`,Ml=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Ul=(e,t,r,n)=>{let[i,s]=Rl(t,n,r),o=M("x",t.dataType,t.dims.length),d=o.type.value,p="value += x_val;",m="";i.countIncludePad?m+=`value /= ${d}(uniforms.kernelSize);`:m+=`value /= ${d}(i32(uniforms.kernelSize) - pad);`;let[l,g,b,$,v]=zl(s,i);l.push(...X(t.dims,s));let S=["rank"];return{name:e,shaderCache:{hint:`${n.cacheKey};${b};${$};${v}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(s)/64)},programUniforms:l}),getShaderSource:T=>Bl(T,o,t.dims.length,s.length,i,p,m,0,g,b,$,v)}},Wl=e=>{let t=e.count_include_pad!==0,r=Ml(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let n={countIncludePad:t,...r,cacheKey:""};return{...n,cacheKey:cf(n)}},Nl=(e,t)=>{di(e.inputs),e.compute(Ul("AveragePool",e.inputs[0],!1,t))},Vl={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Gl=e=>{let t=e.format;return{format:t,...Vl,cacheKey:t}},Hl=(e,t)=>{di(e.inputs),e.compute(Ul("GlobalAveragePool",e.inputs[0],!0,t))},Ll=(e,t,r,n)=>{let[i,s]=Rl(t,n,r),o=`
      value = max(x_val, value);
    `,d="",p=M("x",t.dataType,t.dims.length),m=["rank"],[l,g,b,$,v]=zl(s,i);return l.push(...X(t.dims,s)),{name:e,shaderCache:{hint:`${n.cacheKey};${b};${$};${v}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(D.size(s)/64)},programUniforms:l}),getShaderSource:S=>Bl(S,p,t.dims.length,s.length,i,o,d,t.dataType===10?-65504:-1e5,g,b,$,v)}},Fl=(e,t)=>{di(e.inputs),e.compute(Ll("MaxPool",e.inputs[0],!1,t))},ql=e=>{let t=e.storage_order,r=e.dilations,n=Ml(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let i={storageOrder:t,dilations:r,...n,cacheKey:""};return{...i,cacheKey:pf(i)}},jl=e=>{let t=e.format;return{format:t,...Vl,cacheKey:t}},Kl=(e,t)=>{di(e.inputs),e.compute(Ll("GlobalMaxPool",e.inputs[0],!0,t))}});var mf,hf,Xl,Zl=j(()=>{"use strict";_t();me();$e();mf=(e,t,r)=>{let n=e===t,i=e<t&&r<0,s=e>t&&r>0;if(n||i||s)throw new Error("Range these inputs' contents are invalid.")},hf=(e,t,r,n)=>{let i=Math.abs(Math.ceil((t-e)/r)),s=[i],o=i,d=[{type:12,data:o},{type:n,data:e},{type:n,data:r},...X(s)],p=m=>{let l=K("output",n,s.length),g=l.type.value,b=[{name:"outputSize",type:"u32"},{name:"start",type:g},{name:"delta",type:g}];return`
        ${m.registerUniforms(b).declareVariables(l)}
        ${m.mainStart()}
        ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${g}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${n}`},getShaderSource:p,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:d})}},Xl=e=>{let t=0,r=0,n=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],n=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],n=e.inputs[2].getFloat32Array()[0]),Ee.webgpu.validateInputContent&&mf(t,r,n),e.compute(hf(t,r,n,e.inputs[0].dataType),{inputs:[]})}});var gf,yf,bf,wf,vf,$f,_f,Sf,xf,Cf,If,Ql,Af,Tf,Ef,Of,kf,Jl,ed,td=j(()=>{"use strict";me();Se();Ye();$e();gf=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},yf=(e,t,r)=>{t.every(i=>i>=0&&i<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let n=new Array(r).fill(1);return t.forEach((i,s)=>n[i]=e[s]),n},bf=(e,t,r,n,i,s)=>{let[o,d,p]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],m=e[0].dims.length;if(o>0&&e.length>o&&e[o].dims.length>0)e[o].getFloat32Array().forEach(l=>s.push(l));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(l=>n.push(l)),n.length!==0&&n.length!==m&&r>=18&&n.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");gf(n,t),t.axes.length>0&&yf(n,t.axes,m).forEach((l,g)=>n[g]=l)}if(p>0&&e.length>p&&(e[p].getBigInt64Array().forEach(l=>i.push(Number(l))),i.length!==m||r>=18&&i.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(n.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(i.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<"u"&&typeof i<"u"&&n.length>0&&i.length>m)throw new Error("Resize requires only of scales or sizes to be specified")},wf=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",vf=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",$f=(e,t,r)=>{let n=new Array(r).fill(0).concat(new Array(r).fill(1)),i=e.length===0?n:e.slice();return t.length>0?(t.forEach((s,o)=>{n[s]=i[o],n[o+r]=i[t.length+o]}),n):i},_f=(e,t,r,n)=>{let i=[];if(r.length>0)if(n.length>0){if(e.forEach(s=>i.push(s)),Math.max(...n)>e.length)throw new Error("axes is out of bound");n.forEach((s,o)=>i[s]=r[o])}else r.forEach(s=>i.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");i=e.map((s,o)=>Math.round(s*t[o]))}return i},Sf=(e,t,r)=>{let n=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let i=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=n),r.axes.forEach(s=>i[s]=Math.round(e[s]*t[s]))):(t.fill(n,0,t.length),i.forEach((s,o)=>i[o]=Math.round(s*t[o]))),i},xf=(e,t,r,n,i)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${se("uniforms.scales","i",n)};
        var roi_low = ${se("uniforms.roi","i",i)};
        var roi_hi = ${se("uniforms.roi",`i + ${t.length}`,i)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${se("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${se("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,Cf=(e,t,r,n,i,s,o)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${se("uniforms.scales","i",i)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${se("uniforms.roi","i",s)};
          var roi_hi = ${se("uniforms.roi",`i + ${r.length}`,s)};
          var input_shape_i = ${se("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${se("uniforms.output_shape","i",n.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${o} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,If=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${se("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,Ql=(e,t,r,n)=>e.rank>n?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",Af=(e,t,r,n,i)=>{let[o,d,p,m]=r.length===2?[-1,0,1,-1]:[0,2,3,1],l=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${l} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",d,`max(0, min(row, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",p,`max(0, min(col, ${r[p]} - 1))`)};
      ${Ql(e,m,o,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${l} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${l} = originalIndices[${d}];
      var col:${l} = originalIndices[${p}];
      ${n?`if (row < 0 || row > (${r[d]} - 1) || col < 0 || col > (${r[p]} - 1)) {
        return ${i};
      }`:""};
      row = max(0, min(row, ${r[d]} - 1));
      col = max(0, min(col, ${r[p]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${m}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${o}])`:"0"};
      var x11: ${l} = getInputValue(batch, channel, row1, col1);
      var x12: ${l} = getInputValue(batch, channel, row1, col2);
      var x21: ${l} = getInputValue(batch, channel, row2, col1);
      var x22: ${l} = getInputValue(batch, channel, row2, col2);
      var dx1: ${l} = abs(row - ${l}(row1));
      var dx2: ${l} = abs(${l}(row2) - row);
      var dy1: ${l} = abs(col - ${l}(col1));
      var dy2: ${l} = abs(${l}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Tf=(e,t,r,n,i,s,o,d,p,m)=>{let l=r.length===2,g=!0,[b,$]=l?[0,1]:g?[2,3]:[1,2],v=e.type.value,S=T=>{let I=T===b?"row":"col";return`
      fn ${I}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${v} {
        var output_index = ${t.indicesGet("output_indices",T)};
        var originalIdx: ${v} = getOriginalCoordinateFromResizedCoordinate(output_index, ${i[T]},
        ${n[T]}, ${r[T]}, ${s[T]}, ${s[T]} + ${r.length});
        var fractOriginalIdx: ${v} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${d} && (originalIdx < 0 || originalIdx > (${r[T]} - 1))) {
          return ${p};
        }
        var data: array<${v}, 4> = array<${v}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${I}: ${v} = originalIdx + ${v}(i);
          if (${I} < 0 || ${I} >= ${r[T]}) {
            ${(()=>m?`coefs[i + 1] = 0.0;
                        continue;`:d?`return ${p};`:`${I} = max(0, min(${I}, ${r[T]} - 1));`)()};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",T,`u32(${I})`)};
          data[i + 1] = ${T===b?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${S(b)};
    ${S($)};
  fn getCubicInterpolationCoefs(s: ${v}) -> array<${v}, 4> {
    var absS = abs(s);
    var coeffs: array<${v}, 4> = array<${v}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${v} = 1.0 - absS;
    var twoMinusAbsS: ${v} = 2.0 - absS;
    var onePlusAbsS: ${v} = 1.0 + absS;
    coeffs[0] = ((${o} * onePlusAbsS - 5 * ${o}) * onePlusAbsS + 8 * ${o}) * onePlusAbsS - 4 * ${o};
    coeffs[1] = ((${o} + 2) * absS - (${o} + 3)) * absS * absS + 1;
    coeffs[2] = ((${o} + 2) * oneMinusAbsS - (${o} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${o} * twoMinusAbsS - 5 * ${o}) * twoMinusAbsS + 8 * ${o}) * twoMinusAbsS - 4 * ${o};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${v}, 4>, coefs: array<${v}, 4>) -> ${v} {
    var coefsSum: ${v} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${v} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},Ef=(e,t,r,n,i)=>{let[o,d,p,m,l]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],g=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${g} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",d,`max(0, min(depth, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",p,`max(0, min(height, ${r[p]} - 1))`)};
      ${e.indicesSet("input_indices",m,`max(0, min(width, ${r[m]} - 1))`)};
      ${Ql(e,l,o,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${g} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${g} = originalIndices[${d}];
      var height:${g} = originalIndices[${p}];
      var width:${g} = originalIndices[${m}];
      ${n?`if (depth < 0 || depth > (${r[d]} - 1) || height < 0 || height > (${r[p]} - 1) || width < 0 || (width > ${r[m]} - 1)) {
      return ${i};
        }`:""};

    depth = max(0, min(depth, ${r[d]} - 1));
      height = max(0, min(height, ${r[p]} - 1));
      width = max(0, min(width, ${r[m]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${l}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${o}])`:"0"};

      var x111: ${g} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${g} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${g} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${g} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${g} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${g} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${g} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${g} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${g} = abs(depth - ${g}(depth1));
      var dx2: ${g} = abs(${g}(depth2) - depth);
      var dy1: ${g} = abs(height - ${g}(height1));
      var dy2: ${g} = abs(${g}(height2) - height);
      var dz1: ${g} = abs(width - ${g}(width1));
      var dz2: ${g} = abs(${g}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},Of=(e,t,r,n,i,s)=>{let o=e.dims,d=$f(s,t.axes,o.length),p=_f(o,n,i,t.axes),m=n.slice();n.length===0&&(m=o.map((x,O)=>x===0?1:p[O]/x),t.keepAspectRatioPolicy!=="stretch"&&(p=Sf(o,m,t)));let l=K("output",e.dataType,p.length),g=M("input",e.dataType,o.length),b=D.size(p),$=o.length===p.length&&o.every((x,O)=>x===p[O]),v=t.coordinateTransformMode==="tf_crop_and_resize",S=t.extrapolationValue,T=g.type.value,I=x=>`
      ${$?"":`
      ${wf(t.coordinateTransformMode,T)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${If(g,o)};
              ${vf(t.nearestMode,r,T)};
              ${Cf(g,l,o,p,m.length,d.length,v)};
              `;case"linear":return`
              ${xf(l,o,p,m.length,d.length)};
              ${(()=>{if(o.length===2||o.length===4)return`${Af(g,l,o,v,S)}`;if(o.length===3||o.length===5)return`${Ef(g,l,o,v,S)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(o.length===2||o.length===4)return`${Tf(g,l,o,p,m,d,t.cubicCoeffA,v,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${x.registerUniform("output_size","u32").registerUniform("scales","f32",m.length).registerUniform("roi","f32",d.length).declareVariables(g,l)}
      ${x.mainStart()}
        ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${$?"output[global_idx] = input[global_idx];":`
        let output_indices = ${l.offsetToIndices("global_idx")};
        var input_indices: ${g.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${g.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${o.length===2||o.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${m.length>0?m:""}|${i.length>0?i:""}|${d.length>0?d:""}|${$}|${o}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[{dims:p,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:12,data:b},{type:1,data:m},{type:1,data:d},...X(o,p)]})}},kf=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Jl=(e,t)=>{let r=[],n=[],i=[],s=kf(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");bf(e.inputs,t,s,r,n,i),e.compute(Of(e.inputs[0],t,s,r,n,i),{inputs:[0]})},ed=e=>{let t=e.antialias,r=e.axes,n=e.coordinateTransformMode,i=e.cubicCoeffA,s=e.excludeOutside!==0,o=e.extrapolationValue,d=e.keepAspectRatioPolicy,p=e.mode,m=e.nearestMode===""?"simple":e.nearestMode;return we({antialias:t,axes:r,coordinateTransformMode:n,cubicCoeffA:i,excludeOutside:s,extrapolationValue:o,keepAspectRatioPolicy:d,mode:p,nearestMode:m})}});var Pf,Rf,rd,nd=j(()=>{"use strict";me();Se();Ye();$e();Pf=(e,t)=>{let[r,n,i,s]=e,{numHeads:o,rotaryEmbeddingDim:d}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!D.areEqual(n.dims,[])&&!D.areEqual(n.dims,[1])&&n.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${n.dims.length}`);if(i.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${i.dims.length}`);if(s.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${s.dims.length}`);if(!D.areEqual(i.dims,s.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(d>0&&o===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let p=r.dims[0],m=r.dims[r.dims.length-2],l=i.dims[0],g=D.sizeFromDimension(r.dims,1)/m,b=d===0?i.dims[1]*2:g/o;if(d>b)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(n.dims.length===2){if(p!==n.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${n.dims[0]}`);if(m!==n.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${n.dims[1]}`)}if(b/2!==i.dims[1]&&d/2!==i.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${i.dims[1]}`);if(m>l)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Rf=(e,t)=>{let{interleaved:r,numHeads:n,rotaryEmbeddingDim:i,scale:s}=t,o=e[0].dims[0],d=D.sizeFromDimension(e[0].dims,1),p=e[0].dims[e[0].dims.length-2],m=d/p,l=e[2].dims[1],g=i===0?l*2:m/n,b=new Array(o,p,m/g,g-l),$=D.computeStrides(b),v=[{type:1,data:s},{type:12,data:b},{type:12,data:$},...e[0].dims.length===3?new Array({type:12,data:[d,m,g,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[d,g,p*g,1]}):[],...X(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],S=T=>{let I=M("input",e[0].dataType,e[0].dims.length),x=M("position_ids",e[1].dataType,e[1].dims.length),O=M("cos_cache",e[2].dataType,e[2].dims.length),A=M("sin_cache",e[3].dataType,e[3].dims.length),P=K("output",e[0].dataType,e[0].dims.length);return T.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:b.length},{name:"global_strides",type:"u32",length:$.length},{name:"input_output_strides",type:"u32",length:$.length}]),`
        ${T.declareVariables(I,x,O,A,P)}

        ${T.mainStart(cr)}
          let half_rotary_emb_dim = uniforms.${O.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${T.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${x.broadcastedIndicesToOffset("bsnh.xy",K("",x.type.tensor,2))};
            let position_id =
                u32(${x.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});
            let j = i + select(half_rotary_emb_dim, 1, ${r});
            let re = ${I.getByOffset("i")} * ${O.get("position_id","bsnh[3]")} -
                ${I.getByOffset("j")} * ${A.get("position_id","bsnh[3]")};
            ${P.setByOffset("i","re")}
            let im = ${I.getByOffset("i")} * ${A.get("position_id","bsnh[3]")} +
                ${I.getByOffset("j")} * ${O.get("position_id","bsnh[3]")};
            ${P.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${P.setByOffset("k",I.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:we({interleaved:r}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:S,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(D.size(b)/cr)},programUniforms:v})}},rd=(e,t)=>{Pf(e.inputs,t),e.compute(Rf(e.inputs,t))}});var zf,Bf,id,ad=j(()=>{"use strict";me();Se();$e();zf=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],n=e[2];if(t.dataType!==r.dataType||t.dataType!==n.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let i=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==i)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(n.dims.length!==1)throw new Error("Gamma must be 1D");if(n.dims[n.dims.length-1]!==i)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let o=e[3];if(o.dims.length!==1)throw new Error("Beta must be 1D");if(o.dims[o.dims.length-1]!==i)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let o=e[4];if(o.dims.length!==1)throw new Error("Bias must be 1D");if(o.dims[o.dims.length-1]!==i)throw new Error("Bias must have the same hidden size as input")}},Bf=(e,t,r,n)=>{let i=e[0].dims,s=D.size(i),o=i,d=s,p=i.slice(-1)[0],m=n?i.slice(0,-1).concat(1):[],l=e.length>3,g=e.length>4,b=n&&r>1,$=n&&r>2,v=r>3,S=Ve(p),T=[{type:12,data:d},{type:12,data:S},{type:12,data:p},{type:1,data:t.epsilon}],I=O=>{let A=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],P=[M("x",e[0].dataType,e[0].dims,S),M("skip",e[1].dataType,e[1].dims,S),M("gamma",e[2].dataType,e[2].dims,S)];l&&P.push(M("beta",e[3].dataType,e[3].dims,S)),g&&P.push(M("bias",e[4].dataType,e[4].dims,S)),P.push(K("output",e[0].dataType,o,S)),b&&P.push(K("mean_output",1,m)),$&&P.push(K("inv_std_output",1,m)),v&&P.push(K("input_skip_bias_sum",e[0].dataType,o,S));let N=De(e[0].dataType);return`

      ${O.registerUniforms(A).declareVariables(...P)}

      ${O.mainStart()}
        ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size / uniforms.hidden_size")}
        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        let offset = global_idx * hidden_size_vectorized;
        var sum = ${et("f32",S)};
        var squareSum = ${et("f32",S)};
        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${g?"bias[i]":"0.0"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${v?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${At(N,S,"value")};
          sum += f32_value;
          squareSum += f32_value * f32_value;
        }
        let mean = ${mt("sum",S)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${mt("squareSum",S)} / f32(uniforms.hidden_size) - mean * mean + uniforms.epsilon);
        ${b?"mean_output[global_idx] = mean;":""}
        ${$?"inv_std_output[global_idx] = inv_std_dev;":""}
        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {
          output[offset + i] = (output[offset + i] - ${N}(mean)) * ${N}(inv_std_dev) * gamma[i] + ${l?"beta[i]":"0.0"};
        }
      }`},x=[{dims:o,dataType:e[0].dataType}];return r>1&&x.push({dims:m,dataType:1}),r>2&&x.push({dims:m,dataType:1}),r>3&&x.push({dims:i,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${S};${b};${$};${v}`,inputDependencies:e.map((O,A)=>"type")},getShaderSource:I,getRunData:()=>({outputs:x,dispatchGroup:{x:Math.ceil(d/p/64)},programUniforms:T})}},id=(e,t)=>{zf(e.inputs);let n=[0];e.outputCount>1&&n.push(-3),e.outputCount>2&&n.push(-3),e.outputCount>3&&n.push(3),e.compute(Bf(e.inputs,t,e.outputCount,!1),{outputs:n})}});var Df,ci,Mf,od,Uf,Wf,sd,ud,ld=j(()=>{"use strict";me();Se();Ye();$e();Df=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,n)=>{if(e[n+1].dataType!==6&&e[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},ci=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(n=>r.push(Number(n)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(n=>r.push(Number(n)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Mf=(e,t)=>{if(e.length>1){let r=ci(e,1),n=ci(e,2),i=ci(e,3);return i.length===0&&(i=[...Array(e[0].dims.length).keys()]),we({starts:r,ends:n,axes:i})}else return t},od=(e,t,r,n,i)=>{let s=e;return e<0&&(s+=r[n[t]]),i[t]<0?Math.max(0,Math.min(s,r[n[t]]-1)):Math.max(0,Math.min(s,r[n[t]]))},Uf=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${se("uniforms.input_shape","i",r.length)};
            let steps_i = ${se("uniforms.steps","i",r.length)};
            let signs_i = ${se("uniforms.signs","i",r.length)};
            let starts_i = ${se("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Wf=(e,t)=>{let r=e[0].dims,n=D.size(r),i=t.axes.length>0?D.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=ci(e,4);s.forEach(I=>I!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(i.length).fill(1));let o=t.starts.map((I,x)=>od(I,x,r,i,s)),d=t.ends.map((I,x)=>od(I,x,r,i,s));if(i.length!==o.length||i.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(i.length!==r.length)for(let I=0;I<r.length;++I)i.includes(I)||(o.splice(I,0,0),d.splice(I,0,r[I]),s.splice(I,0,1));let p=s.map(I=>Math.sign(I));s.forEach((I,x,O)=>{if(I<0){let A=(d[x]-o[x])/I,P=o[x],N=P+A*s[x];o[x]=N,d[x]=P,O[x]=-I}});let m=r.slice(0);i.forEach((I,x)=>{m[I]=Math.ceil((d[I]-o[I])/s[I])});let l={dims:m,dataType:e[0].dataType},g=K("output",e[0].dataType,m.length),b=M("input",e[0].dataType,e[0].dims.length),$=D.size(m),v=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:o.length},{name:"signs",type:"i32",length:p.length},{name:"steps",type:"u32",length:s.length}],S=[{type:12,data:$},{type:12,data:o},{type:6,data:p},{type:12,data:s},...X(e[0].dims,m)],T=I=>`
      ${I.registerUniforms(v).declareVariables(b,g)}
        ${Uf(b,g,r)}
        ${I.mainStart()}
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${g.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${g.setByOffset("global_idx",b.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${p.length}_${o.length}_${s.length}`,inputDependencies:["rank"]},getShaderSource:T,getRunData:()=>({outputs:[l],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:S})}},sd=(e,t)=>{Df(e.inputs,t);let r=Mf(e.inputs,t);e.compute(Wf(e.inputs,r),{inputs:[0]})},ud=e=>{let t=e.starts,r=e.ends,n=e.axes;return we({starts:t,ends:r,axes:n})}});var Nf,Vf,dd,cd,pd=j(()=>{"use strict";me();Se();Ye();$e();Nf=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Vf=(e,t)=>{let r=e.dims,n=D.size(r),i=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let o=r[s],d=n/o,p=Ve(o),m=o/p,l=(T,I)=>I===4?`max(max(${T}.x, ${T}.y), max(${T}.z, ${T}.w))`:I===2?`max(${T}.x, ${T}.y)`:I===3?`max(max(${T}.x, ${T}.y), ${T}.z)`:T,g=M("x",e.dataType,e.dims,p),b=K("result",e.dataType,e.dims,p),$=g.type.value,v=De(e.dataType)==="f32"?`var threadMax = ${$}(-3.402823e+38f);`:`var threadMax = ${$}(-65504.0h);`,S=T=>`
      var<workgroup> rowMaxShared : ${$};
      var<workgroup> rowSumShared : ${$};
      var<workgroup> threadShared : array<${$}, ${i}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${$} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${$}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${T.registerUniform("packedCols","i32").declareVariables(g,b)}
      ${T.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${i};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${v}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${$}(${l("threadShared[0]",p)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${$}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${$}(${mt("threadShared[0]",p)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${p}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:6,data:m}]}),getShaderSource:S}},dd=(e,t)=>{Nf(e.inputs),e.compute(Vf(e.inputs[0],t))},cd=e=>we({axis:e.axis})});var Gf,Hf,Lf,Ff,qf,fd,md,hd=j(()=>{"use strict";me();Se();Ye();$e();Gf=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Hf=(e,t)=>{let r=[],n=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(i=>r.push(Number(i))),n=r.length),we({numOutputs:n,axis:t.axis,splitSizes:r})},Lf=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${se("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Ff=e=>{let t=e.length,r=[];for(let n=0;n<t;++n){let i=e[n].setByIndices("indices","input[global_idx]");t===1?r.push(i):n===0?r.push(`if (output_number == ${n}u) { ${i} }`):n===t-1?r.push(`else { ${i} }`):r.push(`else if (output_number == ${n}) { ${i} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},qf=(e,t)=>{let r=e[0].dims,n=D.size(r),i=e[0].dataType,s=D.normalizeAxis(t.axis,r.length),o=new Array(t.numOutputs),d=M("input",i,r.length),p=new Array(t.numOutputs),m=[],l=[],g=0,b=[{type:12,data:n}];for(let v=0;v<t.numOutputs;v++){g+=t.splitSizes[v],p[v]=g;let S=r.slice();S[t.axis]=t.splitSizes[v],l.push(S),o[v]=K(`output${v}`,i,S.length),m.push({dims:l[v],dataType:e[0].dataType})}b.push({type:12,data:p},...X(r,...l));let $=v=>`
  ${v.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",p.length).declareVariables(d,...o)}
  ${Lf(p.length)}
  ${Ff(o)}

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${d.offsetToIndices("global_idx")};
    var index = ${d.indicesGet("indices",s)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${se("uniforms.size_in_split_axis","output_number - 1u",p.length)};
      ${d.indicesSet("indices",s,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:$,getRunData:()=>({outputs:m,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:b})}},fd=(e,t)=>{Gf(e.inputs);let r=e.inputs.length===1?t:Hf(e.inputs,t);e.compute(qf(e.inputs,r),{inputs:[0]})},md=e=>{let t=e.axis,r=e.splitSizes,n=e.numOutputs<0?r.length:e.numOutputs;if(n!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return we({axis:t,numOutputs:n,splitSizes:r})}});var gd,jf,Kf,Yf,yd,bd=j(()=>{"use strict";me();Se();$e();gd=e=>Array.from(e.getBigInt64Array(),Number),jf=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(gd(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Kf=(e,t)=>{let r=[];for(let n=0;n<e.length;++n)r.push(e[n]*t[n]);return r},Yf=e=>{let t=e[0].dims,r=gd(e[1]),n=Kf(t,r),i=D.size(n),s=e[0].dataType,o=M("input",s,t.length),d=K("output",s,n.length),p=m=>`
      const inputShape = ${o.indices(...t)};
      ${m.registerUniform("output_size","u32").declareVariables(o,d)}
      ${m.mainStart()}
      ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${d.offsetToIndices("global_idx")};
      var input_indices: ${o.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${o.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${d.indicesGet("output_indices","i")}  % input_dim_i;

        ${o.indicesSet("input_indices","i","input_dim_value")}
      }
      ${d.setByOffset("global_idx",o.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},...X(e[0].dims,n)]}),getShaderSource:p}},yd=e=>{jf(e.inputs),e.compute(Yf(e.inputs),{inputs:[0]})}});var Xf,Zf,wd,vd=j(()=>{"use strict";me();Se();$e();Xf=(e,t,r,n,i)=>{let s=K("output_data",i,r.length,4),o=M("a_data",t[1].dataType,t[1].dims.length,4),d=M("b_data",t[2].dataType,t[2].dims.length,4),p=M("c_data",t[0].dataType,t[0].dims.length,4),m,l=(g,b,$)=>`select(${b}, ${g}, ${$})`;if(!n)m=s.setByOffset("global_idx",l(o.getByOffset("global_idx"),d.getByOffset("global_idx"),p.getByOffset("global_idx")));else{let g=(b,$,v="")=>{let S=`a_data[index_a${$}][component_a${$}]`,T=`b_data[index_b${$}][component_b${$}]`,I=`bool(c_data[index_c${$}] & (0xffu << (component_c${$} * 8)))`;return`
            let output_indices${$} = ${s.offsetToIndices(`global_idx * 4u + ${$}u`)};
            let offset_a${$} = ${o.broadcastedIndicesToOffset(`output_indices${$}`,s)};
            let offset_b${$} = ${d.broadcastedIndicesToOffset(`output_indices${$}`,s)};
            let offset_c${$} = ${p.broadcastedIndicesToOffset(`output_indices${$}`,s)};
            let index_a${$} = offset_a${$} / 4u;
            let index_b${$} = offset_b${$} / 4u;
            let index_c${$} = offset_c${$} / 4u;
            let component_a${$} = offset_a${$} % 4u;
            let component_b${$} = offset_b${$} % 4u;
            let component_c${$} = offset_c${$} % 4u;
            ${b}[${$}] = ${v}(${l(S,T,I)});
          `};i===9?m=`
            var data = vec4<u32>(0);
            ${g("data",0,"u32")}
            ${g("data",1,"u32")}
            ${g("data",2,"u32")}
            ${g("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:m=`
            ${g("output_data[global_idx]",0)}
            ${g("output_data[global_idx]",1)}
            ${g("output_data[global_idx]",2)}
            ${g("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(p,o,d,s)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${m}
      }`},Zf=e=>{let t=e[1].dims,r=e[2].dims,n=e[0].dims,i=e[1].dataType,s=!(D.areEqual(t,r)&&D.areEqual(r,n)),o=t,d=D.size(t);if(s){let m=zt.calcShape(zt.calcShape(t,r,!1),n,!1);if(!m)throw new Error("Can't perform where op on the given tensors");o=m,d=D.size(o)}let p=Math.ceil(d/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:m=>Xf(m,e,o,s,i),getRunData:()=>({outputs:[{dims:o,dataType:i}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:12,data:p},...X(n,t,r,o)]})}},wd=e=>{e.compute(Zf(e.inputs))}});var $d,_d=j(()=>{"use strict";zs();ra();Ms();Ws();Su();zu();Mu();sa();Zu();el();al();ul();dl();fl();gl();wl();$l();Sl();la();Il();Ol();Pl();Yl();Zl();Zn();td();nd();ad();ld();pd();hd();bd();Ar();ri();vd();$d=new Map([["Abs",[Ns]],["Acos",[Vs]],["Acosh",[Gs]],["Add",[xu]],["ArgMax",[Rs,ta]],["ArgMin",[Ps,ta]],["Asin",[Hs]],["Asinh",[Ls]],["Atan",[Fs]],["Atanh",[qs]],["Attention",[Bs]],["AveragePool",[Nl,Wl]],["BatchNormalization",[Ds]],["BiasAdd",[Us]],["BiasSplitGelu",[_u]],["Cast",[Ks,js]],["Ceil",[Xs]],["Clip",[Ys]],["Concat",[Bu,Du]],["Conv",[pa,ca]],["ConvTranspose",[Xu,Yu]],["Cos",[Zs]],["Cosh",[Qs]],["CumSum",[Qu,Ju]],["Div",[Cu]],["Einsum",[nl,il]],["Elu",[Js,ei]],["Equal",[Iu]],["Erf",[eu]],["Exp",[tu]],["Expand",[sl]],["FastGelu",[ll]],["Floor",[ru]],["FusedConv",[pa,ca]],["Gather",[pl,cl]],["GatherElements",[hl,ml]],["Gelu",[nu]],["Gemm",[bl,yl]],["GlobalAveragePool",[Hl,Gl]],["GlobalMaxPool",[Kl,jl]],["Greater",[Ou]],["GreaterOrEqual",[Pu]],["HardSigmoid",[cu,du]],["InstanceNormalization",[vl]],["LayerNormalization",[_l]],["LeakyRelu",[iu,ei]],["Less",[ku]],["LessOrEqual",[Ru]],["Log",[vu]],["MatMul",[Hu]],["MatMulNBits",[xl,Cl]],["MaxPool",[Fl,ql]],["Mul",[Au]],["MultiHeadAttention",[El,Tl]],["Neg",[ou]],["Not",[au]],["Pad",[kl]],["Pow",[Tu]],["Range",[Xl]],["Reciprocal",[su]],["ReduceMin",[Is]],["ReduceMean",[$s]],["ReduceMax",[Cs]],["ReduceSum",[Ts]],["ReduceProd",[As]],["ReduceL1",[_s]],["ReduceL2",[Ss]],["ReduceLogSum",[Os]],["ReduceLogSumExp",[xs]],["ReduceSumSquare",[Es]],["Relu",[uu]],["Resize",[Jl,ed]],["RotaryEmbedding",[rd]],["Sigmoid",[lu]],["Sin",[pu]],["Sinh",[fu]],["Slice",[sd,ud]],["SkipLayerNormalization",[id]],["Split",[fd,md]],["Sqrt",[mu]],["Softmax",[dd,cd]],["Sub",[Eu]],["Tan",[hu]],["Tanh",[yu]],["ThresholdedRelu",[wu,ei]],["Tile",[yd]],["Transpose",[us,ls]],["Where",[wd]]])});var pi,Sd=j(()=>{"use strict";_t();Zt();$e();pi=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,n,i,s){pt(t.programInfo.name);let o=this.backend.device,d=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let p=[];for(let l of r)p.push({binding:p.length,resource:{buffer:l.buffer}});for(let l of n)p.push({binding:p.length,resource:{buffer:l.buffer}});s&&p.push({binding:p.length,resource:s});let m=o.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:p,label:t.programInfo.name});if(this.backend.sessionStatus==="capturing"){let l={kernelId:this.backend.currentKernelId,computePipeline:t.computePipeline,bindGroup:m,dispatchGroup:i};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(l)}d.setPipeline(t.computePipeline),d.setBindGroup(0,m),d.dispatchWorkgroups(...i),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),ut(t.programInfo.name)}dispose(){}build(t,r){pt(t.name);let n=this.backend.device,i=[];n.features.has("shader-f16")&&i.push("enable f16;");let s=os(r,this.backend.device.limits),o=t.getShaderSource(s),d=`${i.join(`
`)}
${s.additionalImplementations}
${o}`,p=n.createShaderModule({code:d,label:t.name});Ne("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let m=n.createComputePipeline({compute:{module:p,entryPoint:"main"},layout:"auto",label:t.name});return ut(t.name),{programInfo:t,computePipeline:m,uniformVariablesInfo:s.variablesInfo}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,n=typeof t=="number"?1:t.y||1,i=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&n<=s&&i<=s)return[r,n,i];let o=r*n*i,d=Math.ceil(Math.sqrt(o));if(d>s){if(d=Math.ceil(Math.cbrt(o)),d>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var Qf,Jf,ba,fi,xd=j(()=>{"use strict";_t();me();Zt();ts();as();_d();Sd();Qf=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let n=0;n<e.length;++n){let i=e[n].dataType;switch(t[n]){case"none":{r.push("");break}case"type":{r.push(`${i}`);break}case"rank":{let s=e[n].dims.length;r.push(`${i};${s}`);break}case"dims":{let s=e[n].dims.join(",");r.push(`${i};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[n]}`)}}return r.join("|")},Jf=(e,t,r)=>{let n=e.name;return e.shaderCache?.hint&&(n+="["+e.shaderCache.hint+"]"),n+=":"+r+`:${Qf(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,n},ba=class{constructor(t){t&&(this.architecture=t.architecture,this.vendor=t.vendor)}isArchitecture(t){return this.architecture===t}isVendor(t){return this.vendor===t}},fi=class{constructor(){this.currentSessionId=null;this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionStatus="default";this.capturedCommandList=new Map;this.capturedPendingKernels=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let n=[],i={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n};r.features.has("chromium-experimental-timestamp-query-inside-passes")?n.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&n.push("timestamp-query"),r.features.has("shader-f16")&&n.push("shader-f16"),this.device=await r.requestDevice(i),this.adapterInfo=new ba(await r.requestAdapterInfo()),this.gpuDataManager=is(this),this.programManager=new pi(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Jo(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:r,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=t.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;pt(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),n=this.pendingQueries.get(t);for(let i=0;i<r.length/2;i++){let s=n[i],o=s.kernelId,d=this.kernels.get(o),p=d.kernelType,m=d.kernelName,l=s.programName,g=s.inputTensorViews,b=s.outputTensorViews,$=r[i*2],v=r[i*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=$);let S=Number($-this.queryTimeBase),T=Number(v-this.queryTimeBase);if(!Number.isSafeInteger(S)||!Number.isSafeInteger(T))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:g.map(I=>({dims:I.dims,dataType:Xt(I.dataType)})),outputsMetadata:b.map(I=>({dims:I.dims,dataType:Xt(I.dataType)})),kernelId:o,kernelType:p,kernelName:m,programName:l,startTime:S,endTime:T});else{let I="";g.forEach((O,A)=>{I+=`input[${A}]: [${O.dims}] | ${Xt(O.dataType)}, `});let x="";b.forEach((O,A)=>{x+=`output[${A}]: [${O.dims}] | ${Xt(O.dataType)}, `}),console.log(`[profiling] kernel "${o}|${p}|${m}|${l}" ${I}${x}execution time: ${T-S} ns`)}Qr("GPU",`${l}::${$}::${v}`)}t.unmap(),this.pendingQueries.delete(t)}),ut()}run(t,r,n,i,s){pt(t.name);let o=[];for(let x=0;x<r.length;++x){let O=r[x].data;if(O===0)continue;let A=this.gpuDataManager.get(O);if(!A)throw new Error(`no GPU data for input: ${O}`);o.push(A)}let{outputs:d,dispatchGroup:p,programUniforms:m}=t.getRunData(r),l=n.length===0?d.map((x,O)=>O):n;if(l.length!==d.length)throw new Error(`Output size ${l.length} must be equal to ${d.length}.`);let g=[],b=[];for(let x=0;x<d.length;++x){if(!Number.isInteger(l[x])||l[x]<-3||l[x]>=d.length)throw new Error(`Invalid output index: ${l[x]}`);if(l[x]===-3)continue;let O=l[x]===-1,A=l[x]===-2,P=O||A?s(d[x].dataType,d[x].dims):i(l[x],d[x].dataType,d[x].dims);if(g.push(P),P.data===0)continue;let N=this.gpuDataManager.get(P.data);if(!N)throw new Error(`no GPU data for output: ${P.data}`);if(O&&this.temporaryData.push(N),A){let V=this.kernelPersistentData.get(this.currentKernelId);V||(V=[],this.kernelPersistentData.set(this.currentKernelId,V)),V.push(N)}b.push(N)}if(o.length!==r.length||b.length!==g.length){if(b.length===0)return ut(t.name),g;throw new Error(`Program ${t.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let $;if(m){let x=0,O=[];m.forEach(V=>{let G=typeof V.data=="number"?[V.data]:V.data;if(G.length===0)return;let ie=V.type===10?2:4,Z,U;V.type===10?(U=G.length>4?16:G.length>2?8:G.length*ie,Z=G.length>4?16:ie*G.length):(U=G.length<=2?G.length*ie:16,Z=16),x=Math.ceil(x/U)*U,O.push(x);let re=V.type===10?8:4;x+=G.length>4?Math.ceil(G.length/re)*Z:G.length*ie});let A=16;x=Math.ceil(x/A)*A;let P=new ArrayBuffer(x);m.forEach((V,G)=>{let ie=O[G],Z=typeof V.data=="number"?[V.data]:V.data;if(V.type===6)new Int32Array(P,ie,Z.length).set(Z);else if(V.type===12)new Uint32Array(P,ie,Z.length).set(Z);else if(V.type===10)new Uint16Array(P,ie,Z.length).set(Z);else if(V.type===1)new Float32Array(P,ie,Z.length).set(Z);else throw new Error(`Unsupported uniform type: ${Xt(V.type)}`)});let N=this.gpuDataManager.create(x,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(N.buffer,0,P,0,x),this.gpuDataManager.release(N.id),$={offset:0,size:x,buffer:N.buffer}}let v=this.programManager.normalizeDispatchGroupSize(p),S=v[1]===1&&v[2]===1,T=Jf(t,r,S),I=this.programManager.getArtifact(T);if(I||(I=this.programManager.build(t,v),this.programManager.setArtifact(T,I),Ne("info",()=>`[artifact] key: ${T}, programName: ${t.name}`)),m&&I.uniformVariablesInfo){if(m.length!==I.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${I.uniformVariablesInfo.length}, got ${m.length} in program "${I.programInfo.name}".`);for(let x=0;x<m.length;x++){let O=m[x],A=O.type,P=typeof O.data=="number"?1:O.data.length,[N,V]=I.uniformVariablesInfo[x];if(A!==N||P!==V)throw new Error(`Uniform variable ${x} mismatch: expect type ${N} with size ${V}, got type ${A} with size ${P} in program "${I.programInfo.name}".`)}}if(Ne("info",()=>`[ProgramManager] run "${t.name}" (key=${T}) with ${v[0]}x${v[1]}x${v[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let x={kernelId:this.currentKernelId,programName:I.programInfo.name,inputTensorViews:r,outputTensorViews:g};this.pendingKernels.push(x),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(x)}return this.programManager.run(I,o,b,v,$),ut(t.name),g}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,n,i){let s=$d.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);let o={kernelType:t,kernelName:i,kernelEntry:s[0],attributes:[s[1],n]};this.kernels.set(r,o)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let n of r)this.gpuDataManager.release(n.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,n){let i=this.kernels.get(t);if(!i)throw new Error(`kernel not created: ${t}`);let s=i.kernelType,o=i.kernelName,d=i.kernelEntry,p=i.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${o}" is not allowed to be called recursively`);this.currentKernelId=t,p[0]&&(p[1]=p[0](p[1]),p[0]=void 0),Ne("info",()=>`[WebGPU] Start to run kernel "[${s}] ${o}"...`);let m=this.env.debug;this.temporaryData=[];try{return m&&this.device.pushErrorScope("validation"),d(r,p[1]),0}catch(l){return n.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${o}" failed. ${l}`)),1}finally{m&&n.push(this.device.popErrorScope().then(l=>l?`GPU validation error for kernel "[${s}] ${o}": ${l.message}`:null));for(let l of this.temporaryData)this.gpuDataManager.release(l.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,n,i){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let o=s.get(r),d=this.gpuDataManager.registerExternalBuffer(n,i,o?.[1]);return s.set(r,[d,n]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(n=>this.gpuDataManager.unregisterExternalBuffer(n[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,n){return async()=>{let i=await Ki(this,t,r);return es(i.buffer,n)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Ne("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Ne("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Ne("info","replay"),this.sessionStatus="replaying";let t=this.capturedCommandList.get(this.currentSessionId),r=this.capturedPendingKernels.get(this.currentSessionId),n=t.length;this.pendingKernels=[];for(let i=0;i<n;i++){let s=this.getComputePassEncoder(),o=t[i];this.writeTimestamp(this.pendingDispatchNumber*2),s.setPipeline(o.computePipeline),s.setBindGroup(0,o.bindGroup),s.dispatchWorkgroups(...o.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(r[i]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(t){this.unregisterBuffers(t),this.capturedCommandList.has(t)&&this.capturedCommandList.delete(t),this.capturedPendingKernels.has(t)&&this.capturedPendingKernels.delete(t),this.gpuDataManager.onReleaseSession(t)}onRunStart(t){this.currentSessionId=t,this.setQueryType()}}});var Cd={};sr(Cd,{init:()=>em});var sn,wa,em,Id=j(()=>{"use strict";me();xd();Zt();Se();sn=class e{constructor(t,r,n,i){this.module=t;this.dataType=r;this.data=n;this.dims=i}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=D.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(D.size(t)!==D.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},wa=class{constructor(t,r,n){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;this.adapterInfo=r.adapterInfo;let i=t.HEAPU32,s=n>>>2;this.opKernelContext=i[s++];let o=i[s++];this.outputCount=i[s++],this.customDataOffset=i[s++],this.customDataSize=i[s++];let d=[];for(let p=0;p<o;p++){let m=i[s++],l=i[s++],g=i[s++],b=[];for(let $=0;$<g;$++)b.push(i[s++]);d.push(new sn(t,m,l,b))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let n=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,i=r?.outputs??[],s=(d,p,m)=>new sn(this.module,p,this.output(d,m),m),o=(d,p)=>{let m=en(d);if(!m)throw new Error(`Unsupported data type: ${d}`);let l=m*D.size(p),g=l>0?this.backend.gpuDataManager.create(l).id:0;return new sn(this.module,d,g,p)};return this.backend.run(t,n,i,s,o)}output(t,r){let n=this.module.stackSave();try{let i=this.module.stackAlloc((1+r.length)*4),s=i>>2;this.module.HEAPU32[s++]=r.length;for(let o=0;o<r.length;o++)this.module.HEAPU32[s++]=r[o];return this.module._JsepOutput(this.opKernelContext,t,i)}catch(i){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${i}`)}finally{this.module.stackRestore(n)}}},em=async(e,t,r,n)=>{let i=t.jsepInit;if(!i)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let s=new fi;await s.initialize(r,n),i("webgpu",[s,o=>s.alloc(o),o=>s.free(o),(o,d,p,m=!1)=>{if(m)Ne("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${o}, dst=${d}, size=${p}`),s.memcpy(o,d);else{Ne("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${o}, gpuDataId=${d}, size=${p}`);let l=t.HEAPU8.subarray(o>>>0,(o>>>0)+p);s.upload(d,l)}},async(o,d,p)=>{Ne("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${o}, dataOffset=${d}, size=${p}`),await s.download(o,()=>t.HEAPU8.subarray(d>>>0,(d>>>0)+p))},(o,d,p)=>s.createKernel(o,d,p,t.UTF8ToString(t._JsepGetNodeName(d))),o=>s.releaseKernel(o),(o,d,p,m)=>{Ne("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${p}, kernel=${o}, contextDataOffset=${d}`);let l=new wa(t,s,d);return s.computeKernel(o,l,m)},()=>s.captureBegin(),()=>s.captureEnd(),()=>s.replay()])}else i("webnn")}});var tm,Td,Ed,pr,rm,va,Od,kd,Ad,Pd,Rd,zd,Bd=j(()=>{"use strict";Ko();Xo();me();Cr();Gn();qi();tm=(e,t)=>{He()._OrtInit(e,t)!==0&&We("Can't initialize onnxruntime.")},Td=async e=>{tm(e.wasm.numThreads,tn(e.logLevel))},Ed=async(e,t)=>{{let r=(Id(),Kt(Cd)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let n=e.webgpu.adapter;if(n){if(typeof n.limits!="object"||typeof n.features!="object"||typeof n.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let i=e.webgpu.powerPreference;if(i!==void 0&&i!=="low-power"&&i!=="high-performance")throw new Error(`Invalid powerPreference setting: "${i}"`);let s=e.webgpu.forceFallbackAdapter;if(s!==void 0&&typeof s!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${s}"`);if(n=await navigator.gpu.requestAdapter({powerPreference:i,forceFallbackAdapter:s}),!n)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");await r("webgpu",He(),e,n)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await r("webnn",He(),e)}}},pr=new Map,rm=e=>{let t=He(),r=t.stackSave();try{let n=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,n,n+4)!==0&&We("Can't get session input/output count."),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(r)}},va=e=>{let t=He(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Od=async(e,t)=>{let r,n,i=He();Array.isArray(e)?[r,n]=e:e.buffer===i.HEAPU8.buffer?[r,n]=[e.byteOffset,e.byteLength]:[r,n]=va(e);let s=0,o=0,d=0,p=[],m=[],l=[];try{if([o,p]=Yo(t),t?.externalData&&i.mountExternalData){let x=[];for(let O of t.externalData){let A=typeof O=="string"?O:O.path;x.push(rn(typeof O=="string"?O:O.data).then(P=>{i.mountExternalData(A,P)}))}await Promise.all(x)}s=await i._OrtCreateSession(r,n,o),s===0&&We("Can't create a session.");let[g,b]=rm(s),$=!!t?.enableGraphCapture,v=[],S=[],T=[];for(let x=0;x<g;x++){let O=i._OrtGetInputName(s,x);O===0&&We("Can't get an input name."),m.push(O),v.push(i.UTF8ToString(O))}for(let x=0;x<b;x++){let O=i._OrtGetOutputName(s,x);O===0&&We("Can't get an output name."),l.push(O);let A=i.UTF8ToString(O);S.push(A);{if($&&t?.preferredOutputLocation===void 0){T.push("gpu-buffer");continue}let P=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[A]??"cpu";if(P!=="cpu"&&P!=="cpu-pinned"&&P!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${P}.`);if($&&P!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${P}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);T.push(P)}}let I=null;return T.some(x=>x==="gpu-buffer")&&(d=i._OrtCreateBinding(s),d===0&&We("Can't create IO binding."),I={handle:d,outputPreferredLocations:T,outputPreferredLocationsEncoded:T.map(x=>Fi(x))}),pr.set(s,[s,m,l,I,$,!1]),[s,v,S]}catch(g){throw m.forEach(b=>i._OrtFree(b)),l.forEach(b=>i._OrtFree(b)),d!==0&&i._OrtReleaseBinding(d),s!==0&&i._OrtReleaseSession(s),g}finally{i._free(r),o!==0&&i._OrtReleaseSessionOptions(o),p.forEach(g=>i._free(g)),i.unmountExternalData?.()}},kd=e=>{let t=He(),r=pr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,i,s,o,d]=r;o&&(d&&t._OrtClearBoundOutputs(o.handle),t._OrtReleaseBinding(o.handle)),t.jsepOnReleaseSession?.(e),i.forEach(p=>t._OrtFree(p)),s.forEach(p=>t._OrtFree(p)),t._OrtReleaseSession(n),pr.delete(e)},Ad=(e,t,r,n,i,s=!1)=>{if(!e){t.push(0);return}let o=He(),d=e[0],p=e[1],m=e[3],l,g;if(d==="string"&&m==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(s&&m!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${i} when enableGraphCapture is true.`);if(m==="gpu-buffer"){let v=e[2].gpuBuffer,S=en(Li(d));g=p.reduce((I,x)=>I*x,1)*S;let T=o.jsepRegisterBuffer;if(!T)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');l=T(n,i,v,g)}else{let v=e[2];if(Array.isArray(v)){g=4*v.length,l=o._malloc(g),r.push(l);let S=l/4;for(let T=0;T<v.length;T++){if(typeof v[T]!="string")throw new TypeError(`tensor data at index ${T} is not a string`);o.HEAPU32[S++]=Le(v[T],r)}}else g=v.byteLength,l=o._malloc(g),r.push(l),o.HEAPU8.set(new Uint8Array(v.buffer,v.byteOffset,g),l)}let b=o.stackSave(),$=o.stackAlloc(4*p.length);try{let v=$/4;p.forEach(T=>o.HEAP32[v++]=T);let S=o._OrtCreateTensor(Li(d),l,g,$,p.length,Fi(m));S===0&&We(`Can't create tensor for input/output. session=${n}, index=${i}.`),t.push(S)}finally{o.stackRestore(b)}},Pd=async(e,t,r,n,i,s)=>{let o=He(),d=pr.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let p=d[0],m=d[1],l=d[2],g=d[3],b=d[4],$=d[5],v=t.length,S=n.length,T=0,I=[],x=[],O=[],A=[],P=o.stackSave(),N=o.stackAlloc(v*4),V=o.stackAlloc(v*4),G=o.stackAlloc(S*4),ie=o.stackAlloc(S*4);try{[T,I]=jo(s);for(let te=0;te<v;te++)Ad(r[te],x,A,e,t[te],b);for(let te=0;te<S;te++)Ad(i[te],O,A,e,v+n[te],b);let Z=N/4,U=V/4,re=G/4,Be=ie/4;for(let te=0;te<v;te++)o.HEAPU32[Z++]=x[te],o.HEAPU32[U++]=m[t[te]];for(let te=0;te<S;te++)o.HEAPU32[re++]=O[te],o.HEAPU32[Be++]=l[n[te]];if(g&&!$){let{handle:te,outputPreferredLocations:Me,outputPreferredLocationsEncoded:ye}=g;if(m.length!==v)throw new Error(`input count from feeds (${v}) is expected to be always equal to model's input count (${m.length}).`);for(let he=0;he<v;he++){let ue=t[he];await o._OrtBindInput(te,m[ue],x[he])!==0&&We(`Can't bind input[${he}] for session=${e}.`)}for(let he=0;he<S;he++){let ue=n[he];i[he]?.[3]?o._OrtBindOutput(te,l[ue],O[he],0)!==0&&We(`Can't bind pre-allocated output[${he}] for session=${e}.`):o._OrtBindOutput(te,l[ue],0,ye[ue])!==0&&We(`Can't bind output[${he}] to ${Me[he]} for session=${e}.`)}pr.set(e,[p,m,l,g,b,!0])}o.jsepOnRunStart?.(p);let Oe;g?Oe=await o._OrtRunWithBinding(p,g.handle,S,G,T):Oe=await o._OrtRun(p,V,N,v,ie,S,G,T),Oe!==0&&We("failed to call OrtRun().");let Ie=[];for(let te=0;te<S;te++){let Me=o.HEAPU32[G/4+te];if(Me===O[te]){Ie.push(i[te]);continue}let ye=o.stackSave(),he=o.stackAlloc(4*4),ue=!1,ge,ke=0;try{o._OrtGetTensorData(Me,he,he+4,he+8,he+12)!==0&&We(`Can't access output tensor data on index ${te}.`);let F=he/4,ae=o.HEAPU32[F++];ke=o.HEAPU32[F++];let xe=o.HEAPU32[F++],Ge=o.HEAPU32[F++],Xe=[];for(let qe=0;qe<Ge;qe++)Xe.push(o.HEAPU32[xe/4+qe]);o._OrtFree(xe);let ht=Xe.reduce((qe,je)=>qe*je,1);ge=Xt(ae);let rt=g?.outputPreferredLocations[n[te]];if(ge==="string"){if(rt==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let qe=[],je=ke/4;for(let gt=0;gt<ht;gt++){let Lt=o.HEAPU32[je++],kt=gt===ht-1?void 0:o.HEAPU32[je]-Lt;qe.push(o.UTF8ToString(Lt,kt))}Ie.push([ge,Xe,qe,"cpu"])}else if(rt==="gpu-buffer"&&ht>0){let qe=o.jsepGetBuffer;if(!qe)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let je=qe(ke),gt=en(ae);if(gt===void 0||!Ln(ge))throw new Error(`Unsupported data type: ${ge}`);ue=!0,Ie.push([ge,Xe,{gpuBuffer:je,download:o.jsepCreateDownloader(je,ht*gt,ge),dispose:()=>{o._OrtReleaseTensor(Me)}},"gpu-buffer"])}else{let qe=Hn(ge),je=new qe(ht);new Uint8Array(je.buffer,je.byteOffset,je.byteLength).set(o.HEAPU8.subarray(ke,ke+je.byteLength)),Ie.push([ge,Xe,je,"cpu"])}}finally{o.stackRestore(ye),ge==="string"&&ke&&o._free(ke),ue||o._OrtReleaseTensor(Me)}}return g&&!b&&(o._OrtClearBoundOutputs(g.handle),pr.set(e,[p,m,l,g,b,!1])),Ie}finally{o.stackRestore(P),x.forEach(Z=>o._OrtReleaseTensor(Z)),O.forEach(Z=>o._OrtReleaseTensor(Z)),A.forEach(Z=>o._free(Z)),T!==0&&o._OrtReleaseRunOptions(T),I.forEach(Z=>o._free(Z))}},Rd=e=>{let t=He(),r=pr.get(e);if(!r)throw new Error("invalid session id");let n=r[0],i=t._OrtEndProfiling(n);i===0&&We("Can't get an profile file name."),t._OrtFree(i)},zd=e=>{let t=[];for(let r of e){let n=r[2];!Array.isArray(n)&&"buffer"in n&&t.push(n.buffer)}return t}});var Dd=xr((k$,im)=>{im.exports='/*!\n * ONNX Runtime Web v1.18.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var ao=Object.defineProperty;var Ql=Object.getOwnPropertyDescriptor;var ed=Object.getOwnPropertyNames;var td=Object.prototype.hasOwnProperty;var K=(e,t)=>()=>(e&&(t=e(e=0)),t);var Vr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),wn=(e,t)=>{for(var r in t)ao(e,r,{get:t[r],enumerable:!0})},rd=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of ed(t))!td.call(e,i)&&i!==r&&ao(e,i,{get:()=>t[i],enumerable:!(o=Ql(t,i))||o.enumerable});return e};var mr=e=>rd(ao({},"__esModule",{value:!0}),e);var so={};wn(so,{createReadStream:()=>Ci,readFile:()=>nd,readFileSync:()=>od});var nd,od,Ci,uo=K(()=>{nd=void 0,od=void 0,Ci=void 0});var lo={};wn(lo,{join:()=>id});var id,co=K(()=>{id=void 0});var Ti=Vr((Ii,po)=>{"use strict";var Ai=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,i;r.ready=new Promise((s,m)=>{o=s,i=m}),r.mountExternalData=(s,m)=>{(r.gb||(r.gb=new Map)).set(s,m)},r.unmountExternalData=()=>{delete r.gb};let u=()=>{let s=(g,v,I)=>(...B)=>{let H=tt,q=v?.();B=g(...B);let Q=v?.();return q!==Q&&(g=Q,I(q),v=I=null),tt!=H?en():B},m=g=>async(...v)=>{try{if(r.fb)throw Error("Session already started");let I=r.fb={Eb:v[0],errors:[]},B=await g(...v);if(r.fb!==I)throw Error("Session mismatch");r.ob?.flush();let H=I.errors;if(0<H.length){let q=await Promise.all(H);if(q=q.filter(Q=>Q),0<q.length)throw Error(q.join(`\n`))}return B}finally{r.fb=null}};r._OrtCreateSession=s(r._OrtCreateSession,()=>r._OrtCreateSession,g=>r._OrtCreateSession=g),r._OrtRun=m(s(r._OrtRun,()=>r._OrtRun,g=>r._OrtRun=g)),r._OrtRunWithBinding=m(s(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,g=>r._OrtRunWithBinding=g)),r._OrtBindInput=s(r._OrtBindInput,()=>r._OrtBindInput,g=>r._OrtBindInput=g),u=void 0};r.jsepInit=(s,m)=>{if(u?.(),s==="webgpu"){[r.ob,r.wb,r.Ab,r.pb,r.zb,r.Sa,r.Bb,r.Db,r.xb,r.yb,r.Cb]=m;let g=r.ob;r.jsepRegisterBuffer=(v,I,B,H)=>g.registerBuffer(v,I,B,H),r.jsepGetBuffer=v=>g.getBuffer(v),r.jsepCreateDownloader=(v,I,B)=>g.createDownloader(v,I,B),r.jsepOnReleaseSession=v=>{g.onReleaseSession(v)},r.jsepOnRunStart=v=>g.onRunStart(v)}};var a=Object.assign({},r),c="./this.program",p=(s,m)=>{throw m},h=typeof window=="object",l=typeof importScripts=="function",y=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",w="",_,$,S;if(y){var E=(uo(),mr(so)),A=(co(),mr(lo));w=l?A.dirname(w)+"/":__dirname+"/",_=(s,m)=>(s=xe(s)?new URL(s):A.normalize(s),E.readFileSync(s,m?void 0:"utf8")),S=s=>(s=_(s,!0),s.buffer||(s=new Uint8Array(s)),s),$=(s,m,g,v=!0)=>{s=xe(s)?new URL(s):A.normalize(s),E.readFile(s,v?void 0:"utf8",(I,B)=>{I?g(I):m(v?B.buffer:B)})},!r.thisProgram&&1<process.argv.length&&(c=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),p=(s,m)=>{throw process.exitCode=s,m},r.inspect=()=>"[Emscripten Module object]"}else(h||l)&&(l?w=self.location.href:typeof document<"u"&&document.currentScript&&(w=document.currentScript.src),e&&(w=e),w.indexOf("blob:")!==0?w=w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):w="",_=s=>{var m=new XMLHttpRequest;return m.open("GET",s,!1),m.send(null),m.responseText},l&&(S=s=>{var m=new XMLHttpRequest;return m.open("GET",s,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),$=(s,m,g)=>{var v=new XMLHttpRequest;v.open("GET",s,!0),v.responseType="arraybuffer",v.onload=()=>{v.status==200||v.status==0&&v.response?m(v.response):g()},v.onerror=g,v.send(null)});var x=console.log.bind(console),P=console.error.bind(console);Object.assign(r,a),a=null,typeof WebAssembly!="object"&&F("no native wasm support detected");var T,k=!1,W,N,G,oe,X,U,re,Be,Ee,Ae,te;function Me(){var s=T.buffer;r.HEAP8=N=new Int8Array(s),r.HEAP16=oe=new Int16Array(s),r.HEAPU8=G=new Uint8Array(s),r.HEAPU16=X=new Uint16Array(s),r.HEAP32=U=new Int32Array(s),r.HEAPU32=re=new Uint32Array(s),r.HEAPF32=Be=new Float32Array(s),r.HEAPF64=te=new Float64Array(s),r.HEAP64=Ee=new BigInt64Array(s),r.HEAPU64=Ae=new BigUint64Array(s)}var ye=[],he=[],ue=[],ge=0,Pe=null,Le=null;function F(s){throw s="Aborted("+s+")",P(s),k=!0,W=1,s=new WebAssembly.RuntimeError(s+". Build with -sASSERTIONS for more info."),i(s),s}var ie=s=>s.startsWith("data:application/octet-stream;base64,"),xe=s=>s.startsWith("file://"),Ne;if(Ne="ort-wasm-simd.wasm",!ie(Ne)){var Ye=Ne;Ne=r.locateFile?r.locateFile(Ye,w):w+Ye}function dt(s){if(S)return S(s);throw"both async and sync fetching of the wasm failed"}function et(s){if(h||l){if(typeof fetch=="function"&&!xe(s))return fetch(s,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at \'"+s+"\'";return m.arrayBuffer()}).catch(()=>dt(s));if($)return new Promise((m,g)=>{$(s,v=>m(new Uint8Array(v)),g)})}return Promise.resolve().then(()=>dt(s))}function Fe(s,m,g){return et(s).then(v=>WebAssembly.instantiate(v,m)).then(v=>v).then(g,v=>{P(`failed to asynchronously prepare wasm: ${v}`),F(v)})}function qe(s,m){var g=Ne;return typeof WebAssembly.instantiateStreaming!="function"||ie(g)||xe(g)||y||typeof fetch!="function"?Fe(g,s,m):fetch(g,{credentials:"same-origin"}).then(v=>WebAssembly.instantiateStreaming(v,s).then(m,function(I){return P(`wasm streaming compile failed: ${I}`),P("falling back to ArrayBuffer instantiation"),Fe(g,s,m)}))}var ct={768496:(s,m,g,v)=>{if(typeof r>"u"||!r.gb)return 1;if(s=je(s>>>0),s.startsWith("./")&&(s=s.substring(2)),s=r.gb.get(s),!s)return 2;if(m>>>=0,g>>>=0,m+g>s.byteLength)return 3;try{return G.set(s.subarray(m,m+g),v>>>0>>>0),0}catch{return 4}},768997:()=>{r.xb()},769028:()=>{r.yb()},769057:()=>{r.Cb()},769082:s=>r.wb(s),769115:s=>r.Ab(s),769147:(s,m,g)=>{r.pb(s,m,g,!0)},769186:(s,m,g)=>{r.pb(s,m,g)},769219:s=>{r.Sa("Abs",s,void 0)},769270:s=>{r.Sa("Neg",s,void 0)},769321:s=>{r.Sa("Floor",s,void 0)},769374:s=>{r.Sa("Ceil",s,void 0)},769426:s=>{r.Sa("Reciprocal",s,void 0)},769484:s=>{r.Sa("Sqrt",s,void 0)},769536:s=>{r.Sa("Exp",s,void 0)},769587:s=>{r.Sa("Erf",s,void 0)},769638:s=>{r.Sa("Sigmoid",s,void 0)},769693:(s,m,g)=>{r.Sa("HardSigmoid",s,{alpha:m,beta:g})},769772:s=>{r.Sa("Log",s,void 0)},769823:s=>{r.Sa("Sin",s,void 0)},769874:s=>{r.Sa("Cos",s,void 0)},769925:s=>{r.Sa("Tan",s,void 0)},769976:s=>{r.Sa("Asin",s,void 0)},770028:s=>{r.Sa("Acos",s,void 0)},770080:s=>{r.Sa("Atan",s,void 0)},770132:s=>{r.Sa("Sinh",s,void 0)},770184:s=>{r.Sa("Cosh",s,void 0)},770236:s=>{r.Sa("Asinh",s,void 0)},770289:s=>{r.Sa("Acosh",s,void 0)},770342:s=>{r.Sa("Atanh",s,void 0)},770395:s=>{r.Sa("Tanh",s,void 0)},770447:s=>{r.Sa("Not",s,void 0)},770498:(s,m,g)=>{r.Sa("Clip",s,{min:m,max:g})},770567:s=>{r.Sa("Clip",s,void 0)},770619:(s,m)=>{r.Sa("Elu",s,{alpha:m})},770677:s=>{r.Sa("Relu",s,void 0)},770729:(s,m)=>{r.Sa("LeakyRelu",s,{alpha:m})},770793:(s,m)=>{r.Sa("ThresholdedRelu",s,{alpha:m})},770863:(s,m)=>{r.Sa("Cast",s,{to:m})},770921:s=>{r.Sa("Add",s,void 0)},770972:s=>{r.Sa("Sub",s,void 0)},771023:s=>{r.Sa("Mul",s,void 0)},771074:s=>{r.Sa("Div",s,void 0)},771125:s=>{r.Sa("Pow",s,void 0)},771176:s=>{r.Sa("Equal",s,void 0)},771229:s=>{r.Sa("Greater",s,void 0)},771284:s=>{r.Sa("GreaterOrEqual",s,void 0)},771346:s=>{r.Sa("Less",s,void 0)},771398:s=>{r.Sa("LessOrEqual",s,void 0)},771457:(s,m,g,v,I)=>{r.Sa("ReduceMean",s,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},771616:(s,m,g,v,I)=>{r.Sa("ReduceMax",s,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},771774:(s,m,g,v,I)=>{r.Sa("ReduceMin",s,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},771932:(s,m,g,v,I)=>{r.Sa("ReduceProd",s,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},772091:(s,m,g,v,I)=>{r.Sa("ReduceSum",s,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},772249:(s,m,g,v,I)=>{r.Sa("ReduceL1",s,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},772406:(s,m,g,v,I)=>{r.Sa("ReduceL2",s,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},772563:(s,m,g,v,I)=>{r.Sa("ReduceLogSum",s,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},772724:(s,m,g,v,I)=>{r.Sa("ReduceSumSquare",s,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},772888:(s,m,g,v,I)=>{r.Sa("ReduceLogSumExp",s,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},773052:s=>{r.Sa("Where",s,void 0)},773105:(s,m,g)=>{r.Sa("Transpose",s,{perm:m?Array.from(U.subarray(m>>>0,g>>>0)):[]})},773213:(s,m,g,v,I,B,H,q,Q,Y,de,be,Te,R,ce)=>{r.Sa("ConvTranspose",s,{format:Q?"NHWC":"NCHW",autoPad:m,dilations:[g],group:v,kernelShape:[I],pads:[B,H],strides:[q],wIsConst:()=>!!N[Y>>>0],outputPadding:de?Array.from(U.subarray(de>>>0,be>>>0)):[],outputShape:Te?Array.from(U.subarray(Te>>>0,R>>>0)):[],activation:je(ce)})},773614:(s,m,g,v,I,B,H,q,Q,Y,de,be,Te,R)=>{r.Sa("ConvTranspose",s,{format:q?"NHWC":"NCHW",autoPad:m,dilations:Array.from(U.subarray(g>>>0,(g>>>0)+2>>>0)),group:v,kernelShape:Array.from(U.subarray(I>>>0,(I>>>0)+2>>>0)),pads:Array.from(U.subarray(B>>>0,(B>>>0)+4>>>0)),strides:Array.from(U.subarray(H>>>0,(H>>>0)+2>>>0)),wIsConst:()=>!!N[Q>>>0],outputPadding:Y?Array.from(U.subarray(Y>>>0,de>>>0)):[],outputShape:be?Array.from(U.subarray(be>>>0,Te>>>0)):[],activation:je(R)})},774179:(s,m,g,v,I,B,H,q,Q,Y,de,be,Te,R,ce)=>{r.Sa("ConvTranspose",s,{format:Q?"NHWC":"NCHW",autoPad:m,dilations:[g],group:v,kernelShape:[I],pads:[B,H],strides:[q],wIsConst:()=>!!N[Y>>>0],outputPadding:de?Array.from(U.subarray(de>>>0,be>>>0)):[],outputShape:Te?Array.from(U.subarray(Te>>>0,R>>>0)):[],activation:je(ce)})},774580:(s,m,g,v,I,B,H,q,Q,Y,de,be,Te,R)=>{r.Sa("ConvTranspose",s,{format:q?"NHWC":"NCHW",autoPad:m,dilations:Array.from(U.subarray(g>>>0,(g>>>0)+2>>>0)),group:v,kernelShape:Array.from(U.subarray(I>>>0,(I>>>0)+2>>>0)),pads:Array.from(U.subarray(B>>>0,(B>>>0)+4>>>0)),strides:Array.from(U.subarray(H>>>0,(H>>>0)+2>>>0)),wIsConst:()=>!!N[Q>>>0],outputPadding:Y?Array.from(U.subarray(Y>>>0,de>>>0)):[],outputShape:be?Array.from(U.subarray(be>>>0,Te>>>0)):[],activation:je(R)})},775145:(s,m)=>{r.Sa("GlobalAveragePool",s,{format:m?"NHWC":"NCHW"})},775236:(s,m,g,v,I,B,H,q,Q,Y,de,be,Te,R,ce,Ie)=>{r.Sa("AveragePool",s,{format:Ie?"NHWC":"NCHW",auto_pad:m,ceil_mode:g,count_include_pad:v,storage_order:I,dilations:[B,H],kernel_shape:[q,Q],pads:[Y,de,be,Te],strides:[R,ce]})},775520:(s,m)=>{r.Sa("GlobalAveragePool",s,{format:m?"NHWC":"NCHW"})},775611:(s,m,g,v,I,B,H,q,Q,Y,de,be,Te,R,ce,Ie)=>{r.Sa("AveragePool",s,{format:Ie?"NHWC":"NCHW",auto_pad:m,ceil_mode:g,count_include_pad:v,storage_order:I,dilations:[B,H],kernel_shape:[q,Q],pads:[Y,de,be,Te],strides:[R,ce]})},775895:(s,m)=>{r.Sa("GlobalMaxPool",s,{format:m?"NHWC":"NCHW"})},775982:(s,m,g,v,I,B,H,q,Q,Y,de,be,Te,R,ce,Ie)=>{r.Sa("MaxPool",s,{format:Ie?"NHWC":"NCHW",auto_pad:m,ceil_mode:g,count_include_pad:v,storage_order:I,dilations:[B,H],kernel_shape:[q,Q],pads:[Y,de,be,Te],strides:[R,ce]})},776262:(s,m)=>{r.Sa("GlobalMaxPool",s,{format:m?"NHWC":"NCHW"})},776349:(s,m,g,v,I,B,H,q,Q,Y,de,be,Te,R,ce,Ie)=>{r.Sa("MaxPool",s,{format:Ie?"NHWC":"NCHW",auto_pad:m,ceil_mode:g,count_include_pad:v,storage_order:I,dilations:[B,H],kernel_shape:[q,Q],pads:[Y,de,be,Te],strides:[R,ce]})},776629:(s,m,g,v,I)=>{r.Sa("Gemm",s,{alpha:m,beta:g,transA:v,transB:I})},776733:s=>{r.Sa("MatMul",s,void 0)},776787:(s,m,g,v)=>{r.Sa("ArgMax",s,{keepDims:!!m,selectLastIndex:!!g,axis:v})},776895:(s,m,g,v)=>{r.Sa("ArgMin",s,{keepDims:!!m,selectLastIndex:!!g,axis:v})},777003:(s,m)=>{r.Sa("Softmax",s,{axis:m})},777066:(s,m)=>{r.Sa("Concat",s,{axis:m})},777126:(s,m,g,v,I)=>{r.Sa("Split",s,{axis:m,numOutputs:g,splitSizes:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},777266:s=>{r.Sa("Expand",s,void 0)},777320:(s,m)=>{r.Sa("Gather",s,{axis:Number(m)})},777391:(s,m)=>{r.Sa("GatherElements",s,{axis:Number(m)})},777470:(s,m,g,v,I,B,H,q,Q,Y,de)=>{r.Sa("Resize",s,{antialias:m,axes:g?Array.from(U.subarray(g>>>0,v>>>0)):[],coordinateTransformMode:je(I),cubicCoeffA:B,excludeOutside:H,extrapolationValue:q,keepAspectRatioPolicy:je(Q),mode:je(Y),nearestMode:je(de)})},777816:(s,m,g,v,I,B,H)=>{r.Sa("Slice",s,{starts:m?Array.from(U.subarray(m>>>0,g>>>0)):[],ends:v?Array.from(U.subarray(v>>>0,I>>>0)):[],axes:B?Array.from(U.subarray(B>>>0,H>>>0)):[]})},778032:s=>{r.Sa("Tile",s,void 0)},778084:(s,m,g)=>{r.Sa("LayerNormalization",s,{axis:Number(m),epsilon:Number(g)})},778191:(s,m,g)=>{r.Sa("InstanceNormalization",s,{epsilon:m,format:g?"NHWC":"NCHW"})},778305:(s,m,g)=>{r.Sa("InstanceNormalization",s,{epsilon:m,format:g?"NHWC":"NCHW"})},778419:s=>{r.Sa("Range",s,void 0)},778472:(s,m)=>{r.Sa("Einsum",s,{equation:je(m)})},778553:(s,m,g,v,I)=>{r.Sa("Pad",s,{mode:m,value:g,pads:v?Array.from(U.subarray(v>>>0,I>>>0)):[]})},778680:(s,m,g,v,I,B)=>{r.Sa("BatchNormalization",s,{epsilon:m,momentum:g,spatial:!!I,trainingMode:!!v,format:B?"NHWC":"NCHW"})},778849:(s,m,g,v,I,B)=>{r.Sa("BatchNormalization",s,{epsilon:m,momentum:g,spatial:!!I,trainingMode:!!v,format:B?"NHWC":"NCHW"})},779018:(s,m,g)=>{r.Sa("CumSum",s,{exclusive:Number(m),reverse:Number(g)})},779115:(s,m,g,v,I,B,H,q,Q)=>{r.Sa("Attention",s,{numHeads:m,isUnidirectional:g,maskFilterValue:v,scale:I,doRotary:B,qkvHiddenSizes:H?Array.from(U.subarray(Number(q)>>>0,Number(q)+H>>>0)):[],pastPresentShareBuffer:!!Q})},779387:s=>{r.Sa("BiasAdd",s,void 0)},779442:s=>{r.Sa("BiasSplitGelu",s,void 0)},779503:s=>{r.Sa("FastGelu",s,void 0)},779559:(s,m,g,v,I,B,H,q,Q,Y,de,be,Te)=>{r.Sa("Conv",s,{format:Q?"NHWC":"NCHW",auto_pad:m,dilations:[g],group:v,kernel_shape:[I],pads:B?Array.from(U.subarray(B>>>0,H>>>0)):[],strides:[q],w_is_const:()=>!!N[Y>>>0],activation:je(de),activation_params:be?Array.from(Be.subarray(be>>>0,Te>>>0)):[]})},779929:(s,m,g,v,I,B,H,q,Q,Y,de,be,Te,R,ce,Ie)=>{r.Sa("Conv",s,{format:be?"NHWC":"NCHW",auto_pad:m,dilations:[g,v],group:I,kernel_shape:[B,H],pads:q?Array.from(U.subarray(q>>>0,Q>>>0)):[],strides:[Y,de],w_is_const:()=>!!N[Te>>>0],activation:je(R),activation_params:ce?Array.from(Be.subarray(ce>>>0,Ie>>>0)):[]})},780320:s=>{r.Sa("Gelu",s,void 0)},780372:(s,m,g,v,I,B)=>{r.Sa("MatMulNBits",s,{k:m,n:g,accuracyLevel:v,bits:I,blockSize:B})},780499:(s,m,g,v,I,B)=>{r.Sa("MultiHeadAttention",s,{numHeads:m,isUnidirectional:g,maskFilterValue:v,scale:I,doRotary:B})},780658:(s,m,g,v,I)=>{r.Sa("RotaryEmbedding",s,{interleaved:!!m,numHeads:g,rotaryEmbeddingDim:v,scale:I})},780797:(s,m)=>{r.Sa("SkipLayerNormalization",s,{epsilon:m})},780878:s=>{r.Bb(s)},780912:(s,m)=>r.Db(s,m,r.fb.Eb,r.fb.errors)};function zt(s){this.name="ExitStatus",this.message=`Program terminated with exit(${s})`,this.status=s}function xt(s){this.cb=s-24,this.sb=function(m){re[this.cb+4>>>2>>>0]=m},this.rb=function(m){re[this.cb+8>>>2>>>0]=m},this.kb=function(m,g){this.jb(),this.sb(m),this.rb(g)},this.jb=function(){re[this.cb+16>>>2>>>0]=0}}var nr=0,Ft=0,br=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ut=(s,m,g)=>{m>>>=0;var v=m+g;for(g=m;s[g]&&!(g>=v);)++g;if(16<g-m&&s.buffer&&br)return br.decode(s.subarray(m,g));for(v="";m<g;){var I=s[m++];if(I&128){var B=s[m++]&63;if((I&224)==192)v+=String.fromCharCode((I&31)<<6|B);else{var H=s[m++]&63;I=(I&240)==224?(I&15)<<12|B<<6|H:(I&7)<<18|B<<12|H<<6|s[m++]&63,65536>I?v+=String.fromCharCode(I):(I-=65536,v+=String.fromCharCode(55296|I>>10,56320|I&1023))}}else v+=String.fromCharCode(I)}return v},je=(s,m)=>(s>>>=0)?Ut(G,s,m):"",Rt=s=>{for(var m=0,g=0;g<s.length;++g){var v=s.charCodeAt(g);127>=v?m++:2047>=v?m+=2:55296<=v&&57343>=v?(m+=4,++g):m+=3}return m},Ct=(s,m,g,v)=>{if(g>>>=0,!(0<v))return 0;var I=g;v=g+v-1;for(var B=0;B<s.length;++B){var H=s.charCodeAt(B);if(55296<=H&&57343>=H){var q=s.charCodeAt(++B);H=65536+((H&1023)<<10)|q&1023}if(127>=H){if(g>=v)break;m[g++>>>0]=H}else{if(2047>=H){if(g+1>=v)break;m[g++>>>0]=192|H>>6}else{if(65535>=H){if(g+2>=v)break;m[g++>>>0]=224|H>>12}else{if(g+3>=v)break;m[g++>>>0]=240|H>>18,m[g++>>>0]=128|H>>12&63}m[g++>>>0]=128|H>>6&63}m[g++>>>0]=128|H&63}}return m[g>>>0]=0,g-I},wr=s=>{if(s===null)return"null";var m=typeof s;return m==="object"||m==="array"||m==="function"?s.toString():""+s},jr,it=s=>{for(var m="";G[s>>>0];)m+=jr[G[s++>>>0]];return m},vr={},qt={},$r={},ht;function Kr(s,m,g={}){var v=m.name;if(!s)throw new ht(`type "${v}" must have a positive integer typeid pointer`);if(qt.hasOwnProperty(s)){if(g.ub)return;throw new ht(`Cannot register type \'${v}\' twice`)}qt[s]=m,delete $r[s],vr.hasOwnProperty(s)&&(m=vr[s],delete vr[s],m.forEach(I=>I()))}function Ze(s,m,g={}){if(!("argPackAdvance"in m))throw new TypeError("registerType registeredInstance requires argPackAdvance");Kr(s,m,g)}var _r=(s,m,g)=>{switch(m){case 1:return g?v=>N[v>>>0>>>0]:v=>G[v>>>0>>>0];case 2:return g?v=>oe[v>>>1>>>0]:v=>X[v>>>1>>>0];case 4:return g?v=>U[v>>>2>>>0]:v=>re[v>>>2>>>0];case 8:return g?v=>Ee[v>>>3]:v=>Ae[v>>>3];default:throw new TypeError(`invalid integer width (${m}): ${s}`)}};function Sr(){this.$a=[void 0],this.nb=[]}var ze=new Sr;function xr(s){s>>>=0,s>=ze.cb&&--ze.get(s).qb===0&&ze.jb(s)}var _e=s=>{if(!s)throw new ht("Cannot use deleted val. handle = "+s);return ze.get(s).value},at=s=>{switch(s){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return ze.kb({qb:1,value:s})}};function or(s){return this.fromWireType(U[s>>>2>>>0])}var Cr=(s,m)=>{switch(m){case 4:return function(g){return this.fromWireType(Be[g>>>2>>>0])};case 8:return function(g){return this.fromWireType(te[g>>>3>>>0])};default:throw new TypeError(`invalid float width (${m}): ${s}`)}};function Kn(s){return this.fromWireType(re[s>>>2>>>0])}var Ar=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Yn=(s,m)=>{for(var g=s>>1,v=g+m/2;!(g>=v)&&X[g>>>0];)++g;if(g<<=1,32<g-s&&Ar)return Ar.decode(G.subarray(s>>>0,g>>>0));for(g="",v=0;!(v>=m/2);++v){var I=oe[s+2*v>>>1>>>0];if(I==0)break;g+=String.fromCharCode(I)}return g},le=(s,m,g)=>{if(g??=2147483647,2>g)return 0;g-=2;var v=m;g=g<2*s.length?g/2:s.length;for(var I=0;I<g;++I)oe[m>>>1>>>0]=s.charCodeAt(I),m+=2;return oe[m>>>1>>>0]=0,m-v},ir=s=>2*s.length,Yr=(s,m)=>{for(var g=0,v="";!(g>=m/4);){var I=U[s+4*g>>>2>>>0];if(I==0)break;++g,65536<=I?(I-=65536,v+=String.fromCharCode(55296|I>>10,56320|I&1023)):v+=String.fromCharCode(I)}return v},Zn=(s,m,g)=>{if(m>>>=0,g??=2147483647,4>g)return 0;var v=m;g=v+g-4;for(var I=0;I<s.length;++I){var B=s.charCodeAt(I);if(55296<=B&&57343>=B){var H=s.charCodeAt(++I);B=65536+((B&1023)<<10)|H&1023}if(U[m>>>2>>>0]=B,m+=4,m+4>g)break}return U[m>>>2>>>0]=0,m-v},Zr=s=>{for(var m=0,g=0;g<s.length;++g){var v=s.charCodeAt(g);55296<=v&&57343>=v&&++g,m+=4}return m},Ir=(s,m)=>{var g=qt[s];if(g===void 0)throw s=Zt(s),g=it(s),st(s),new ht(m+" has unknown type "+g);return g},Tr=(s,m,g)=>{var v=[];return s=s.toWireType(v,g),v.length&&(re[m>>>2>>>0]=at(v)),s},jt=s=>{try{s()}catch(m){F(m)}};function Xr(){var s=ae,m={};for(let[g,v]of Object.entries(s))m[g]=typeof v=="function"?function(){Vt.push(g);try{return v.apply(null,arguments)}finally{k||(Vt.pop(),tt&&bt===1&&Vt.length===0&&(bt=0,jt(mn),typeof Fibers<"u"&&Fibers.Kb()))}}:v;return m}var bt=0,tt=null,Er=0,Vt=[],Pr={},Or={},Jr=0,ar=null,Qr=[];function en(){return new Promise((s,m)=>{ar={resolve:s,reject:m}})}function tn(){var s=Wt(65548),m=s+12;re[s>>>2>>>0]=m,re[s+4>>>2>>>0]=m+65536,m=Vt[0];var g=Pr[m];return g===void 0&&(g=Jr++,Pr[m]=g,Or[g]=m),U[s+8>>>2>>>0]=g,s}function rn(s){if(!k){if(bt===0){var m=!1,g=!1;s((v=0)=>{if(!k&&(Er=v,m=!0,g)){bt=2,jt(()=>wt(tt)),typeof Browser<"u"&&Browser.lb.tb&&Browser.lb.resume(),v=!1;try{var I=(0,ae[Or[U[tt+8>>>2>>>0]]])()}catch(q){I=q,v=!0}var B=!1;if(!tt){var H=ar;H&&(ar=null,(v?H.reject:H.resolve)(I),B=!0)}if(v&&!B)throw I}}),g=!0,m||(bt=1,tt=tn(),typeof Browser<"u"&&Browser.lb.tb&&Browser.lb.pause(),jt(()=>Xt(tt)))}else bt===2?(bt=0,jt(mt),st(tt),tt=null,Qr.forEach(v=>{if(!k)try{v();try{W=W=v=W,r.onExit?.(v),k=!0,p(v,new zt(v))}catch(I){I instanceof zt||I=="unwind"||p(1,I)}}catch(I){I instanceof zt||I=="unwind"||p(1,I)}})):F(`invalid state: ${bt}`);return Er}}function kr(s){return rn(m=>{s().then(m)})}var Kt=[],nn={},sr=s=>{var m=nn[s];return m===void 0?it(s):m},Rr=()=>typeof globalThis=="object"?globalThis:Function("return this")(),pt=s=>{var m=Kt.length;return Kt.push(s),m},Br=(s,m)=>{for(var g=Array(s),v=0;v<s;++v)g[v]=Ir(re[m+4*v>>>2>>>0],"parameter "+v);return g},ur=(s,m)=>Object.defineProperty(m,"name",{value:s});function Xn(s){var m=Function;if(!(m instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof m} which is not a function`);var g=ur(m.name||"unknownFunctionName",function(){});return g.prototype=m.prototype,g=new g,s=m.apply(g,s),s instanceof Object?s:g}var rt=s=>s%4===0&&(s%100!==0||s%400===0),on=[0,31,60,91,121,152,182,213,244,274,305,335],gt=[0,31,59,90,120,151,181,212,243,273,304,334],Dr=s=>{var m=Rt(s)+1,g=Wt(m);return g&&Ct(s,G,g,m),g},lr=[],nt=(s,m)=>{lr.length=0;for(var g;g=G[s++>>>0];){var v=g!=105;v&=g!=112,m+=v&&m%8?4:0,lr.push(g==112?re[m>>>2>>>0]:g==106?Ee[m>>>3]:g==105?U[m>>>2>>>0]:te[m>>>3>>>0]),m+=v?8:4}return lr},Yt={},Xe=()=>{if(!ot){var s={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:c||"./this.program"},m;for(m in Yt)Yt[m]===void 0?delete s[m]:s[m]=Yt[m];var g=[];for(m in s)g.push(`${m}=${s[m]}`);ot=g}return ot},ot,an=[null,[],[]],sn=[31,29,31,30,31,30,31,31,30,31,30,31],un=[31,28,31,30,31,30,31,31,30,31,30,31];function ln(s){var m=Array(Rt(s)+1);return Ct(s,m,0,m.length),m}function dn(s,m,g,v){function I(R,ce,Ie){for(R=typeof R=="number"?R.toString():R||"";R.length<ce;)R=Ie[0]+R;return R}function B(R,ce){return I(R,ce,"0")}function H(R,ce){function Ie(Mt){return 0>Mt?-1:0<Mt?1:0}var Dt;return(Dt=Ie(R.getFullYear()-ce.getFullYear()))===0&&(Dt=Ie(R.getMonth()-ce.getMonth()))===0&&(Dt=Ie(R.getDate()-ce.getDate())),Dt}function q(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function Q(R){var ce=R.ab;for(R=new Date(new Date(R.bb+1900,0,1).getTime());0<ce;){var Ie=R.getMonth(),Dt=(rt(R.getFullYear())?sn:un)[Ie];if(ce>Dt-R.getDate())ce-=Dt-R.getDate()+1,R.setDate(1),11>Ie?R.setMonth(Ie+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+ce);break}}return Ie=new Date(R.getFullYear()+1,0,4),ce=q(new Date(R.getFullYear(),0,4)),Ie=q(Ie),0>=H(ce,R)?0>=H(Ie,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}s>>>=0,m>>>=0,g>>>=0,v>>>=0;var Y=re[v+40>>>2>>>0];v={Hb:U[v>>>2>>>0],Gb:U[v+4>>>2>>>0],hb:U[v+8>>>2>>>0],mb:U[v+12>>>2>>>0],ib:U[v+16>>>2>>>0],bb:U[v+20>>>2>>>0],Wa:U[v+24>>>2>>>0],ab:U[v+28>>>2>>>0],Jb:U[v+32>>>2>>>0],Fb:U[v+36>>>2>>>0],Ib:Y?je(Y):""},g=je(g),Y={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var de in Y)g=g.replace(new RegExp(de,"g"),Y[de]);var be="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Te="January February March April May June July August September October November December".split(" ");Y={"%a":R=>be[R.Wa].substring(0,3),"%A":R=>be[R.Wa],"%b":R=>Te[R.ib].substring(0,3),"%B":R=>Te[R.ib],"%C":R=>B((R.bb+1900)/100|0,2),"%d":R=>B(R.mb,2),"%e":R=>I(R.mb,2," "),"%g":R=>Q(R).toString().substring(2),"%G":R=>Q(R),"%H":R=>B(R.hb,2),"%I":R=>(R=R.hb,R==0?R=12:12<R&&(R-=12),B(R,2)),"%j":R=>{for(var ce=0,Ie=0;Ie<=R.ib-1;ce+=(rt(R.bb+1900)?sn:un)[Ie++]);return B(R.mb+ce,3)},"%m":R=>B(R.ib+1,2),"%M":R=>B(R.Gb,2),"%n":()=>`\n`,"%p":R=>0<=R.hb&&12>R.hb?"AM":"PM","%S":R=>B(R.Hb,2),"%t":()=>"	","%u":R=>R.Wa||7,"%U":R=>B(Math.floor((R.ab+7-R.Wa)/7),2),"%V":R=>{var ce=Math.floor((R.ab+7-(R.Wa+6)%7)/7);if(2>=(R.Wa+371-R.ab-2)%7&&ce++,ce)ce==53&&(Ie=(R.Wa+371-R.ab)%7,Ie==4||Ie==3&&rt(R.bb)||(ce=1));else{ce=52;var Ie=(R.Wa+7-R.ab-1)%7;(Ie==4||Ie==5&&rt(R.bb%400-1))&&ce++}return B(ce,2)},"%w":R=>R.Wa,"%W":R=>B(Math.floor((R.ab+7-(R.Wa+6)%7)/7),2),"%y":R=>(R.bb+1900).toString().substring(2),"%Y":R=>R.bb+1900,"%z":R=>{R=R.Fb;var ce=0<=R;return R=Math.abs(R)/60,(ce?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Ib,"%%":()=>"%"},g=g.replace(/%%/g,"\\0\\0");for(de in Y)g.includes(de)&&(g=g.replace(new RegExp(de,"g"),Y[de](v)));return g=g.replace(/\\0\\0/g,"%"),de=ln(g),de.length>m?0:(N.set(de,s>>>0),de.length-1)}for(var cn=Array(256),dr=0;256>dr;++dr)cn[dr]=String.fromCharCode(dr);jr=cn,ht=r.BindingError=class extends Error{constructor(s){super(s),this.name="BindingError"}},r.InternalError=class extends Error{constructor(s){super(s),this.name="InternalError"}},Object.assign(Sr.prototype,{get(s){return this.$a[s]},has(s){return this.$a[s]!==void 0},kb(s){var m=this.nb.pop()||this.$a.length;return this.$a[m]=s,m},jb(s){this.$a[s]=void 0,this.nb.push(s)}}),ze.$a.push({value:void 0},{value:null},{value:!0},{value:!1}),ze.cb=ze.$a.length,r.count_emval_handles=()=>{for(var s=0,m=ze.cb;m<ze.$a.length;++m)ze.$a[m]!==void 0&&++s;return s};var Jn={ia:function(s,m,g){return kr(async()=>{await r.zb(s,m,g)})},a:function(s,m,g){throw s>>>=0,new xt(s).kb(m>>>0,g>>>0),nr=s,Ft++,nr},w:function(){return 0},ca:function(){},P:function(){},R:function(){},J:function(){return 0},aa:function(){},X:function(){},$:function(){},D:function(){},Q:function(){},N:function(){},ba:function(){},O:function(){},G:function(s,m,g,v,I){m>>>=0,m=it(m);var B=m.indexOf("u")!=-1;B&&(I=(1n<<64n)-1n),Ze(s>>>0,{name:m,fromWireType:H=>H,toWireType:function(H,q){if(typeof q!="bigint"&&typeof q!="number")throw new TypeError(`Cannot convert "${wr(q)}" to ${this.name}`);if(q<v||q>I)throw new TypeError(`Passing a number "${wr(q)}" from JS side to C/C++ side to an argument of type "${m}", which is outside the valid range [${v}, ${I}]!`);return q},argPackAdvance:8,readValueFromPointer:_r(m,g>>>0,!B),eb:null})},ga:function(s,m,g,v){m=it(m>>>0),Ze(s>>>0,{name:m,fromWireType:function(I){return!!I},toWireType:function(I,B){return B?g:v},argPackAdvance:8,readValueFromPointer:function(I){return this.fromWireType(G[I>>>0])},eb:null})},fa:function(s,m){m=it(m>>>0),Ze(s>>>0,{name:m,fromWireType:g=>{var v=_e(g);return xr(g),v},toWireType:(g,v)=>at(v),argPackAdvance:8,readValueFromPointer:or,eb:null})},F:function(s,m,g){m=it(m>>>0),Ze(s>>>0,{name:m,fromWireType:v=>v,toWireType:(v,I)=>I,argPackAdvance:8,readValueFromPointer:Cr(m,g>>>0),eb:null})},s:function(s,m,g,v,I){if(s>>>=0,g>>>=0,m=it(m>>>0),I===-1&&(I=4294967295),I=q=>q,v===0){var B=32-8*g;I=q=>q<<B>>>B}var H=m.includes("unsigned")?function(q,Q){return Q>>>0}:function(q,Q){return Q};Ze(s,{name:m,fromWireType:I,toWireType:H,argPackAdvance:8,readValueFromPointer:_r(m,g,v!==0),eb:null})},n:function(s,m,g){function v(B){return new I(N.buffer,re[B+4>>>2>>>0],re[B>>>2>>>0])}var I=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][m];g=it(g>>>0),Ze(s>>>0,{name:g,fromWireType:v,argPackAdvance:8,readValueFromPointer:v},{ub:!0})},H:function(s,m){m=it(m>>>0);var g=m==="std::string";Ze(s>>>0,{name:m,fromWireType:function(v){var I=re[v>>>2>>>0],B=v+4;if(g)for(var H=B,q=0;q<=I;++q){var Q=B+q;if(q==I||G[Q>>>0]==0){if(H=je(H,Q-H),Y===void 0)var Y=H;else Y+=String.fromCharCode(0),Y+=H;H=Q+1}}else{for(Y=Array(I),q=0;q<I;++q)Y[q]=String.fromCharCode(G[B+q>>>0]);Y=Y.join("")}return st(v),Y},toWireType:function(v,I){I instanceof ArrayBuffer&&(I=new Uint8Array(I));var B=typeof I=="string";if(!(B||I instanceof Uint8Array||I instanceof Uint8ClampedArray||I instanceof Int8Array))throw new ht("Cannot pass non-string to std::string");var H=g&&B?Rt(I):I.length,q=Wt(4+H+1),Q=q+4;if(re[q>>>2>>>0]=H,g&&B)Ct(I,G,Q,H+1);else if(B)for(B=0;B<H;++B){var Y=I.charCodeAt(B);if(255<Y)throw st(Q),new ht("String has UTF-16 code units that do not fit in 8 bits");G[Q+B>>>0]=Y}else for(B=0;B<H;++B)G[Q+B>>>0]=I[B];return v!==null&&v.push(st,q),q},argPackAdvance:8,readValueFromPointer:Kn,eb(v){st(v)}})},y:function(s,m,g){if(m>>>=0,g>>>=0,g=it(g),m===2)var v=Yn,I=le,B=ir,H=()=>X,q=1;else m===4&&(v=Yr,I=Zn,B=Zr,H=()=>re,q=2);Ze(s>>>0,{name:g,fromWireType:Q=>{for(var Y=re[Q>>>2>>>0],de=H(),be,Te=Q+4,R=0;R<=Y;++R){var ce=Q+4+R*m;(R==Y||de[ce>>>q]==0)&&(Te=v(Te,ce-Te),be===void 0?be=Te:(be+=String.fromCharCode(0),be+=Te),Te=ce+m)}return st(Q),be},toWireType:(Q,Y)=>{if(typeof Y!="string")throw new ht(`Cannot pass non-string to C++ string type ${g}`);var de=B(Y),be=Wt(4+de+m);return re[be>>>2]=de>>q,I(Y,be+4,de+m),Q!==null&&Q.push(st,be),be},argPackAdvance:8,readValueFromPointer:or,eb(Q){st(Q)}})},ha:function(s,m){m=it(m>>>0),Ze(s>>>0,{vb:!0,name:m,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},da:()=>1,u:function(s,m,g){return m>>>=0,g>>>=0,s=_e(s>>>0),m=Ir(m,"emval::as"),Tr(m,g,s)},v:function(s){return s>>>=0,kr(()=>(s=_e(s),s.then(at)))},o:function(s,m,g,v){return g>>>=0,v>>>=0,s=Kt[s>>>0],m=_e(m>>>0),s(null,m,g,v)},l:function(s,m,g,v,I){return g>>>=0,v>>>=0,I>>>=0,s=Kt[s>>>0],m=_e(m>>>0),g=sr(g),s(m,m[g],v,I)},b:xr,z:function(s,m){return m>>>=0,s=_e(s>>>0),m=_e(m),s==m},m:function(s){return s>>>=0,s===0?at(Rr()):(s=sr(s),at(Rr()[s]))},i:function(s,m,g){m=Br(s,m>>>0);var v=m.shift();s--;var I=`return function (obj, func, destructorsRef, args) {\n`,B=0,H=[];g===0&&H.push("obj");for(var q=["retType"],Q=[v],Y=0;Y<s;++Y)H.push("arg"+Y),q.push("argType"+Y),Q.push(m[Y]),I+=`  var arg${Y} = argType${Y}.readValueFromPointer(args${B?"+"+B:""});\n`,B+=m[Y].argPackAdvance;for(I+=`  var rv = ${g===1?"new func":"func.call"}(${H.join(", ")});\n`,Y=0;Y<s;++Y)m[Y].deleteObject&&(I+=`  argType${Y}.deleteObject(arg${Y});\n`);return v.vb||(q.push("emval_returnValue"),Q.push(Tr),I+=`  return emval_returnValue(retType, destructorsRef, rv);\n`),q.push(I+`};\n`),s=Xn(q).apply(null,Q),g=`methodCaller<(${m.map(de=>de.name).join(", ")}) => ${v.name}>`,pt(ur(g,s))},r:function(s,m){return m>>>=0,s=_e(s>>>0),m=_e(m),at(s[m])},d:function(s){s>>>=0,4<s&&(ze.get(s).qb+=1)},t:function(){return at([])},k:function(s){s=_e(s>>>0);for(var m=Array(s.length),g=0;g<s.length;g++)m[g]=s[g];return at(m)},f:function(s){return at(sr(s>>>0))},j:function(){return at({})},h:function(s){s>>>=0;for(var m=_e(s);m.length;){var g=m.pop();m.pop()(g)}xr(s)},g:function(s,m,g){m>>>=0,g>>>=0,s=_e(s>>>0),m=_e(m),g=_e(g),s[m]=g},c:function(s,m){return m>>>=0,s=Ir(s>>>0,"_emval_take_value"),s=s.readValueFromPointer(m),at(s)},U:function(s,m){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),m>>>=0,s=new Date(1e3*s),U[m>>>2>>>0]=s.getUTCSeconds(),U[m+4>>>2>>>0]=s.getUTCMinutes(),U[m+8>>>2>>>0]=s.getUTCHours(),U[m+12>>>2>>>0]=s.getUTCDate(),U[m+16>>>2>>>0]=s.getUTCMonth(),U[m+20>>>2>>>0]=s.getUTCFullYear()-1900,U[m+24>>>2>>>0]=s.getUTCDay(),U[m+28>>>2>>>0]=(s.getTime()-Date.UTC(s.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},V:function(s,m){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),m>>>=0,s=new Date(1e3*s),U[m>>>2>>>0]=s.getSeconds(),U[m+4>>>2>>>0]=s.getMinutes(),U[m+8>>>2>>>0]=s.getHours(),U[m+12>>>2>>>0]=s.getDate(),U[m+16>>>2>>>0]=s.getMonth(),U[m+20>>>2>>>0]=s.getFullYear()-1900,U[m+24>>>2>>>0]=s.getDay(),U[m+28>>>2>>>0]=(rt(s.getFullYear())?on:gt)[s.getMonth()]+s.getDate()-1|0,U[m+36>>>2>>>0]=-(60*s.getTimezoneOffset());var g=new Date(s.getFullYear(),6,1).getTimezoneOffset(),v=new Date(s.getFullYear(),0,1).getTimezoneOffset();U[m+32>>>2>>>0]=(g!=v&&s.getTimezoneOffset()==Math.min(v,g))|0},W:function(s){s>>>=0;var m=new Date(U[s+20>>>2>>>0]+1900,U[s+16>>>2>>>0],U[s+12>>>2>>>0],U[s+8>>>2>>>0],U[s+4>>>2>>>0],U[s>>>2>>>0],0),g=U[s+32>>>2>>>0],v=m.getTimezoneOffset(),I=new Date(m.getFullYear(),6,1).getTimezoneOffset(),B=new Date(m.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(B,I);return 0>g?U[s+32>>>2>>>0]=+(I!=B&&H==v):0<g!=(H==v)&&(I=Math.max(B,I),m.setTime(m.getTime()+6e4*((0<g?H:I)-v))),U[s+24>>>2>>>0]=m.getDay(),U[s+28>>>2>>>0]=(rt(m.getFullYear())?on:gt)[m.getMonth()]+m.getDate()-1|0,U[s>>>2>>>0]=m.getSeconds(),U[s+4>>>2>>>0]=m.getMinutes(),U[s+8>>>2>>>0]=m.getHours(),U[s+12>>>2>>>0]=m.getDate(),U[s+16>>>2>>>0]=m.getMonth(),U[s+20>>>2>>>0]=m.getYear(),s=m.getTime(),isNaN(s)?(U[pn()>>>2>>>0]=61,s=-1):s/=1e3,BigInt(s)},S:function(){return-52},T:function(){},L:function(s,m,g){function v(Q){return(Q=Q.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Q[1]:"GMT"}g>>>=0;var I=new Date().getFullYear(),B=new Date(I,0,1),H=new Date(I,6,1);I=B.getTimezoneOffset();var q=H.getTimezoneOffset();re[s>>>0>>>2>>>0]=60*Math.max(I,q),U[m>>>0>>>2>>>0]=+(I!=q),s=v(B),m=v(H),s=Dr(s),m=Dr(m),q<I?(re[g>>>2>>>0]=s,re[g+4>>>2>>>0]=m):(re[g>>>2>>>0]=m,re[g+4>>>2>>>0]=s)},A:()=>{F("")},e:function(s,m,g){return s>>>=0,m=nt(m>>>0,g>>>0),ct[s].apply(null,m)},I:function(s,m,g){return s>>>=0,m=nt(m>>>0,g>>>0),ct[s].apply(null,m)},E:()=>Date.now(),M:function(){return 4294901760},q:()=>performance.now(),K:function(s){s>>>=0;var m=G.length;if(4294901760<s)return!1;for(var g=1;4>=g;g*=2){var v=m*(1+.2/g);v=Math.min(v,s+100663296);var I=Math;v=Math.max(s,v);e:{I=(I.min.call(I,4294901760,v+(65536-v%65536)%65536)-T.buffer.byteLength+65535)/65536;try{T.grow(I),Me();var B=1;break e}catch{}B=void 0}if(B)return!0}return!1},Z:function(s,m){s>>>=0,m>>>=0;var g=0;return Xe().forEach((v,I)=>{var B=m+g;for(I=re[s+4*I>>>2>>>0]=B,B=0;B<v.length;++B)N[I++>>>0>>>0]=v.charCodeAt(B);N[I>>>0>>>0]=0,g+=v.length+1}),0},_:function(s,m){s>>>=0,m>>>=0;var g=Xe();re[s>>>2>>>0]=g.length;var v=0;return g.forEach(I=>v+=I.length+1),re[m>>>2>>>0]=v,0},x:()=>52,C:function(){return 52},Y:function(){return 70},B:function(s,m,g,v){m>>>=0,g>>>=0,v>>>=0;for(var I=0,B=0;B<g;B++){var H=re[m>>>2>>>0],q=re[m+4>>>2>>>0];m+=8;for(var Q=0;Q<q;Q++){var Y=G[H+Q>>>0],de=an[s];Y===0||Y===10?((s===1?x:P)(Ut(de,0)),de.length=0):de.push(Y)}I+=q}return re[v>>>2>>>0]=I,0},ea:dn,p:function(s,m,g,v){return dn(s>>>0,m>>>0,g>>>0,v>>>0)}},ae=function(){function s(g){return ae=g.exports,ae=Xr(),ae=fn(),T=ae.ja,Me(),he.unshift(ae.ka),ge--,ge==0&&(Pe!==null&&(clearInterval(Pe),Pe=null),Le&&(g=Le,Le=null,g())),ae}var m={a:Jn};if(ge++,r.instantiateWasm)try{return r.instantiateWasm(m,s)}catch(g){P(`Module.instantiateWasm callback failed with error: ${g}`),i(g)}return qe(m,function(g){s(g.instance)}).catch(i),{}}();r._OrtInit=(s,m)=>(r._OrtInit=ae.la)(s,m),r._OrtGetLastError=(s,m)=>(r._OrtGetLastError=ae.ma)(s,m),r._OrtCreateSessionOptions=(s,m,g,v,I,B,H,q,Q,Y)=>(r._OrtCreateSessionOptions=ae.na)(s,m,g,v,I,B,H,q,Q,Y),r._OrtAppendExecutionProvider=(s,m)=>(r._OrtAppendExecutionProvider=ae.oa)(s,m),r._OrtAddFreeDimensionOverride=(s,m,g)=>(r._OrtAddFreeDimensionOverride=ae.pa)(s,m,g),r._OrtAddSessionConfigEntry=(s,m,g)=>(r._OrtAddSessionConfigEntry=ae.qa)(s,m,g),r._OrtReleaseSessionOptions=s=>(r._OrtReleaseSessionOptions=ae.ra)(s),r._OrtCreateSession=(s,m,g)=>(r._OrtCreateSession=ae.sa)(s,m,g),r._OrtReleaseSession=s=>(r._OrtReleaseSession=ae.ta)(s),r._OrtGetInputOutputCount=(s,m,g)=>(r._OrtGetInputOutputCount=ae.ua)(s,m,g),r._OrtGetInputName=(s,m)=>(r._OrtGetInputName=ae.va)(s,m),r._OrtGetOutputName=(s,m)=>(r._OrtGetOutputName=ae.wa)(s,m),r._OrtFree=s=>(r._OrtFree=ae.xa)(s),r._OrtCreateTensor=(s,m,g,v,I,B)=>(r._OrtCreateTensor=ae.ya)(s,m,g,v,I,B),r._OrtGetTensorData=(s,m,g,v,I)=>(r._OrtGetTensorData=ae.za)(s,m,g,v,I),r._OrtReleaseTensor=s=>(r._OrtReleaseTensor=ae.Aa)(s),r._OrtCreateRunOptions=(s,m,g,v)=>(r._OrtCreateRunOptions=ae.Ba)(s,m,g,v),r._OrtAddRunConfigEntry=(s,m,g)=>(r._OrtAddRunConfigEntry=ae.Ca)(s,m,g),r._OrtReleaseRunOptions=s=>(r._OrtReleaseRunOptions=ae.Da)(s),r._OrtCreateBinding=s=>(r._OrtCreateBinding=ae.Ea)(s),r._OrtBindInput=(s,m,g)=>(r._OrtBindInput=ae.Fa)(s,m,g),r._OrtBindOutput=(s,m,g,v)=>(r._OrtBindOutput=ae.Ga)(s,m,g,v),r._OrtClearBoundOutputs=s=>(r._OrtClearBoundOutputs=ae.Ha)(s),r._OrtReleaseBinding=s=>(r._OrtReleaseBinding=ae.Ia)(s),r._OrtRunWithBinding=(s,m,g,v,I)=>(r._OrtRunWithBinding=ae.Ja)(s,m,g,v,I),r._OrtRun=(s,m,g,v,I,B,H,q)=>(r._OrtRun=ae.Ka)(s,m,g,v,I,B,H,q),r._OrtEndProfiling=s=>(r._OrtEndProfiling=ae.La)(s),r._JsepOutput=(s,m,g)=>(r._JsepOutput=ae.Ma)(s,m,g),r._JsepGetNodeName=s=>(r._JsepGetNodeName=ae.Na)(s);var pn=()=>(pn=ae.Oa)(),Wt=r._malloc=s=>(Wt=r._malloc=ae.Pa)(s),st=r._free=s=>(st=r._free=ae.Qa)(s),Zt=s=>(Zt=ae.Ra)(s),cr=()=>(cr=ae.Ta)(),pr=s=>(pr=ae.Ua)(s),Mr=s=>(Mr=ae.Va)(s),Xt=s=>(Xt=ae.Xa)(s),mn=()=>(mn=ae.Ya)(),wt=s=>(wt=ae.Za)(s),mt=()=>(mt=ae._a)();r.___start_em_js=781024,r.___stop_em_js=781185;function fn(){var s=ae;s=Object.assign({},s);var m=v=>()=>v()>>>0,g=v=>I=>v(I)>>>0;return s.Oa=m(s.Oa),s.Pa=g(s.Pa),s.Ra=g(s.Ra),s.Ta=m(s.Ta),s.Va=g(s.Va),s}r.stackAlloc=Mr,r.stackSave=cr,r.stackRestore=pr,r.UTF8ToString=je,r.stringToUTF8=(s,m,g)=>Ct(s,G,m,g),r.lengthBytesUTF8=Rt;var Bt;Le=function s(){Bt||zr(),Bt||(Le=s)};function zr(){if(!(0<ge)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;){var s=r.preRun.shift();ye.unshift(s)}for(;0<ye.length;)ye.shift()(r);if(!(0<ge||Bt||(Bt=!0,r.calledRun=!0,k))){for(;0<he.length;)he.shift()(r);for(o(r);0<ue.length;)ue.shift()(r)}}}return zr(),t.ready}})();typeof Ii=="object"&&typeof po=="object"?po.exports=Ai:typeof define=="function"&&define.amd&&define([],()=>Ai)});var Ei=Vr(()=>{});var Pi=Vr(()=>{});var Oi={};wn(Oi,{cpus:()=>ad});var ad,ki=K(()=>{ad=void 0});var Di=Vr((Bi,mo)=>{"use strict";var Ri=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return te.buffer!=ue.buffer&&et(),ue}function o(){return te.buffer!=ue.buffer&&et(),ge}function i(){return te.buffer!=ue.buffer&&et(),Pe}function u(){return te.buffer!=ue.buffer&&et(),Le}function a(){return te.buffer!=ue.buffer&&et(),F}function c(){return te.buffer!=ue.buffer&&et(),ie}function p(){return te.buffer!=ue.buffer&&et(),xe}function h(){return te.buffer!=ue.buffer&&et(),dt}var l=t,y,w;l.ready=new Promise((n,d)=>{y=n,w=d}),l.mountExternalData=(n,d)=>{(l.Fb||(l.Fb=new Map)).set(n,d)},l.unmountExternalData=()=>{delete l.Fb};let _=()=>{let n=(f,b,C)=>(...O)=>{let V=mt,L=b?.();O=f(...O);let ee=b?.();return L!==ee&&(f=ee,C(L),b=C=null),mt!=V?I():O},d=f=>async(...b)=>{try{if(l.Eb)throw Error("Session already started");let C=l.Eb={kc:b[0],errors:[]},O=await f(...b);if(l.Eb!==C)throw Error("Session mismatch");l.Ob?.flush();let V=C.errors;if(0<V.length){let L=await Promise.all(V);if(L=L.filter(ee=>ee),0<L.length)throw Error(L.join(`\n`))}return O}finally{l.Eb=null}};l._OrtCreateSession=n(l._OrtCreateSession,()=>l._OrtCreateSession,f=>l._OrtCreateSession=f),l._OrtRun=d(n(l._OrtRun,()=>l._OrtRun,f=>l._OrtRun=f)),l._OrtRunWithBinding=d(n(l._OrtRunWithBinding,()=>l._OrtRunWithBinding,f=>l._OrtRunWithBinding=f)),l._OrtBindInput=n(l._OrtBindInput,()=>l._OrtBindInput,f=>l._OrtBindInput=f),_=void 0};l.jsepInit=(n,d)=>{if(_?.(),n==="webgpu"){[l.Ob,l.ac,l.ec,l.Pb,l.dc,l.eb,l.fc,l.ic,l.bc,l.cc,l.hc]=d;let f=l.Ob;l.jsepRegisterBuffer=(b,C,O,V)=>f.registerBuffer(b,C,O,V),l.jsepGetBuffer=b=>f.getBuffer(b),l.jsepCreateDownloader=(b,C,O)=>f.createDownloader(b,C,O),l.jsepOnReleaseSession=b=>{f.onReleaseSession(b)},l.jsepOnRunStart=b=>f.onRunStart(b)}};var $=Object.assign({},l),S="./this.program",E=(n,d)=>{throw d},A=typeof window=="object",x=typeof importScripts=="function",P=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",T=l.ENVIRONMENT_IS_PTHREAD||!1,k="";function W(n){return l.locateFile?l.locateFile(n,k):k+n}var N,G,oe;if(P){var X=(uo(),mr(so)),U=(co(),mr(lo));k=x?U.dirname(k)+"/":__dirname+"/",N=(d,f)=>(d=Rt(d)?new URL(d):U.normalize(d),X.readFileSync(d,f?void 0:"utf8")),oe=d=>(d=N(d,!0),d.buffer||(d=new Uint8Array(d)),d),G=(d,f,b,C=!0)=>{d=Rt(d)?new URL(d):U.normalize(d),X.readFile(d,C?void 0:"utf8",(O,V)=>{O?b(O):f(C?V.buffer:V)})},!l.thisProgram&&1<process.argv.length&&(S=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),E=(d,f)=>{throw process.exitCode=d,f},l.inspect=()=>"[Emscripten Module object]";let n;try{n=Ei()}catch(d){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),d}global.Worker=n.Worker}else(A||x)&&(x?k=self.location.href:typeof document<"u"&&document.currentScript&&(k=document.currentScript.src),typeof e<"u"&&e&&(k=e),k.indexOf("blob:")!==0?k=k.substr(0,k.replace(/[?#].*/,"").lastIndexOf("/")+1):k="",P||(N=n=>{var d=new XMLHttpRequest;return d.open("GET",n,!1),d.send(null),d.responseText},x&&(oe=n=>{var d=new XMLHttpRequest;return d.open("GET",n,!1),d.responseType="arraybuffer",d.send(null),new Uint8Array(d.response)}),G=(n,d,f)=>{var b=new XMLHttpRequest;b.open("GET",n,!0),b.responseType="arraybuffer",b.onload=()=>{b.status==200||b.status==0&&b.response?d(b.response):f()},b.onerror=f,b.send(null)}));P&&typeof performance>"u"&&(global.performance=Pi().performance);var re=console.log.bind(console),Be=console.error.bind(console);P&&(re=(...n)=>X.writeSync(1,n.join(" ")+`\n`),Be=(...n)=>X.writeSync(2,n.join(" ")+`\n`));var Ee=re,Ae=Be;Object.assign(l,$),$=null,typeof WebAssembly!="object"&&Ut("no native wasm support detected");var te,Me,ye=!1,he,ue,ge,Pe,Le,F,ie,xe,Ne,Ye,dt;function et(){var n=te.buffer;l.HEAP8=ue=new Int8Array(n),l.HEAP16=Pe=new Int16Array(n),l.HEAPU8=ge=new Uint8Array(n),l.HEAPU16=Le=new Uint16Array(n),l.HEAP32=F=new Int32Array(n),l.HEAPU32=ie=new Uint32Array(n),l.HEAPF32=xe=new Float32Array(n),l.HEAPF64=dt=new Float64Array(n),l.HEAP64=Ne=new BigInt64Array(n),l.HEAPU64=Ye=new BigUint64Array(n)}var Fe=16777216;if(T)te=l.wasmMemory;else if(l.wasmMemory)te=l.wasmMemory;else if(te=new WebAssembly.Memory({initial:Fe/65536,maximum:65536,shared:!0}),!(te.buffer instanceof SharedArrayBuffer))throw Ae("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),P&&Ae("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");et(),Fe=te.buffer.byteLength;var qe=[],ct=[],zt=[],xt=0,nr=null,Ft=null;function br(){if(xt--,xt==0&&(nr!==null&&(clearInterval(nr),nr=null),Ft)){var n=Ft;Ft=null,n()}}function Ut(n){throw n="Aborted("+n+")",Ae(n),ye=!0,he=1,n=new WebAssembly.RuntimeError(n+". Build with -sASSERTIONS for more info."),w(n),n}var je=n=>n.startsWith("data:application/octet-stream;base64,"),Rt=n=>n.startsWith("file://"),Ct;Ct="ort-wasm-simd-threaded.wasm",je(Ct)||(Ct=W(Ct));function wr(n){if(oe)return oe(n);throw"both async and sync fetching of the wasm failed"}function jr(n){if(A||x){if(typeof fetch=="function"&&!Rt(n))return fetch(n,{credentials:"same-origin"}).then(d=>{if(!d.ok)throw"failed to load wasm binary file at \'"+n+"\'";return d.arrayBuffer()}).catch(()=>wr(n));if(G)return new Promise((d,f)=>{G(n,b=>d(new Uint8Array(b)),f)})}return Promise.resolve().then(()=>wr(n))}function it(n,d,f){return jr(n).then(b=>WebAssembly.instantiate(b,d)).then(b=>b).then(f,b=>{Ae(`failed to asynchronously prepare wasm: ${b}`),Ut(b)})}function vr(n,d){var f=Ct;return typeof WebAssembly.instantiateStreaming!="function"||je(f)||Rt(f)||P||typeof fetch!="function"?it(f,n,d):fetch(f,{credentials:"same-origin"}).then(b=>WebAssembly.instantiateStreaming(b,n).then(d,function(C){return Ae(`wasm streaming compile failed: ${C}`),Ae("falling back to ArrayBuffer instantiation"),it(f,n,d)}))}var qt={907972:(n,d,f,b)=>{if(typeof l>"u"||!l.Fb)return 1;if(n=ze(n>>>0),n.startsWith("./")&&(n=n.substring(2)),n=l.Fb.get(n),!n)return 2;if(d>>>=0,f>>>=0,b>>>=0,d+f>n.byteLength)return 3;try{return o().set(n.subarray(d,d+f),b>>>0),0}catch{return 4}},908473:()=>{l.bc()},908504:()=>{l.cc()},908533:()=>{l.hc()},908558:n=>l.ac(n),908591:n=>l.ec(n),908623:(n,d,f)=>{l.Pb(n,d,f,!0)},908662:(n,d,f)=>{l.Pb(n,d,f)},908695:n=>{l.eb("Abs",n,void 0)},908746:n=>{l.eb("Neg",n,void 0)},908797:n=>{l.eb("Floor",n,void 0)},908850:n=>{l.eb("Ceil",n,void 0)},908902:n=>{l.eb("Reciprocal",n,void 0)},908960:n=>{l.eb("Sqrt",n,void 0)},909012:n=>{l.eb("Exp",n,void 0)},909063:n=>{l.eb("Erf",n,void 0)},909114:n=>{l.eb("Sigmoid",n,void 0)},909169:(n,d,f)=>{l.eb("HardSigmoid",n,{alpha:d,beta:f})},909248:n=>{l.eb("Log",n,void 0)},909299:n=>{l.eb("Sin",n,void 0)},909350:n=>{l.eb("Cos",n,void 0)},909401:n=>{l.eb("Tan",n,void 0)},909452:n=>{l.eb("Asin",n,void 0)},909504:n=>{l.eb("Acos",n,void 0)},909556:n=>{l.eb("Atan",n,void 0)},909608:n=>{l.eb("Sinh",n,void 0)},909660:n=>{l.eb("Cosh",n,void 0)},909712:n=>{l.eb("Asinh",n,void 0)},909765:n=>{l.eb("Acosh",n,void 0)},909818:n=>{l.eb("Atanh",n,void 0)},909871:n=>{l.eb("Tanh",n,void 0)},909923:n=>{l.eb("Not",n,void 0)},909974:(n,d,f)=>{l.eb("Clip",n,{min:d,max:f})},910043:n=>{l.eb("Clip",n,void 0)},910095:(n,d)=>{l.eb("Elu",n,{alpha:d})},910153:n=>{l.eb("Relu",n,void 0)},910205:(n,d)=>{l.eb("LeakyRelu",n,{alpha:d})},910269:(n,d)=>{l.eb("ThresholdedRelu",n,{alpha:d})},910339:(n,d)=>{l.eb("Cast",n,{to:d})},910397:n=>{l.eb("Add",n,void 0)},910448:n=>{l.eb("Sub",n,void 0)},910499:n=>{l.eb("Mul",n,void 0)},910550:n=>{l.eb("Div",n,void 0)},910601:n=>{l.eb("Pow",n,void 0)},910652:n=>{l.eb("Equal",n,void 0)},910705:n=>{l.eb("Greater",n,void 0)},910760:n=>{l.eb("GreaterOrEqual",n,void 0)},910822:n=>{l.eb("Less",n,void 0)},910874:n=>{l.eb("LessOrEqual",n,void 0)},910933:(n,d,f,b,C)=>{l.eb("ReduceMean",n,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},911092:(n,d,f,b,C)=>{l.eb("ReduceMax",n,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},911250:(n,d,f,b,C)=>{l.eb("ReduceMin",n,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},911408:(n,d,f,b,C)=>{l.eb("ReduceProd",n,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},911567:(n,d,f,b,C)=>{l.eb("ReduceSum",n,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},911725:(n,d,f,b,C)=>{l.eb("ReduceL1",n,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},911882:(n,d,f,b,C)=>{l.eb("ReduceL2",n,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},912039:(n,d,f,b,C)=>{l.eb("ReduceLogSum",n,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},912200:(n,d,f,b,C)=>{l.eb("ReduceSumSquare",n,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},912364:(n,d,f,b,C)=>{l.eb("ReduceLogSumExp",n,{keepDims:!!d,noopWithEmptyAxes:!!f,axes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},912528:n=>{l.eb("Where",n,void 0)},912581:(n,d,f)=>{l.eb("Transpose",n,{perm:d?Array.from(a().subarray(d>>>0,f>>>0)):[]})},912689:(n,d,f,b,C,O,V,L,ee,J,pe,Ce,Re,D,me)=>{l.eb("ConvTranspose",n,{format:ee?"NHWC":"NCHW",autoPad:d,dilations:[f],group:b,kernel_shape:[C],pads:[O,V],strides:[L],wIsConst:()=>!!r()[J>>>0],outputPadding:pe?Array.from(a().subarray(pe>>>0,Ce>>>0)):[],outputShape:Re?Array.from(a().subarray(Re>>>0,D>>>0)):[],activation:ze(me)})},913091:(n,d,f,b,C,O,V,L,ee,J,pe,Ce,Re,D)=>{l.eb("ConvTranspose",n,{format:L?"NHWC":"NCHW",autoPad:d,dilations:Array.from(a().subarray(f>>>0,(f>>>0)+2>>>0)),group:b,kernelShape:Array.from(a().subarray(C>>>0,(C>>>0)+2>>>0)),pads:Array.from(a().subarray(O>>>0,(O>>>0)+4>>>0)),strides:Array.from(a().subarray(V>>>0,(V>>>0)+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:J?Array.from(a().subarray(J>>>0,pe>>>0)):[],outputShape:Ce?Array.from(a().subarray(Ce>>>0,Re>>>0)):[],activation:ze(D)})},913656:(n,d,f,b,C,O,V,L,ee,J,pe,Ce,Re,D,me)=>{l.eb("ConvTranspose",n,{format:ee?"NHWC":"NCHW",autoPad:d,dilations:[f],group:b,kernel_shape:[C],pads:[O,V],strides:[L],wIsConst:()=>!!r()[J>>>0],outputPadding:pe?Array.from(a().subarray(pe>>>0,Ce>>>0)):[],outputShape:Re?Array.from(a().subarray(Re>>>0,D>>>0)):[],activation:ze(me)})},914058:(n,d,f,b,C,O,V,L,ee,J,pe,Ce,Re,D)=>{l.eb("ConvTranspose",n,{format:L?"NHWC":"NCHW",autoPad:d,dilations:Array.from(a().subarray(f>>>0,(f>>>0)+2>>>0)),group:b,kernelShape:Array.from(a().subarray(C>>>0,(C>>>0)+2>>>0)),pads:Array.from(a().subarray(O>>>0,(O>>>0)+4>>>0)),strides:Array.from(a().subarray(V>>>0,(V>>>0)+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:J?Array.from(a().subarray(J>>>0,pe>>>0)):[],outputShape:Ce?Array.from(a().subarray(Ce>>>0,Re>>>0)):[],activation:ze(D)})},914623:(n,d)=>{l.eb("GlobalAveragePool",n,{format:d?"NHWC":"NCHW"})},914714:(n,d,f,b,C,O,V,L,ee,J,pe,Ce,Re,D,me,Oe)=>{l.eb("AveragePool",n,{format:Oe?"NHWC":"NCHW",auto_pad:d,ceil_mode:f,count_include_pad:b,storage_order:C,dilations:[O,V],kernel_shape:[L,ee],pads:[J,pe,Ce,Re],strides:[D,me]})},914998:(n,d)=>{l.eb("GlobalAveragePool",n,{format:d?"NHWC":"NCHW"})},915089:(n,d,f,b,C,O,V,L,ee,J,pe,Ce,Re,D,me,Oe)=>{l.eb("AveragePool",n,{format:Oe?"NHWC":"NCHW",auto_pad:d,ceil_mode:f,count_include_pad:b,storage_order:C,dilations:[O,V],kernel_shape:[L,ee],pads:[J,pe,Ce,Re],strides:[D,me]})},915373:(n,d)=>{l.eb("GlobalMaxPool",n,{format:d?"NHWC":"NCHW"})},915460:(n,d,f,b,C,O,V,L,ee,J,pe,Ce,Re,D,me,Oe)=>{l.eb("MaxPool",n,{format:Oe?"NHWC":"NCHW",auto_pad:d,ceil_mode:f,count_include_pad:b,storage_order:C,dilations:[O,V],kernel_shape:[L,ee],pads:[J,pe,Ce,Re],strides:[D,me]})},915740:(n,d)=>{l.eb("GlobalMaxPool",n,{format:d?"NHWC":"NCHW"})},915827:(n,d,f,b,C,O,V,L,ee,J,pe,Ce,Re,D,me,Oe)=>{l.eb("MaxPool",n,{format:Oe?"NHWC":"NCHW",auto_pad:d,ceil_mode:f,count_include_pad:b,storage_order:C,dilations:[O,V],kernel_shape:[L,ee],pads:[J,pe,Ce,Re],strides:[D,me]})},916107:(n,d,f,b,C)=>{l.eb("Gemm",n,{alpha:d,beta:f,transA:b,transB:C})},916211:n=>{l.eb("MatMul",n,void 0)},916265:(n,d,f,b)=>{l.eb("ArgMax",n,{keepDims:!!d,selectLastIndex:!!f,axis:b})},916373:(n,d,f,b)=>{l.eb("ArgMin",n,{keepDims:!!d,selectLastIndex:!!f,axis:b})},916481:(n,d)=>{l.eb("Softmax",n,{axis:d})},916544:(n,d)=>{l.eb("Concat",n,{axis:d})},916604:(n,d,f,b,C)=>{l.eb("Split",n,{axis:d,numOutputs:f,splitSizes:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},916744:n=>{l.eb("Expand",n,void 0)},916798:(n,d)=>{l.eb("Gather",n,{axis:Number(d)})},916869:(n,d)=>{l.eb("GatherElements",n,{axis:Number(d)})},916948:(n,d,f,b,C,O,V,L,ee,J,pe)=>{l.eb("Resize",n,{antialias:d,axes:f?Array.from(a().subarray(f>>>0,b>>>0)):[],coordinateTransformMode:ze(C),cubicCoeffA:O,excludeOutside:V,extrapolationValue:L,keepAspectRatioPolicy:ze(ee),mode:ze(J),nearestMode:ze(pe)})},917294:(n,d,f,b,C,O,V)=>{l.eb("Slice",n,{starts:d?Array.from(a().subarray(d>>>0,f>>>0)):[],ends:b?Array.from(a().subarray(b>>>0,C>>>0)):[],axes:O?Array.from(a().subarray(O>>>0,V>>>0)):[]})},917510:n=>{l.eb("Tile",n,void 0)},917562:(n,d,f)=>{l.eb("LayerNormalization",n,{axis:Number(d),epsilon:Number(f)})},917669:(n,d,f)=>{l.eb("InstanceNormalization",n,{epsilon:d,format:f?"NHWC":"NCHW"})},917783:(n,d,f)=>{l.eb("InstanceNormalization",n,{epsilon:d,format:f?"NHWC":"NCHW"})},917897:n=>{l.eb("Range",n,void 0)},917950:(n,d)=>{l.eb("Einsum",n,{equation:ze(d)})},918031:(n,d,f,b,C)=>{l.eb("Pad",n,{mode:d,value:f,pads:b?Array.from(a().subarray(b>>>0,C>>>0)):[]})},918158:(n,d,f,b,C,O)=>{l.eb("BatchNormalization",n,{epsilon:d,momentum:f,spatial:!!C,trainingMode:!!b,format:O?"NHWC":"NCHW"})},918327:(n,d,f,b,C,O)=>{l.eb("BatchNormalization",n,{epsilon:d,momentum:f,spatial:!!C,trainingMode:!!b,format:O?"NHWC":"NCHW"})},918496:(n,d,f)=>{l.eb("CumSum",n,{exclusive:Number(d),reverse:Number(f)})},918593:(n,d,f,b,C,O,V,L,ee)=>{l.eb("Attention",n,{numHeads:d,isUnidirectional:f,maskFilterValue:b,scale:C,doRotary:O,qkvHiddenSizes:V?Array.from(a().subarray(Number(L)>>>0,Number(L)+V>>>0)):[],pastPresentShareBuffer:!!ee})},918865:n=>{l.eb("BiasAdd",n,void 0)},918920:n=>{l.eb("BiasSplitGelu",n,void 0)},918981:n=>{l.eb("FastGelu",n,void 0)},919037:(n,d,f,b,C,O,V,L,ee,J,pe,Ce,Re)=>{l.eb("Conv",n,{format:ee?"NHWC":"NCHW",auto_pad:d,dilations:[f],group:b,kernel_shape:[C],pads:O?Array.from(a().subarray(O>>>0,V>>>0)):[],strides:[L],w_is_const:()=>!!r()[J>>>0],activation:ze(pe),activation_params:Ce?Array.from(p().subarray(Ce>>>0,Re>>>0)):[]})},919407:(n,d,f,b,C,O,V,L,ee,J,pe,Ce,Re,D,me,Oe)=>{l.eb("Conv",n,{format:Ce?"NHWC":"NCHW",auto_pad:d,dilations:[f,b],group:C,kernel_shape:[O,V],pads:L?Array.from(a().subarray(L>>>0,ee>>>0)):[],strides:[J,pe],w_is_const:()=>!!r()[Re>>>0],activation:ze(D),activation_params:me?Array.from(p().subarray(me>>>0,Oe>>>0)):[]})},919798:n=>{l.eb("Gelu",n,void 0)},919850:(n,d,f,b,C,O)=>{l.eb("MatMulNBits",n,{k:d,n:f,accuracyLevel:b,bits:C,blockSize:O})},919977:(n,d,f,b,C,O)=>{l.eb("MultiHeadAttention",n,{numHeads:d,isUnidirectional:f,maskFilterValue:b,scale:C,doRotary:O})},920136:(n,d)=>{l.eb("SkipLayerNormalization",n,{epsilon:d})},920217:n=>{l.fc(n)},920251:(n,d)=>l.ic(n,d,l.Eb.kc,l.Eb.errors)};function $r(n){this.name="ExitStatus",this.message=`Program terminated with exit(${n})`,this.status=n}var ht=n=>{n.terminate(),n.onmessage=()=>{}},Kr=n=>{le.yb.length==0&&(Ar(),le.Qb(le.yb[0]));var d=le.yb.pop();if(!d)return 6;le.zb.push(d),le.pb[n.xb]=d,d.xb=n.xb;var f={cmd:"run",start_routine:n.lc,arg:n.Wb,pthread_ptr:n.xb};return P&&d.unref(),d.postMessage(f,n.rc),0},Ze=0,_r=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Sr=(n,d,f)=>{d>>>=0;var b=d+f;for(f=d;n[f]&&!(f>=b);)++f;if(16<f-d&&n.buffer&&_r)return _r.decode(n.buffer instanceof SharedArrayBuffer?n.slice(d,f):n.subarray(d,f));for(b="";d<f;){var C=n[d++];if(C&128){var O=n[d++]&63;if((C&224)==192)b+=String.fromCharCode((C&31)<<6|O);else{var V=n[d++]&63;C=(C&240)==224?(C&15)<<12|O<<6|V:(C&7)<<18|O<<12|V<<6|n[d++]&63,65536>C?b+=String.fromCharCode(C):(C-=65536,b+=String.fromCharCode(55296|C>>10,56320|C&1023))}}else b+=String.fromCharCode(C)}return b},ze=(n,d)=>(n>>>=0)?Sr(o(),n,d):"",xr=n=>{var d=oo();return n=n(),yn(d),n};function _e(n,d){var f=arguments.length-2,b=arguments;return xr(()=>{for(var C=2*f,O=io(8*C),V=O>>>3,L=0;L<f;L++){var ee=b[2+L];typeof ee=="bigint"?(Ne[V+2*L]=1n,Ne[V+2*L+1]=ee):(Ne[V+2*L]=0n,h()[V+2*L+1>>>0]=ee)}return hi(n,C,O,d)})}function at(n){if(T)return _e(0,1,n);he=n,0<Ze||(le.mc(),l.onExit?.(n),ye=!0),E(n,new $r(n))}var or=n=>{if(he=n,T)throw Yr(n),"unwind";at(n)},Cr=n=>{n instanceof $r||n=="unwind"||E(1,n)};function Kn(){for(var n=l.numThreads;n--;)Ar();qe.unshift(()=>{xt++,Yn(()=>br())})}function Ar(){var n=W("ort-wasm-simd-threaded.worker.js");n=new Worker(n),le.yb.push(n)}function Yn(n){T?n():Promise.all(le.yb.map(le.Qb)).then(n)}var le={yb:[],zb:[],Vb:[],pb:{},Ib(){T?(le.receiveObjectTransfer=le.jc,le.threadInitTLS=le.Ub,le.setExitStatus=le.Tb):Kn()},Tb:n=>he=n,vc:["$terminateWorker"],mc:()=>{for(var n of le.zb)ht(n);for(n of le.yb)ht(n);le.yb=[],le.zb=[],le.pb=[]},Sb:n=>{var d=n.xb;delete le.pb[d],le.yb.push(n),le.zb.splice(le.zb.indexOf(n),1),n.xb=0,ro(d)},jc(){},Ub(){le.Vb.forEach(n=>n())},Qb:n=>new Promise(d=>{n.onmessage=O=>{O=O.data;var V=O.cmd;if(O.targetThread&&O.targetThread!=gn()){var L=le.pb[O.targetThread];L?L.postMessage(O,O.transferList):Ae(`Internal error! Worker sent a message "${V}" to target pthread ${O.targetThread}, but that thread no longer exists!`)}else V==="checkMailbox"?Zt():V==="spawnThread"?Kr(O):V==="cleanupThread"?le.Sb(le.pb[O.thread]):V==="killThread"?(O=O.thread,V=le.pb[O],delete le.pb[O],ht(V),ro(O),le.zb.splice(le.zb.indexOf(V),1),V.xb=0):V==="cancelThread"?le.pb[O.thread].postMessage({cmd:"cancel"}):V==="loaded"?(n.loaded=!0,P&&!n.xb&&n.unref(),d(n)):V==="alert"?alert(`Thread ${O.threadId}: ${O.text}`):O.target==="setimmediate"?n.postMessage(O):V==="callHandler"?l[O.handler](...O.args):V&&Ae(`worker sent an unknown command ${V}`)},n.onerror=O=>{throw Ae(`worker sent an error! ${O.filename}:${O.lineno}: ${O.message}`),O},P&&(n.on("message",O=>n.onmessage({data:O})),n.on("error",O=>n.onerror(O)));var f=[],b=["onExit"],C;for(C of b)l.hasOwnProperty(C)&&f.push(C);n.postMessage({cmd:"load",handlers:f,urlOrBlob:l.mainScriptUrlOrBlob||e,wasmMemory:te,wasmModule:Me})})};l.PThread=le;var ir=n=>{for(;0<n.length;)n.shift()(l)};l.establishStackSpace=()=>{var n=gn(),d=c()[n+52>>>2>>>0];n=c()[n+56>>>2>>>0],yi(d,d-n),yn(d)};function Yr(n){if(T)return _e(1,0,n);or(n)}l.invokeEntryPoint=(n,d)=>{n=bi.apply(null,[n,d]),0<Ze?le.Tb(n):no(n)};function Zn(n){this.Db=n-24,this.tc=function(d){c()[this.Db+4>>>2>>>0]=d},this.Mb=function(d){c()[this.Db+8>>>2>>>0]=d},this.Ib=function(d,f){this.Kb(),this.tc(d),this.Mb(f)},this.Kb=function(){c()[this.Db+16>>>2>>>0]=0}}var Zr=0,Ir=0;function Tr(n,d,f,b){return T?_e(2,1,n,d,f,b):jt(n,d,f,b)}function jt(n,d,f,b){if(n>>>=0,d>>>=0,f>>>=0,b>>>=0,typeof SharedArrayBuffer>"u")return Ae("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var C=[];return T&&C.length===0?Tr(n,d,f,b):(n={lc:f,xb:n,Wb:b,rc:C},T?(n.uc="spawnThread",postMessage(n,C),0):Kr(n))}function Xr(n,d,f){return T?_e(3,1,n,d,f):0}function bt(n,d){if(T)return _e(4,1,n,d)}var tt=n=>{for(var d=0,f=0;f<n.length;++f){var b=n.charCodeAt(f);127>=b?d++:2047>=b?d+=2:55296<=b&&57343>=b?(d+=4,++f):d+=3}return d},Er=(n,d,f,b)=>{if(f>>>=0,!(0<b))return 0;var C=f;b=f+b-1;for(var O=0;O<n.length;++O){var V=n.charCodeAt(O);if(55296<=V&&57343>=V){var L=n.charCodeAt(++O);V=65536+((V&1023)<<10)|L&1023}if(127>=V){if(f>=b)break;d[f++>>>0]=V}else{if(2047>=V){if(f+1>=b)break;d[f++>>>0]=192|V>>6}else{if(65535>=V){if(f+2>=b)break;d[f++>>>0]=224|V>>12}else{if(f+3>=b)break;d[f++>>>0]=240|V>>18,d[f++>>>0]=128|V>>12&63}d[f++>>>0]=128|V>>6&63}d[f++>>>0]=128|V&63}}return d[f>>>0]=0,f-C},Vt=(n,d,f)=>Er(n,o(),d,f);function Pr(n,d){if(T)return _e(5,1,n,d)}function Or(n,d,f){if(T)return _e(6,1,n,d,f)}function Jr(n,d,f){return T?_e(7,1,n,d,f):0}function ar(n,d){if(T)return _e(8,1,n,d)}function Qr(n,d,f){if(T)return _e(9,1,n,d,f)}function en(n,d,f,b){if(T)return _e(10,1,n,d,f,b)}function tn(n,d,f,b){if(T)return _e(11,1,n,d,f,b)}function rn(n,d,f,b){if(T)return _e(12,1,n,d,f,b)}function kr(n){if(T)return _e(13,1,n)}function Kt(n,d){if(T)return _e(14,1,n,d)}function nn(n,d,f){if(T)return _e(15,1,n,d,f)}var sr=n=>{if(n===null)return"null";var d=typeof n;return d==="object"||d==="array"||d==="function"?n.toString():""+n},Rr,pt=n=>{for(var d="";o()[n>>>0];)d+=Rr[o()[n++>>>0]];return d},Br={},ur={},Xn={},rt;function on(n,d,f={}){var b=d.name;if(!n)throw new rt(`type "${b}" must have a positive integer typeid pointer`);if(ur.hasOwnProperty(n)){if(f.Zb)return;throw new rt(`Cannot register type \'${b}\' twice`)}ur[n]=d,delete Xn[n],Br.hasOwnProperty(n)&&(d=Br[n],delete Br[n],d.forEach(C=>C()))}function gt(n,d,f={}){if(!("argPackAdvance"in d))throw new TypeError("registerType registeredInstance requires argPackAdvance");on(n,d,f)}var Dr=(n,d,f)=>{switch(d){case 1:return f?b=>r()[b>>>0>>>0]:b=>o()[b>>>0>>>0];case 2:return f?b=>i()[b>>>1>>>0]:b=>u()[b>>>1>>>0];case 4:return f?b=>a()[b>>>2>>>0]:b=>c()[b>>>2>>>0];case 8:return f?b=>Ne[b>>>3]:b=>Ye[b>>>3];default:throw new TypeError(`invalid integer width (${d}): ${n}`)}};function lr(){this.wb=[void 0],this.Nb=[]}var nt=new lr;function Yt(n){n>>>=0,n>=nt.Db&&--nt.get(n).Rb===0&&nt.Mb(n)}var Xe=n=>{if(!n)throw new rt("Cannot use deleted val. handle = "+n);return nt.get(n).value},ot=n=>{switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return nt.Kb({Rb:1,value:n})}};function an(n){return this.fromWireType(a()[n>>>2>>>0])}var sn=(n,d)=>{switch(d){case 4:return function(f){return this.fromWireType(p()[f>>>2>>>0])};case 8:return function(f){return this.fromWireType(h()[f>>>3>>>0])};default:throw new TypeError(`invalid float width (${d}): ${n}`)}};function un(n){return this.fromWireType(c()[n>>>2>>>0])}var ln=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,dn=(n,d)=>{for(var f=n>>1,b=f+d/2;!(f>=b)&&u()[f>>>0];)++f;if(f<<=1,32<f-n&&ln)return ln.decode(o().slice(n,f));for(f="",b=0;!(b>=d/2);++b){var C=i()[n+2*b>>>1>>>0];if(C==0)break;f+=String.fromCharCode(C)}return f},cn=(n,d,f)=>{if(f??=2147483647,2>f)return 0;f-=2;var b=d;f=f<2*n.length?f/2:n.length;for(var C=0;C<f;++C){var O=n.charCodeAt(C);i()[d>>>1>>>0]=O,d+=2}return i()[d>>>1>>>0]=0,d-b},dr=n=>2*n.length,Jn=(n,d)=>{for(var f=0,b="";!(f>=d/4);){var C=a()[n+4*f>>>2>>>0];if(C==0)break;++f,65536<=C?(C-=65536,b+=String.fromCharCode(55296|C>>10,56320|C&1023)):b+=String.fromCharCode(C)}return b},ae=(n,d,f)=>{if(d>>>=0,f??=2147483647,4>f)return 0;var b=d;f=b+f-4;for(var C=0;C<n.length;++C){var O=n.charCodeAt(C);if(55296<=O&&57343>=O){var V=n.charCodeAt(++C);O=65536+((O&1023)<<10)|V&1023}if(a()[d>>>2>>>0]=O,d+=4,d+4>f)break}return a()[d>>>2>>>0]=0,d-b},pn=n=>{for(var d=0,f=0;f<n.length;++f){var b=n.charCodeAt(f);55296<=b&&57343>=b&&++f,d+=4}return d},Wt=()=>{if(!(0<Ze))try{T?no(he):or(he)}catch(n){Cr(n)}};function st(n){n>>>=0,typeof Atomics.sc=="function"&&(Atomics.sc(a(),n>>>2,n).value.then(Zt),n+=128,Atomics.store(a(),n>>>2,1))}l.__emscripten_thread_mailbox_await=st;var Zt=()=>{var n=gn();if(n&&(st(n),!ye))try{gi(),Wt()}catch(d){Cr(d)}};l.checkMailbox=Zt;var cr=[],pr=(n,d)=>{var f=ur[n];if(f===void 0)throw n=mi(n),f=pt(n),At(n),new rt(d+" has unknown type "+f);return f},Mr=(n,d,f)=>{var b=[];return n=n.toWireType(b,f),b.length&&(c()[d>>>2>>>0]=ot(b)),n},Xt=n=>{try{n()}catch(d){Ut(d)}};function mn(){var n=ne,d={};for(let[f,b]of Object.entries(n))d[f]=typeof b=="function"?function(){Bt.push(f);try{return b.apply(null,arguments)}finally{ye||(Bt.pop(),mt&&wt===1&&Bt.length===0&&(wt=0,Ze+=1,Xt(vi),typeof Fibers<"u"&&Fibers.xc()))}}:b;return d}var wt=0,mt=null,fn=0,Bt=[],zr={},s={},m=0,g=null,v=[];function I(){return new Promise((n,d)=>{g={resolve:n,reject:d}})}function B(){var n=Ur(65548),d=n+12;c()[n>>>2>>>0]=d,c()[n+4>>>2>>>0]=d+65536,d=Bt[0];var f=zr[d];return f===void 0&&(f=m++,zr[d]=f,s[f]=d),d=f,a()[n+8>>>2>>>0]=d,n}function H(){var n=a()[mt+8>>>2>>>0];return n=ne[s[n]],--Ze,n()}function q(n){if(!ye){if(wt===0){var d=!1,f=!1;n((b=0)=>{if(!ye&&(fn=b,d=!0,f)){wt=2,Xt(()=>$i(mt)),typeof Browser<"u"&&Browser.Jb.Yb&&Browser.Jb.resume(),b=!1;try{var C=H()}catch(L){C=L,b=!0}var O=!1;if(!mt){var V=g;V&&(g=null,(b?V.reject:V.resolve)(C),O=!0)}if(b&&!O)throw C}}),f=!0,d||(wt=1,mt=B(),typeof Browser<"u"&&Browser.Jb.Yb&&Browser.Jb.pause(),Xt(()=>wi(mt)))}else wt===2?(wt=0,Xt(_i),At(mt),mt=null,v.forEach(b=>{if(!ye)try{b(),Wt()}catch(C){Cr(C)}})):Ut(`invalid state: ${wt}`);return fn}}function Q(n){return q(d=>{n().then(d)})}var Y=[],de={},be=n=>{var d=de[n];return d===void 0?pt(n):d},Te=()=>typeof globalThis=="object"?globalThis:Function("return this")(),R=n=>{var d=Y.length;return Y.push(n),d},ce=(n,d)=>{for(var f=Array(n),b=0;b<n;++b)f[b]=pr(c()[d+4*b>>>2>>>0],"parameter "+b);return f},Ie=(n,d)=>Object.defineProperty(d,"name",{value:n});function Dt(n){var d=Function;if(!(d instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof d} which is not a function`);var f=Ie(d.name||"unknownFunctionName",function(){});return f.prototype=d.prototype,f=new f,n=d.apply(f,n),n instanceof Object?n:f}var Mt=n=>n%4===0&&(n%100!==0||n%400===0),Yo=[0,31,60,91,121,152,182,213,244,274,305,335],Zo=[0,31,59,90,120,151,181,212,243,273,304,334];function Xo(n,d,f,b,C,O,V){return T?_e(16,1,n,d,f,b,C,O,V):-52}function Jo(n,d,f,b,C,O){if(T)return _e(17,1,n,d,f,b,C,O)}var Qo=n=>{var d=tt(n)+1,f=Ur(d);return f&&Vt(n,f,d),f},Qn=[],ei=(n,d)=>{Qn.length=0;for(var f;f=o()[n++>>>0];){var b=f!=105;b&=f!=112,d+=b&&d%8?4:0,Qn.push(f==112?c()[d>>>2>>>0]:f==106?Ne[d>>>3]:f==105?a()[d>>>2>>>0]:h()[d>>>3>>>0]),d+=b?8:4}return Qn},eo={},ti=()=>{if(!to){var n={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:S||"./this.program"},d;for(d in eo)eo[d]===void 0?delete n[d]:n[d]=eo[d];var f=[];for(d in n)f.push(`${d}=${n[d]}`);to=f}return to},to;function ri(n,d){if(T)return _e(18,1,n,d);n>>>=0,d>>>=0;var f=0;return ti().forEach((b,C)=>{var O=d+f;for(C=c()[n+4*C>>>2>>>0]=O,O=0;O<b.length;++O)r()[C++>>>0>>>0]=b.charCodeAt(O);r()[C>>>0>>>0]=0,f+=b.length+1}),0}function ni(n,d){if(T)return _e(19,1,n,d);n>>>=0,d>>>=0;var f=ti();c()[n>>>2>>>0]=f.length;var b=0;return f.forEach(C=>b+=C.length+1),c()[d>>>2>>>0]=b,0}function oi(n){return T?_e(20,1,n):52}function ii(n,d,f,b){return T?_e(21,1,n,d,f,b):52}function ai(n,d,f,b){return T?_e(22,1,n,d,f,b):70}var jl=[null,[],[]];function si(n,d,f,b){if(T)return _e(23,1,n,d,f,b);d>>>=0,f>>>=0,b>>>=0;for(var C=0,O=0;O<f;O++){var V=c()[d>>>2>>>0],L=c()[d+4>>>2>>>0];d+=8;for(var ee=0;ee<L;ee++){var J=o()[V+ee>>>0],pe=jl[n];J===0||J===10?((n===1?Ee:Ae)(Sr(pe,0)),pe.length=0):pe.push(J)}C+=L}return c()[b>>>2>>>0]=C,0}var ui=[31,29,31,30,31,30,31,31,30,31,30,31],li=[31,28,31,30,31,30,31,31,30,31,30,31];function Kl(n){var d=Array(tt(n)+1);return Er(n,d,0,d.length),d}var Yl=(n,d)=>{r().set(n,d>>>0)};function di(n,d,f,b){function C(D,me,Oe){for(D=typeof D=="number"?D.toString():D||"";D.length<me;)D=Oe[0]+D;return D}function O(D,me){return C(D,me,"0")}function V(D,me){function Oe(xi){return 0>xi?-1:0<xi?1:0}var Jt;return(Jt=Oe(D.getFullYear()-me.getFullYear()))===0&&(Jt=Oe(D.getMonth()-me.getMonth()))===0&&(Jt=Oe(D.getDate()-me.getDate())),Jt}function L(D){switch(D.getDay()){case 0:return new Date(D.getFullYear()-1,11,29);case 1:return D;case 2:return new Date(D.getFullYear(),0,3);case 3:return new Date(D.getFullYear(),0,2);case 4:return new Date(D.getFullYear(),0,1);case 5:return new Date(D.getFullYear()-1,11,31);case 6:return new Date(D.getFullYear()-1,11,30)}}function ee(D){var me=D.Ab;for(D=new Date(new Date(D.Bb+1900,0,1).getTime());0<me;){var Oe=D.getMonth(),Jt=(Mt(D.getFullYear())?ui:li)[Oe];if(me>Jt-D.getDate())me-=Jt-D.getDate()+1,D.setDate(1),11>Oe?D.setMonth(Oe+1):(D.setMonth(0),D.setFullYear(D.getFullYear()+1));else{D.setDate(D.getDate()+me);break}}return Oe=new Date(D.getFullYear()+1,0,4),me=L(new Date(D.getFullYear(),0,4)),Oe=L(Oe),0>=V(me,D)?0>=V(Oe,D)?D.getFullYear()+1:D.getFullYear():D.getFullYear()-1}n>>>=0,d>>>=0,f>>>=0,b>>>=0;var J=c()[b+40>>>2>>>0];b={pc:a()[b>>>2>>>0],oc:a()[b+4>>>2>>>0],Gb:a()[b+8>>>2>>>0],Lb:a()[b+12>>>2>>>0],Hb:a()[b+16>>>2>>>0],Bb:a()[b+20>>>2>>>0],vb:a()[b+24>>>2>>>0],Ab:a()[b+28>>>2>>>0],wc:a()[b+32>>>2>>>0],nc:a()[b+36>>>2>>>0],qc:J?ze(J):""},f=ze(f),J={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var pe in J)f=f.replace(new RegExp(pe,"g"),J[pe]);var Ce="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Re="January February March April May June July August September October November December".split(" ");J={"%a":D=>Ce[D.vb].substring(0,3),"%A":D=>Ce[D.vb],"%b":D=>Re[D.Hb].substring(0,3),"%B":D=>Re[D.Hb],"%C":D=>O((D.Bb+1900)/100|0,2),"%d":D=>O(D.Lb,2),"%e":D=>C(D.Lb,2," "),"%g":D=>ee(D).toString().substring(2),"%G":D=>ee(D),"%H":D=>O(D.Gb,2),"%I":D=>(D=D.Gb,D==0?D=12:12<D&&(D-=12),O(D,2)),"%j":D=>{for(var me=0,Oe=0;Oe<=D.Hb-1;me+=(Mt(D.Bb+1900)?ui:li)[Oe++]);return O(D.Lb+me,3)},"%m":D=>O(D.Hb+1,2),"%M":D=>O(D.oc,2),"%n":()=>`\n`,"%p":D=>0<=D.Gb&&12>D.Gb?"AM":"PM","%S":D=>O(D.pc,2),"%t":()=>"	","%u":D=>D.vb||7,"%U":D=>O(Math.floor((D.Ab+7-D.vb)/7),2),"%V":D=>{var me=Math.floor((D.Ab+7-(D.vb+6)%7)/7);if(2>=(D.vb+371-D.Ab-2)%7&&me++,me)me==53&&(Oe=(D.vb+371-D.Ab)%7,Oe==4||Oe==3&&Mt(D.Bb)||(me=1));else{me=52;var Oe=(D.vb+7-D.Ab-1)%7;(Oe==4||Oe==5&&Mt(D.Bb%400-1))&&me++}return O(me,2)},"%w":D=>D.vb,"%W":D=>O(Math.floor((D.Ab+7-(D.vb+6)%7)/7),2),"%y":D=>(D.Bb+1900).toString().substring(2),"%Y":D=>D.Bb+1900,"%z":D=>{D=D.nc;var me=0<=D;return D=Math.abs(D)/60,(me?"+":"-")+("0000"+(D/60*100+D%60)).slice(-4)},"%Z":D=>D.qc,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(pe in J)f.includes(pe)&&(f=f.replace(new RegExp(pe,"g"),J[pe](b)));return f=f.replace(/\\0\\0/g,"%"),pe=Kl(f),pe.length>d?0:(Yl(pe,n),pe.length-1)}le.Ib();for(var ci=Array(256),hn=0;256>hn;++hn)ci[hn]=String.fromCharCode(hn);Rr=ci,rt=l.BindingError=class extends Error{constructor(n){super(n),this.name="BindingError"}},l.InternalError=class extends Error{constructor(n){super(n),this.name="InternalError"}},Object.assign(lr.prototype,{get(n){return this.wb[n]},has(n){return this.wb[n]!==void 0},Kb(n){var d=this.Nb.pop()||this.wb.length;return this.wb[d]=n,d},Mb(n){this.wb[n]=void 0,this.Nb.push(n)}}),nt.wb.push({value:void 0},{value:null},{value:!0},{value:!1}),nt.Db=nt.wb.length,l.count_emval_handles=()=>{for(var n=0,d=nt.Db;d<nt.wb.length;++d)nt.wb[d]!==void 0&&++n;return n};var Zl=[at,Yr,Tr,Xr,bt,Pr,Or,Jr,ar,Qr,en,tn,rn,kr,Kt,nn,Xo,Jo,ri,ni,oi,ii,ai,si],Xl={ua:function(n,d,f){return Q(async()=>{await l.dc(n,d,f)})},b:function(n,d,f){throw n>>>=0,new Zn(n).Ib(d>>>0,f>>>0),Zr=n,Ir++,Zr},ga:function(n){fi(n>>>0,!x,1,!A,131072,!1),le.Ub()},F:function(n){n>>>=0,T?postMessage({cmd:"cleanupThread",thread:n}):le.Sb(le.pb[n])},Y:jt,z:Xr,ma:bt,U:Pr,W:Or,N:Jr,ka:ar,da:Qr,ja:en,H:tn,V:rn,S:kr,la:Kt,T:nn,K:function(n,d,f,b,C){n>>>=0,d>>>=0,f>>>=0,d=pt(d);var O=d.indexOf("u")!=-1;O&&(C=(1n<<64n)-1n),gt(n,{name:d,fromWireType:V=>V,toWireType:function(V,L){if(typeof L!="bigint"&&typeof L!="number")throw new TypeError(`Cannot convert "${sr(L)}" to ${this.name}`);if(L<b||L>C)throw new TypeError(`Passing a number "${sr(L)}" from JS side to C/C++ side to an argument of type "${d}", which is outside the valid range [${b}, ${C}]!`);return L},argPackAdvance:8,readValueFromPointer:Dr(d,f,!O),Cb:null})},sa:function(n,d,f,b){n>>>=0,d=pt(d>>>0),gt(n,{name:d,fromWireType:function(C){return!!C},toWireType:function(C,O){return O?f:b},argPackAdvance:8,readValueFromPointer:function(C){return this.fromWireType(o()[C>>>0])},Cb:null})},ra:function(n,d){n>>>=0,d=pt(d>>>0),gt(n,{name:d,fromWireType:f=>{var b=Xe(f);return Yt(f),b},toWireType:(f,b)=>ot(b),argPackAdvance:8,readValueFromPointer:an,Cb:null})},J:function(n,d,f){n>>>=0,f>>>=0,d=pt(d>>>0),gt(n,{name:d,fromWireType:b=>b,toWireType:(b,C)=>C,argPackAdvance:8,readValueFromPointer:sn(d,f),Cb:null})},v:function(n,d,f,b,C){if(n>>>=0,f>>>=0,d=pt(d>>>0),C===-1&&(C=4294967295),C=L=>L,b===0){var O=32-8*f;C=L=>L<<O>>>O}var V=d.includes("unsigned")?function(L,ee){return ee>>>0}:function(L,ee){return ee};gt(n,{name:d,fromWireType:C,toWireType:V,argPackAdvance:8,readValueFromPointer:Dr(d,f,b!==0),Cb:null})},o:function(n,d,f){function b(O){var V=c()[O>>>2>>>0];return O=c()[O+4>>>2>>>0],new C(r().buffer,O,V)}n>>>=0;var C=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][d];f=pt(f>>>0),gt(n,{name:f,fromWireType:b,argPackAdvance:8,readValueFromPointer:b},{Zb:!0})},L:function(n,d){n>>>=0,d=pt(d>>>0);var f=d==="std::string";gt(n,{name:d,fromWireType:function(b){var C=c()[b>>>2>>>0],O=b+4;if(f)for(var V=O,L=0;L<=C;++L){var ee=O+L;if(L==C||o()[ee>>>0]==0){if(V=ze(V,ee-V),J===void 0)var J=V;else J+=String.fromCharCode(0),J+=V;V=ee+1}}else{for(J=Array(C),L=0;L<C;++L)J[L]=String.fromCharCode(o()[O+L>>>0]);J=J.join("")}return At(b),J},toWireType:function(b,C){C instanceof ArrayBuffer&&(C=new Uint8Array(C));var O=typeof C=="string";if(!(O||C instanceof Uint8Array||C instanceof Uint8ClampedArray||C instanceof Int8Array))throw new rt("Cannot pass non-string to std::string");var V=f&&O?tt(C):C.length,L=Ur(4+V+1),ee=L+4;if(c()[L>>>2>>>0]=V,f&&O)Vt(C,ee,V+1);else if(O)for(O=0;O<V;++O){var J=C.charCodeAt(O);if(255<J)throw At(ee),new rt("String has UTF-16 code units that do not fit in 8 bits");o()[ee+O>>>0]=J}else for(O=0;O<V;++O)o()[ee+O>>>0]=C[O];return b!==null&&b.push(At,L),L},argPackAdvance:8,readValueFromPointer:un,Cb(b){At(b)}})},B:function(n,d,f){if(n>>>=0,d>>>=0,f>>>=0,f=pt(f),d===2)var b=dn,C=cn,O=dr,V=()=>u(),L=1;else d===4&&(b=Jn,C=ae,O=pn,V=()=>c(),L=2);gt(n,{name:f,fromWireType:ee=>{for(var J=c()[ee>>>2>>>0],pe=V(),Ce,Re=ee+4,D=0;D<=J;++D){var me=ee+4+D*d;(D==J||pe[me>>>L]==0)&&(Re=b(Re,me-Re),Ce===void 0?Ce=Re:(Ce+=String.fromCharCode(0),Ce+=Re),Re=me+d)}return At(ee),Ce},toWireType:(ee,J)=>{if(typeof J!="string")throw new rt(`Cannot pass non-string to C++ string type ${f}`);var pe=O(J),Ce=Ur(4+pe+d);return c()[Ce>>>2]=pe>>L,C(J,Ce+4,pe+d),ee!==null&&ee.push(At,Ce),Ce},argPackAdvance:8,readValueFromPointer:an,Cb(ee){At(ee)}})},ta:function(n,d){n>>>=0,d=pt(d>>>0),gt(n,{$b:!0,name:d,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},qa:()=>1,Q:function(n,d){n>>>=0,n==d>>>0?setTimeout(()=>Zt()):T?postMessage({targetThread:n,cmd:"checkMailbox"}):(n=le.pb[n])&&n.postMessage({cmd:"checkMailbox"})},Z:function(n,d,f,b){d>>>=0,f/=2,cr.length=f,b=b>>>0>>>3;for(var C=0;C<f;C++)cr[C]=Ne[b+2*C]?Ne[b+2*C+1]:h()[b+2*C+1>>>0];return n=0>n?qt[-n-1]:Zl[n],le.Xb=d,d=n.apply(null,cr),le.Xb=0,d},fa:st,pa:function(n){P&&le.pb[n>>>0].ref()},t:function(n,d,f){return d>>>=0,f>>>=0,n=Xe(n>>>0),d=pr(d,"emval::as"),Mr(d,f,n)},y:function(n){return n>>>=0,Q(()=>(n=Xe(n),n.then(ot)))},p:function(n,d,f,b){return f>>>=0,b>>>=0,n=Y[n>>>0],d=Xe(d>>>0),n(null,d,f,b)},k:function(n,d,f,b,C){return f>>>=0,b>>>=0,C>>>=0,n=Y[n>>>0],d=Xe(d>>>0),f=be(f),n(d,d[f],b,C)},c:Yt,C:function(n,d){return d>>>=0,n=Xe(n>>>0),d=Xe(d),n==d},n:function(n){return n>>>=0,n===0?ot(Te()):(n=be(n),ot(Te()[n]))},j:function(n,d,f){d=ce(n,d>>>0);var b=d.shift();n--;var C=`return function (obj, func, destructorsRef, args) {\n`,O=0,V=[];f===0&&V.push("obj");for(var L=["retType"],ee=[b],J=0;J<n;++J)V.push("arg"+J),L.push("argType"+J),ee.push(d[J]),C+=`  var arg${J} = argType${J}.readValueFromPointer(args${O?"+"+O:""});\n`,O+=d[J].argPackAdvance;for(C+=`  var rv = ${f===1?"new func":"func.call"}(${V.join(", ")});\n`,J=0;J<n;++J)d[J].deleteObject&&(C+=`  argType${J}.deleteObject(arg${J});\n`);return b.$b||(L.push("emval_returnValue"),ee.push(Mr),C+=`  return emval_returnValue(retType, destructorsRef, rv);\n`),L.push(C+`};\n`),n=Dt(L).apply(null,ee),f=`methodCaller<(${d.map(pe=>pe.name).join(", ")}) => ${b.name}>`,R(Ie(f,n))},s:function(n,d){return d>>>=0,n=Xe(n>>>0),d=Xe(d),ot(n[d])},e:function(n){n>>>=0,4<n&&(nt.get(n).Rb+=1)},w:function(){return ot([])},m:function(n){n=Xe(n>>>0);for(var d=Array(n.length),f=0;f<n.length;f++)d[f]=n[f];return ot(d)},f:function(n){return ot(be(n>>>0))},l:function(){return ot({})},i:function(n){n>>>=0;for(var d=Xe(n);d.length;){var f=d.pop();d.pop()(f)}Yt(n)},h:function(n,d,f){d>>>=0,f>>>=0,n=Xe(n>>>0),d=Xe(d),f=Xe(f),n[d]=f},d:function(n,d){return d>>>=0,n=pr(n>>>0,"_emval_take_value"),n=n.readValueFromPointer(d),ot(n)},aa:function(n,d){n=-9007199254740992>n||9007199254740992<n?NaN:Number(n),d>>>=0,n=new Date(1e3*n),a()[d>>>2>>>0]=n.getUTCSeconds(),a()[d+4>>>2>>>0]=n.getUTCMinutes(),a()[d+8>>>2>>>0]=n.getUTCHours(),a()[d+12>>>2>>>0]=n.getUTCDate(),a()[d+16>>>2>>>0]=n.getUTCMonth(),a()[d+20>>>2>>>0]=n.getUTCFullYear()-1900,a()[d+24>>>2>>>0]=n.getUTCDay(),n=(n.getTime()-Date.UTC(n.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[d+28>>>2>>>0]=n},ba:function(n,d){n=-9007199254740992>n||9007199254740992<n?NaN:Number(n),d>>>=0,n=new Date(1e3*n),a()[d>>>2>>>0]=n.getSeconds(),a()[d+4>>>2>>>0]=n.getMinutes(),a()[d+8>>>2>>>0]=n.getHours(),a()[d+12>>>2>>>0]=n.getDate(),a()[d+16>>>2>>>0]=n.getMonth(),a()[d+20>>>2>>>0]=n.getFullYear()-1900,a()[d+24>>>2>>>0]=n.getDay();var f=(Mt(n.getFullYear())?Yo:Zo)[n.getMonth()]+n.getDate()-1|0;a()[d+28>>>2>>>0]=f,a()[d+36>>>2>>>0]=-(60*n.getTimezoneOffset()),f=new Date(n.getFullYear(),6,1).getTimezoneOffset();var b=new Date(n.getFullYear(),0,1).getTimezoneOffset();n=(f!=b&&n.getTimezoneOffset()==Math.min(b,f))|0,a()[d+32>>>2>>>0]=n},ca:function(n){n>>>=0;var d=new Date(a()[n+20>>>2>>>0]+1900,a()[n+16>>>2>>>0],a()[n+12>>>2>>>0],a()[n+8>>>2>>>0],a()[n+4>>>2>>>0],a()[n>>>2>>>0],0),f=a()[n+32>>>2>>>0],b=d.getTimezoneOffset(),C=new Date(d.getFullYear(),6,1).getTimezoneOffset(),O=new Date(d.getFullYear(),0,1).getTimezoneOffset(),V=Math.min(O,C);return 0>f?a()[n+32>>>2>>>0]=+(C!=O&&V==b):0<f!=(V==b)&&(C=Math.max(O,C),d.setTime(d.getTime()+6e4*((0<f?V:C)-b))),a()[n+24>>>2>>>0]=d.getDay(),f=(Mt(d.getFullYear())?Yo:Zo)[d.getMonth()]+d.getDate()-1|0,a()[n+28>>>2>>>0]=f,a()[n>>>2>>>0]=d.getSeconds(),a()[n+4>>>2>>>0]=d.getMinutes(),a()[n+8>>>2>>>0]=d.getHours(),a()[n+12>>>2>>>0]=d.getDate(),a()[n+16>>>2>>>0]=d.getMonth(),a()[n+20>>>2>>>0]=d.getYear(),n=d.getTime(),isNaN(n)?(a()[pi()>>>2>>>0]=61,n=-1):n/=1e3,BigInt(n)},_:Xo,$:Jo,P:function(n,d,f){function b(J){return(J=J.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?J[1]:"GMT"}n>>>=0,d>>>=0,f>>>=0;var C=new Date().getFullYear(),O=new Date(C,0,1),V=new Date(C,6,1);C=O.getTimezoneOffset();var L=V.getTimezoneOffset(),ee=Math.max(C,L);c()[n>>>2>>>0]=60*ee,a()[d>>>2>>>0]=+(C!=L),n=b(O),d=b(V),n=Qo(n),d=Qo(d),L<C?(c()[f>>>2>>>0]=n,c()[f+4>>>2>>>0]=d):(c()[f>>>2>>>0]=d,c()[f+4>>>2>>>0]=n)},q:()=>{Ut("")},g:function(n,d,f){return n>>>=0,d=ei(d>>>0,f>>>0),qt[n].apply(null,d)},M:function(n,d,f){return n>>>=0,d=ei(d>>>0,f>>>0),qt[n].apply(null,d)},G:()=>{},I:()=>Date.now(),oa:()=>{throw Ze+=1,"unwind"},R:function(){return 4294901760},u:()=>performance.timeOrigin+performance.now(),x:()=>P?(ki(),mr(Oi)).cpus().length:navigator.hardwareConcurrency,O:function(n){n>>>=0;var d=o().length;if(n<=d||4294901760<n)return!1;for(var f=1;4>=f;f*=2){var b=d*(1+.2/f);b=Math.min(b,n+100663296);var C=Math;b=Math.max(n,b);e:{C=(C.min.call(C,4294901760,b+(65536-b%65536)%65536)-te.buffer.byteLength+65535)/65536;try{te.grow(C),et();var O=1;break e}catch{}O=void 0}if(O)return!0}return!1},ha:ri,ia:ni,X:or,A:oi,E:ii,ea:ai,D:si,a:te||l.wasmMemory,na:di,r:function(n,d,f,b){return di(n>>>0,d>>>0,f>>>0,b>>>0)}},ne=function(){function n(f,b){return ne=f.exports,ne=mn(),ne=Jl(),le.Vb.push(ne.bb),ct.unshift(ne.va),Me=b,br(),ne}var d={a:Xl};if(xt++,l.instantiateWasm)try{return l.instantiateWasm(d,n)}catch(f){Ae(`Module.instantiateWasm callback failed with error: ${f}`),w(f)}return vr(d,function(f){n(f.instance,f.module)}).catch(w),{}}();l._OrtInit=(n,d)=>(l._OrtInit=ne.wa)(n,d),l._OrtGetLastError=(n,d)=>(l._OrtGetLastError=ne.xa)(n,d),l._OrtCreateSessionOptions=(n,d,f,b,C,O,V,L,ee,J)=>(l._OrtCreateSessionOptions=ne.ya)(n,d,f,b,C,O,V,L,ee,J),l._OrtAppendExecutionProvider=(n,d)=>(l._OrtAppendExecutionProvider=ne.za)(n,d),l._OrtAddFreeDimensionOverride=(n,d,f)=>(l._OrtAddFreeDimensionOverride=ne.Aa)(n,d,f),l._OrtAddSessionConfigEntry=(n,d,f)=>(l._OrtAddSessionConfigEntry=ne.Ba)(n,d,f),l._OrtReleaseSessionOptions=n=>(l._OrtReleaseSessionOptions=ne.Ca)(n),l._OrtCreateSession=(n,d,f)=>(l._OrtCreateSession=ne.Da)(n,d,f),l._OrtReleaseSession=n=>(l._OrtReleaseSession=ne.Ea)(n),l._OrtGetInputOutputCount=(n,d,f)=>(l._OrtGetInputOutputCount=ne.Fa)(n,d,f),l._OrtGetInputName=(n,d)=>(l._OrtGetInputName=ne.Ga)(n,d),l._OrtGetOutputName=(n,d)=>(l._OrtGetOutputName=ne.Ha)(n,d),l._OrtFree=n=>(l._OrtFree=ne.Ia)(n),l._OrtCreateTensor=(n,d,f,b,C,O)=>(l._OrtCreateTensor=ne.Ja)(n,d,f,b,C,O),l._OrtGetTensorData=(n,d,f,b,C)=>(l._OrtGetTensorData=ne.Ka)(n,d,f,b,C),l._OrtReleaseTensor=n=>(l._OrtReleaseTensor=ne.La)(n),l._OrtCreateRunOptions=(n,d,f,b)=>(l._OrtCreateRunOptions=ne.Ma)(n,d,f,b),l._OrtAddRunConfigEntry=(n,d,f)=>(l._OrtAddRunConfigEntry=ne.Na)(n,d,f),l._OrtReleaseRunOptions=n=>(l._OrtReleaseRunOptions=ne.Oa)(n),l._OrtCreateBinding=n=>(l._OrtCreateBinding=ne.Pa)(n),l._OrtBindInput=(n,d,f)=>(l._OrtBindInput=ne.Qa)(n,d,f),l._OrtBindOutput=(n,d,f,b)=>(l._OrtBindOutput=ne.Ra)(n,d,f,b),l._OrtClearBoundOutputs=n=>(l._OrtClearBoundOutputs=ne.Sa)(n),l._OrtReleaseBinding=n=>(l._OrtReleaseBinding=ne.Ta)(n),l._OrtRunWithBinding=(n,d,f,b,C)=>(l._OrtRunWithBinding=ne.Ua)(n,d,f,b,C),l._OrtRun=(n,d,f,b,C,O,V,L)=>(l._OrtRun=ne.Va)(n,d,f,b,C,O,V,L),l._OrtEndProfiling=n=>(l._OrtEndProfiling=ne.Wa)(n),l._JsepOutput=(n,d,f)=>(l._JsepOutput=ne.Xa)(n,d,f),l._JsepGetNodeName=n=>(l._JsepGetNodeName=ne.Ya)(n);var pi=()=>(pi=ne.Za)(),gn=l._pthread_self=()=>(gn=l._pthread_self=ne._a)(),Ur=l._malloc=n=>(Ur=l._malloc=ne.$a)(n),At=l._free=n=>(At=l._free=ne.ab)(n);l.__emscripten_tls_init=()=>(l.__emscripten_tls_init=ne.bb)();var mi=n=>(mi=ne.cb)(n);l.__embind_initialize_bindings=()=>(l.__embind_initialize_bindings=ne.db)();var fi=l.__emscripten_thread_init=(n,d,f,b,C,O)=>(fi=l.__emscripten_thread_init=ne.fb)(n,d,f,b,C,O);l.__emscripten_thread_crashed=()=>(l.__emscripten_thread_crashed=ne.gb)();var hi=(n,d,f,b)=>(hi=ne.hb)(n,d,f,b),ro=n=>(ro=ne.ib)(n),no=l.__emscripten_thread_exit=n=>(no=l.__emscripten_thread_exit=ne.jb)(n),gi=()=>(gi=ne.kb)(),yi=(n,d)=>(yi=ne.lb)(n,d),oo=()=>(oo=ne.mb)(),yn=n=>(yn=ne.nb)(n),io=n=>(io=ne.ob)(n),bi=l.dynCall_ii=(n,d)=>(bi=l.dynCall_ii=ne.qb)(n,d),wi=n=>(wi=ne.rb)(n),vi=()=>(vi=ne.sb)(),$i=n=>($i=ne.tb)(n),_i=()=>(_i=ne.ub)();l.___start_em_js=920363,l.___stop_em_js=920524;function Jl(){var n=ne;n=Object.assign({},n);var d=b=>()=>b()>>>0,f=b=>C=>b(C)>>>0;return n.Za=d(n.Za),n._a=d(n._a),n.$a=f(n.$a),n.cb=f(n.cb),n.emscripten_main_runtime_thread_id=d(n.emscripten_main_runtime_thread_id),n.mb=d(n.mb),n.ob=f(n.ob),n}l.wasmMemory=te,l.stackAlloc=io,l.stackSave=oo,l.stackRestore=yn,l.keepRuntimeAlive=()=>0<Ze,l.UTF8ToString=ze,l.stringToUTF8=Vt,l.lengthBytesUTF8=tt,l.ExitStatus=$r,l.PThread=le;var bn;Ft=function n(){bn||Si(),bn||(Ft=n)};function Si(){if(!(0<xt))if(T)y(l),T||ir(ct),startWorker(l);else{if(l.preRun)for(typeof l.preRun=="function"&&(l.preRun=[l.preRun]);l.preRun.length;)qe.unshift(l.preRun.shift());ir(qe),0<xt||bn||(bn=!0,l.calledRun=!0,ye||(T||ir(ct),y(l),T||ir(zt)))}}return Si(),t.ready}})();typeof Bi=="object"&&typeof mo=="object"?mo.exports=Ri:typeof define=="function"&&define.amd&&define([],()=>Ri)});var Mi=Vr((lm,sd)=>{sd.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs"),vm=require("vm");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,"utf8"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\\n\'});var go,Nt,Nr,$n,Gr,Gi,yo,fe=K(()=>{"use strict";go=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Nt=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Nr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],$n=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Gr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Gi=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool",yo=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var _n=K(()=>{"use strict"});var Li=K(()=>{"use strict";_n()});var Fi,qi=K(()=>{"use strict";Fi="1.18.0"});var ji,ft,bo=K(()=>{"use strict";qi();ji="warning",ft={wasm:{},webgl:{},webgpu:{},versions:{common:Fi},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);ji=e}},get logLevel(){return ji}};Object.defineProperty(ft,"logLevel",{enumerable:!0})});var fr,Ki=K(()=>{"use strict";bo();fr=ft});var Yi=K(()=>{"use strict"});var Zi=K(()=>{"use strict";Sn()});var Ji=K(()=>{"use strict"});var Qi=K(()=>{"use strict";Sn()});var Sn=K(()=>{"use strict";Yi();Zi();Ji();Qi()});var xn=K(()=>{"use strict";Sn()});var wo,ea,Qt,Gt,vo=K(()=>{"use strict";bo();wo=(e,t)=>{(typeof ft.trace>"u"?!ft.wasm.trace:!ft.trace)||console.timeStamp(`${e}::ORT::${t}`)},ea=(e,t)=>{let r=new Error().stack?.split(/\\r\\n|\\r|\\n/g)||[],o=!1;for(let i=0;i<r.length;i++){if(o&&!r[i].includes("TRACE_FUNC")){let u=`FUNC_${e}::${r[i].trim().split(" ")[1]}`;t&&(u+=`::${t}`),wo("CPU",u);return}r[i].includes("TRACE_FUNC")&&(o=!0)}},Qt=e=>{(typeof ft.trace>"u"?!ft.wasm.trace:!ft.trace)||ea("BEGIN",e)},Gt=e=>{(typeof ft.trace>"u"?!ft.wasm.trace:!ft.trace)||ea("END",e)}});var ta=K(()=>{"use strict";_n();xn();vo()});var ra=K(()=>{"use strict";ta()});var na=K(()=>{"use strict"});var oa=K(()=>{"use strict"});var ia=K(()=>{"use strict"});var aa=K(()=>{"use strict"});var sa=K(()=>{"use strict";_n();xn()});var ua=K(()=>{"use strict";sa()});var hr=K(()=>{"use strict";Li();Ki();ra();xn();na();oa();vo();ia();aa();ua()});var bd,wd,la,da,ca,vd,Ve,Ht=K(()=>{"use strict";fe();bd=["V","I","W","E","F"],wd=(e,t)=>{console.log(`[${bd[e]},${new Date().toISOString()}]${t}`)},ca=(e,t)=>{la=e,da=t},vd=(e,t)=>{let r=Gr(e),o=Gr(la);r>=o&&wd(r,typeof t=="function"?t():t)},Ve=(...e)=>{da&&vd(...e)}});var pa,ma=K(()=>{"use strict";fe();pa=(e,t)=>new($n(t))(e)});var Cn=K(()=>{"use strict"});var An,$d,fa,_o,$o,ga,ya=K(()=>{"use strict";Ht();Cn();An=e=>Math.ceil(e/16)*16,$d=1,fa=()=>$d++,_o=async(e,t,r,o)=>{let i=An(r),u=e.device.createBuffer({size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(t,0,u,0,i),e.flush(),await u.mapAsync(GPUMapMode.READ);let c=u.getMappedRange();if(o){let p=o();return p.set(new Uint8Array(c,0,r)),p}else return new Uint8Array(c.slice(0,r))}finally{u.destroy()}},$o=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map}upload(t,r){let o=r.buffer,i=r.byteOffset,u=r.byteLength,a=An(u),c=this.storageCache.get(t);if(!c)throw new Error("gpu data for uploading does not exist");if(c.originalSize!==u)throw new Error(`inconsistent data size. gpu data size=${c.originalSize}, data size=${u}`);let p=this.backend.device.createBuffer({mappedAtCreation:!0,size:a,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),h=p.getMappedRange();new Uint8Array(h).set(new Uint8Array(o,i,u)),p.unmap();let l=this.backend.getCommandEncoder();this.backend.endComputePass(),l.copyBufferToBuffer(p,0,c.gpuData.buffer,0,a),Ve("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(p)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let i=this.storageCache.get(r);if(!i)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==i.originalSize)throw new Error("inconsistent source and destination gpu data size");let u=An(o.originalSize),a=this.backend.getCommandEncoder();this.backend.endComputePass(),a.copyBufferToBuffer(o.gpuData.buffer,0,i.gpuData.buffer,0,u)}registerExternalBuffer(t,r,o){let i;if(o){if(i=this.externalBuffers.get(o),i===void 0)throw new Error("previous buffer is not registered");if(t===o)return Ve("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${i}, buffer is the same, skip.`),i;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!`);this.externalBuffers.delete(o)}else i=fa();return this.storageCache.set(i,{gpuData:{id:i,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,i),Ve("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${i}, registered.`),i}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Ve("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=An(t),i,u=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,a=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(u||a){let p=u?this.freeBuffers:this.freeUniformBuffers,h=p.get(o);h||(h=[],p.set(o,h)),h.length>0?i=h.pop():i=this.backend.device.createBuffer({size:o,usage:r})}else i=this.backend.device.createBuffer({size:o,usage:r});let c={id:fa(),type:0,buffer:i};return this.storageCache.set(c.id,{gpuData:c,originalSize:t}),Ve("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${c.id}`),c}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Ve("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await _o(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}else{let t=this.capturedPendingBuffers.get(this.backend.currentSessionId);t||(t=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,t));for(let r of this.buffersPending)t.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(t){let r=this.capturedPendingBuffers.get(t);r&&(r.forEach(o=>{o.destroy()}),this.capturedPendingBuffers.delete(t))}},ga=(...e)=>new $o(...e)});var So,we,Ke=K(()=>{"use strict";So=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},we=e=>new So(e)});var xo,It,M,er,In,Tn,En,Se=K(()=>{"use strict";xo=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},It=class{static calcShape(t,r,o=!1){let i=t.length,u=r.length;if(i===0)return r;if(u===0)return t;let a=Math.max(t.length,r.length),c=new Array(a);if(o){if(i<2||u<2)return;let p=xo.calcMatMulShape([t[i-2],t[i-1]],[r[u-2],r[u-1]]);if(p===void 0)return;[c[a-2],c[a-1]]=p}for(let p=o?3:1;p<=a;p++){let h=i-p<0?1:t[i-p],l=u-p<0?1:r[u-p];if(h!==l&&h>1&&l>1)return;let y=Math.max(h,l);if(h&&l)c[a-p]=Math.max(h,l);else{if(y>1)return;c[a-p]=0}}return c}static isValidBroadcast(t,r){let o=t.length,i=r.length;if(o>i)return!1;for(let u=1;u<=o;u++)if(t[o-u]!==1&&t[o-u]!==r[i-u])return!1;return!0}},M=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let o=t.length;if(o===0)return[];let i=new Array(o),u=o-1;for(;u>=0;){if(t[u]%r===0){i[u]=t[u]/r;break}if(r%t[u]!==0)throw new Error("cannot convert shape");i[u]=1,r/=t[u],u--}for(u--;u>=0;u--)i[u]=t[u];return i}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let i=1;for(let u=r;u<o;u++){if(t[u]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");i*=t[u]}return i}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let i=r-3;i>=0;--i)o[i]=o[i+1]*t[i+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((i,u)=>i+r[u]+r[u+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,i)=>o===r[i])}},er=class e{static adjustPoolAttributes(t,r,o,i,u,a){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let c=0;c<r.length-2;c++)c>=o.length?o.push(r[c+2]):o[c]=r[c+2];for(let c=0;c<o.length;c++)if(c<i.length){if(i[c]<0)throw new Error("strides should be greater than or equal to 1")}else i.push(1);for(let c=0;c<o.length;c++)if(c<u.length){if(u[c]<0)throw new Error("dilations should be greater than or equal to 1")}else u.push(1);for(let c=0;c<o.length*2;c++)if(c<a.length){if(a[c]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let c=0;c<o.length;c++){if(o[c]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[c]>=o[c]||a[c+o.length]>=o[c])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,i,u,a,c){if(c){if(u.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(i.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let p=0;p<t.length-2;p++)e.adjustPadAndReturnShape(t[p+(a?1:2)],r[p],o[p],i[p],u,p,p+t.length-2,c)}}static computePoolOutputShape(t,r,o,i,u,a,c){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let p=[r[0],r[1]];return e.computeShapeHelper(t,r,p,o,i,u,a,c),p}static computeConvOutputShape(t,r,o,i,u,a,c){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let p=[t[0],r[0]];return e.computeShapeHelper(!1,t,p,o,i,u,a,c),p}static computeShapeHelper(t,r,o,i,u,a,c,p){if(t)for(let h=0;h<r.length-2;h++)o.push(1);else for(let h=0;h<r.length-2;h++)o.push(e.adjustPadAndReturnShape(r[h+2],i[h],u[h],a[h],c,h,h+r.length-2,p))}static adjustPadAndReturnShape(t,r,o,i,u,a,c,p){let h=o*(i-1)+1;if(p&&p!=="NOTSET")switch(p){case"VALID":return u[a]=0,u[c]=0,Math.floor((t-h)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let y=((t+r-1)/r-1)*r+i-t;return u[a]=Math.floor(p==="SAME_LOWER"?(y+1)/2:y/2),u[c]=y-u[a],Math.floor((t+y-i)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+u[a]+u[c]-h)/r+1)}},In=class{static getShapeOfGemmResult(t,r,o,i,u){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let a,c,p;r?(a=t[1],c=t[0]):(a=t[0],c=t[1]);let h=-1;if(i?(p=o[0],h=1):(p=o[1],h=0),o[h]!==c)throw new Error("dimension mismatch");if(a<=0||p<=0||c<=0)throw new Error("invalid shape specified");if(u&&!It.isValidBroadcast(u,[a,p]))throw new Error("gemm: invalid bias shape for broadcast");return[a,p,c]}},Tn=-34028234663852886e22,En=34028234663852886e22});var tr,Ao,De,ut,Z,We,Je,vt,lt,se,Io,z,j,Pn,Co,ba,gr,$e=K(()=>{"use strict";fe();Se();tr=64,Ao=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},De=(e,t=1)=>{let r=Ao(e,t);return typeof r=="string"?r:r[0]},ut=(e,t=1)=>{let r=Ao(e,t);return typeof r=="string"?r:r[1]},Z=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:M.computeStrides(r)})}),t},We=e=>e%4===0?4:e%2===0?2:1,Je=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,vt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,lt=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,se=(e,t,r,o)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?o==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:o==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Io=(e,t,r,o,i)=>{let u=typeof r=="number",a=u?r:r.length,c=[...new Array(a).keys()],p=a<2?"u32":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,h=Ao(t,i),l=typeof h=="string"?h:h[1],y=typeof h=="string"?h:h[0],w={indices:p,value:l,storage:y,tensor:t},_=F=>typeof F=="string"?F:`${F}u`,$={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},S=u?"uniforms.":"",E=`${S}${e}_shape`,A=`${S}${e}_strides`,x="";for(let F=0;F<a-1;F++)x+=`\n    let dim${F} = current / ${se(A,F,a)};\n    let rest${F} = current % ${se(A,F,a)};\n    indices[${F}] = dim${F};\n    current = rest${F};\n    `;x+=`indices[${a-1}] = current;`;let P=a<2?"":`\n  fn o2i_${e}(offset: u32) -> ${w.indices} {\n    var indices: ${w.indices};\n    var current = offset;\n    ${x}\n    return indices;\n  }`,T=F=>($.offsetToIndices=!0,a<2?F:`o2i_${e}(${F})`),k=[];if(a>=2)for(let F=a-1;F>=0;F--)k.push(`${se(A,F,a)} * (indices[${F}])`);let W=a<2?"":`\n  fn i2o_${e}(indices: ${w.indices}) -> u32 {\n    return ${k.join("+")};\n  }`,N=F=>($.indicesToOffset=!0,a<2?F:`i2o_${e}(${F})`),G=(...F)=>a===0?"0u":`${w.indices}(${F.map(_).join(",")})`,oe=(F,ie)=>a<2?`${F}`:`${se(F,ie,a)}`,X=(F,ie,xe)=>a<2?`${F}=${xe};`:`${se(F,ie,a)}=${xe};`,U={},re=(F,ie)=>{$.broadcastedIndicesToOffset=!0;let xe=`${ie.name}broadcastedIndicesTo${e}Offset`;if(xe in U)return`${xe}(${F})`;let Ne=[];for(let Ye=a-1;Ye>=0;Ye--){let dt=ie.indicesGet("outputIndices",Ye+ie.rank-a);Ne.push(`${oe(A,Ye)} * (${dt} % ${oe(E,Ye)})`)}return U[xe]=`fn ${xe}(outputIndices: ${ie.type.indices}) -> u32 {\n             return ${Ne.length>0?Ne.join("+"):"0u"};\n           }`,`${xe}(${F})`},Be=(F,ie)=>(()=>{if(w.storage===w.value)return`${e}[${F}]=${ie};`;if(w.storage==="vec2<u32>"&&w.value==="i32")return`${e}[${F}]=vec2<u32>(u32(${ie}), select(0u, 0xFFFFFFFFu, ${ie} < 0));`;if(w.storage==="vec2<u32>"&&w.value==="u32")return`${e}[${F}]=vec2<u32>(u32(${ie}), 0u);`;if(w.storage==="u32"&&w.value==="vec4<bool>")return`${e}[${F}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ie}));`;throw new Error(`not supported combination of storage type ${w.storage} and value type ${w.value} yet`)})(),Ee=F=>(()=>{if(w.storage===w.value)return`${e}[${F}]`;if(w.storage==="vec2<u32>"&&w.value==="i32")return`i32(${e}[${F}].x)`;if(w.storage==="vec2<u32>"&&w.value==="u32")return`u32(${e}[${F}].x)`;if(w.storage==="u32"&&w.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${F}] & 0xFFu), bool(${e}[${F}] & 0xFF00u), bool(${e}[${F}] & 0xFF0000u), bool(${e}[${F}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${w.storage} and value type ${w.value} yet`)})(),Ae=a<2?"":`\n  fn get_${e}ByIndices(indices: ${w.indices}) -> ${l} {\n    return ${Ee(`i2o_${e}(indices)`)};\n  }`,te=a<2?"":(()=>{let F=c.map(xe=>`d${xe}: u32`).join(", "),ie=c.map(xe=>`d${xe}`).join(", ");return`\n  fn get_${e}(${F}) -> ${l} {\n    return get_${e}ByIndices(${G(ie)});\n  }`})(),Me=(...F)=>{if(F.length!==a)throw new Error(`indices length must be ${a}`);let ie=F.map(_).join(",");return a===0?Ee("0u"):a===1?Ee(ie[0]):($.get=!0,$.getByIndices=!0,$.indicesToOffset=!0,`get_${e}(${ie})`)},ye=F=>a<2?Ee(F):($.getByIndices=!0,$.indicesToOffset=!0,`get_${e}ByIndices(${F})`),he=a<2?"":`\n  fn set_${e}ByIndices(indices: ${w.indices}, value: ${l}) {\n    ${Be(`i2o_${e}(indices)`,"value")}\n  }`,ue=a<2?"":(()=>{let F=c.map(xe=>`d${xe}: u32`).join(", "),ie=c.map(xe=>`d${xe}`).join(", ");return`\n  fn set_${e}(${F}, value: ${l}) {\n    set_${e}ByIndices(${G(ie)}, value);\n  }`})();return{impl:()=>{let F=[],ie=!1;return $.offsetToIndices&&(F.push(P),ie=!0),$.indicesToOffset&&(F.push(W),ie=!0),$.broadcastedIndicesToOffset&&(Object.values(U).forEach(xe=>F.push(xe)),ie=!0),$.set&&(F.push(ue),ie=!0),$.setByIndices&&(F.push(he),ie=!0),$.get&&(F.push(te),ie=!0),$.getByIndices&&(F.push(Ae),ie=!0),!u&&ie&&F.unshift(`const ${E} = ${w.indices}(${r.join(",")});`,`const ${A} = ${w.indices}(${M.computeStrides(r).join(",")});`),F.join(`\n`)},type:w,offsetToIndices:T,indicesToOffset:N,broadcastedIndicesToOffset:re,indices:G,indicesGet:oe,indicesSet:X,set:(...F)=>{if(F.length!==a+1)throw new Error(`indices length must be ${a}`);let ie=F[a];if(typeof ie!="string")throw new Error("value must be string");let xe=F.slice(0,a).map(_).join(",");return a===0?Be("0u",ie):a===1?Be(xe[0],ie):($.set=!0,$.setByIndices=!0,$.indicesToOffset=!0,`set_${e}(${xe}, ${ie})`)},setByOffset:Be,setByIndices:(F,ie)=>a<2?Be(F,ie):($.setByIndices=!0,$.indicesToOffset=!0,`set_${e}ByIndices(${F}, ${ie});`),get:Me,getByOffset:Ee,getByIndices:ye,usage:o,name:e,strides:A,shape:E,rank:a}},z=(e,t,r,o=1)=>Io(e,t,r,"input",o),j=(e,t,r,o=1)=>Io(e,t,r,"output",o),Pn=(e,t,r,o=1)=>Io(e,t,r,"internal",o),Co=class{constructor(t,r){this.normalizedDispatchGroup=t;this.limits=r;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=tr){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],i=typeof t=="number"?1:t[2];if(r>this.limits.maxComputeWorkgroupSizeX||o>this.limits.maxComputeWorkgroupSizeY||i>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${r}, ${o}, ${i}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(r*o*i>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${r}, ${o}, ${i}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let u=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,a=u?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,\n                                             @builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,c=u?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*i}u + local_idx;`;return`@compute @workgroup_size(${r}, ${o}, ${i})\n  fn main(${a}) {\n    ${c}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",i=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${i}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,o=1){return this.uniforms.push({name:t,type:r,length:o}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o,length:i}of this.uniforms)if(i&&i>4)o==="f16"?t.push(`@align(16) ${r}:array<mat2x4<${o}>, ${Math.ceil(i/8)}>`):t.push(`${r}:array<vec4<${o}>, ${Math.ceil(i/4)}>`);else{let u=i==null||i===1?o:`vec${i}<${o}>`;t.push(`${r}:${u}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}get variablesInfo(){if(this.uniforms.length===0)return;let t=r=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(r)];return this.uniforms.map(r=>[t(r.type),r.length??1])}},ba=(e,t)=>new Co(e,t),gr=(e,t)=>{let r=e.length,o=[];for(let i=0;i<r;i++){let u=r-1-i,a=e[u]||1;(t[t.length-1-i]||1)>1&&a===1&&o.unshift(u)}return o}});var _d,wa,Sd,xd,yt,va,$a,yr=K(()=>{"use strict";fe();Se();Ke();$e();_d=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},wa=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,Sd=(e,t)=>M.sortBasedOnPerm(e,wa(e.length,t)),xd=(e,t,r,o)=>{let i=[];i.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let u=0;u<t;++u)i.push(r.indicesSet("a",e[u],`i[${u}]`));return i.push("return a;}"),i.join(`\n`)},yt=(e,t)=>{let r=e.dataType,o=e.dims.length,i=wa(o,t),u=Sd(e.dims,i),a=j("output",r,u.length),c=z("a",r,o),p=h=>`\n  ${h.registerUniform("output_size","u32").declareVariables(c,a)}\n\n  ${xd(i,o,c,a)}\n\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${a.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${a.setByOffset("global_idx",c.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:h=>{let l=M.size(u);return{outputs:[{dims:u,dataType:h[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:[{type:12,data:l},...Z(h[0].dims,u)]}},getShaderSource:p}},va=(e,t)=>{_d(e.inputs),e.compute(yt(e.inputs[0],t.perm))},$a=e=>we({perm:e.perm})});var Cd,Ad,Id,Td,Ed,Pd,Od,kd,Rd,Bd,Tt,_a,Sa,xa,Ca,Aa,Ia,Ta,Ea,Pa,Oa,ka=K(()=>{"use strict";fe();Se();$e();On();yr();Cd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Ad={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Id={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Td={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Ed=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},Pd=(e,t)=>{let r=[],o=e.length;for(let u=0;u<o;u++)t.indexOf(u)===-1&&r.push(e[u]);let i=t.map(u=>e[u]);return[r,i]},Od=(e,t)=>{let r=e.length+t.length,o=[],i=0;for(let u=0;u<r;u++)t.indexOf(u)===-1?o.push(e[i++]):o.push(1);return o},kd=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Rd=(e,t)=>{let r=[];if(!kd(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},Bd=(e,t,r,o,i,u,a)=>{let c=r[0].dims,p=M.size(u),h=M.size(a),l=z("_A",r[0].dataType,c),y=j("output",i,u),w=32,_=`\n          var<workgroup> aBestValues : array<f32, ${w}>;\n       `;return{name:e,shaderCache:t,getShaderSource:S=>`\n        ${S.registerUniform("reduceSize","u32").declareVariables(l,y)}\n        ${_}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${S.mainStart(w)}\n\n          let outputIndex = global_idx / ${w};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = f32(${Id[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${w}) {\n           let candidate = f32(${l.getByOffset("offset + k")});\n           bestValue = ${Cd[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${w}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${Ad[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${y.setByOffset("outputIndex",`${o==="mean"?`${y.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${y.type.storage}(${Td[o]})`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:u,dataType:i}],dispatchGroup:{x:p},programUniforms:[{type:12,data:h}]})}},Tt=(e,t,r,o)=>{let i=e.inputs.length===1?r:To(e.inputs,r),u=i.axes;u.length===0&&!i.noopWithEmptyAxes&&(u=e.inputs[0].dims.map((_,$)=>$));let a=M.normalizeAxes(u,e.inputs[0].dims.length),c=a,p=e.inputs[0],h=Rd(c,e.inputs[0].dims.length);h.length>0&&(p=e.compute(yt(e.inputs[0],h),{inputs:[0],outputs:[-1]})[0],c=Ed(c.length,p.dims.length));let[l,y]=Pd(p.dims,c),w=l;i.keepDims&&(w=Od(l,a)),e.compute(Bd(t,{hint:i.cacheKey,inputDependencies:["type"]},[p],o,e.inputs[0].dataType,w,y),{inputs:[p]})},_a=(e,t)=>{Tt(e,"ReduceMeanShared",t,"mean")},Sa=(e,t)=>{Tt(e,"ReduceL1Shared",t,"l1")},xa=(e,t)=>{Tt(e,"ReduceL2Shared",t,"l2")},Ca=(e,t)=>{Tt(e,"ReduceLogSumExpShared",t,"logSumExp")},Aa=(e,t)=>{Tt(e,"ReduceMaxShared",t,"max")},Ia=(e,t)=>{Tt(e,"ReduceMinShared",t,"min")},Ta=(e,t)=>{Tt(e,"ReduceProdShared",t,"prod")},Ea=(e,t)=>{Tt(e,"ReduceSumShared",t,"sum")},Pa=(e,t)=>{Tt(e,"ReduceSumSquareShared",t,"sumSquare")},Oa=(e,t)=>{Tt(e,"ReduceLogSumShared",t,"logSum")}});var Et,Dd,kn,To,Pt,Md,zd,Ud,Vd,Wd,Nd,Gd,Hd,Ld,Fd,Ot,Ra,Ba,Da,Ma,za,Ua,Va,Wa,Na,Ga,On=K(()=>{"use strict";fe();Se();Ke();$e();ka();Et=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Dd=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],kn=(e,t,r,o,i,u,a=!1,c=!1)=>{let p=[],h=r[0].dims,l=h.length,y=M.normalizeAxes(i,l),w=!c&&y.length===0;h.forEach((E,A)=>{w||y.indexOf(A)>=0?a&&p.push(1):p.push(E)});let _=p.length,$=M.size(p);return{name:e,shaderCache:t,getShaderSource:E=>{let A=[],x=z("_A",r[0].dataType,l),P=j("output",u,_),T=o(x,P,y),k=T[2];for(let W=0,N=0;W<l;W++)w||y.indexOf(W)>=0?(a&&N++,k=`for(var j${W}: u32 = 0; j${W} < ${h[W]}; j${W}++) {\n                  ${T[2].includes("last_index")?`let last_index = j${W};`:""}\n                  ${x.indicesSet("input_indices",W,`j${W}`)}\n                  ${k}\n                }`):(A.push(`${x.indicesSet("input_indices",W,P.indicesGet("output_indices",N))};`),N++);return`\n\n        ${E.registerUniform("output_size","u32").declareVariables(x,P)}\n\n        ${E.mainStart()}\n          ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${x.type.indices};\n          let output_indices = ${P.offsetToIndices("global_idx")};\n\n          ${A.join(`\n`)}\n          ${T[0]}       // init ops for reduce max/min\n          ${T[1]}\n          ${k}\n          ${T[3]}\n          ${T.length===4?P.setByOffset("global_idx","value"):T.slice(4).join(`\n`)}\n        }`},getRunData:()=>({outputs:[{dims:p,dataType:u}],dispatchGroup:{x:Math.ceil($/64)},programUniforms:[{type:12,data:$},...Z(h,p)]})}},To=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),we({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},Pt=(e,t,r,o)=>{let i=e.inputs,u=i.length===1?r:To(i,r);e.compute(kn(t,{hint:u.cacheKey,inputDependencies:["rank"]},[i[0]],u.noopWithEmptyAxes&&u.axes.length===0?Dd:o,u.axes,i[0].dataType,u.keepDims,u.noopWithEmptyAxes),{inputs:[0]})},Md=(e,t)=>{Et(e.inputs),Pt(e,"ReduceLogSum",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,"value = log(value);"])},zd=(e,t)=>{Et(e.inputs),Pt(e,"ReduceL1",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += abs(${o.getByIndices("input_indices")});`,""])},Ud=(e,t)=>{Et(e.inputs),Pt(e,"ReduceL2",t,(o,i)=>[`var t = ${i.type.value}(0); var value = ${i.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Vd=(e,t)=>{Et(e.inputs),Pt(e,"ReduceLogSumExp",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += exp(${o.getByIndices("input_indices")});`,"value = log(value);"])},Wd=(e,t)=>{Et(e.inputs),Pt(e,"ReduceMax",t,(o,i,u)=>{let a=[];for(let c=0;c<o.rank;c++)(u.indexOf(c)>=0||u.length===0)&&a.push(o.indicesSet("input_indices",c,0));return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = max(value, ${o.getByIndices("input_indices")});`,""]})},Nd=(e,t)=>{Et(e.inputs),Pt(e,"ReduceMean",t,(o,i,u)=>{let a=1;for(let c=0;c<o.rank;c++)(u.indexOf(c)>=0||u.length===0)&&(a*=e.inputs[0].dims[c]);return["var sum = f32(0);","",`sum += f32(${o.getByIndices("input_indices")});`,`let value = ${i.type.value}(sum / ${a});`]})},Gd=(e,t)=>{Et(e.inputs),Pt(e,"ReduceMin",t,(o,i,u)=>{let a=[];for(let c=0;c<o.rank;c++)(u.indexOf(c)>=0||u.length===0)&&a.push(`input_indices[${c}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = min(value, ${o.getByIndices("input_indices")});`,""]})},Hd=(e,t)=>{Et(e.inputs),Pt(e,"ReduceProd",t,(o,i)=>[`var value = ${i.type.storage}(1);`,"",`value *= ${o.getByIndices("input_indices")};`,""])},Ld=(e,t)=>{Et(e.inputs),Pt(e,"ReduceSum",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,""])},Fd=(e,t)=>{Et(e.inputs),Pt(e,"ReduceSumSquare",t,(o,i)=>[`var t = ${i.type.value}(0); var value = ${i.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += t * t;`,""])},Ot=(e,t,r)=>{if(t.length===0)return r;let o=1,i=1;for(let u=0;u<t.length;u++)t.indexOf(u)===-1?o*=e[u]:i*=e[u];return i<32&&o>1024},Ra=(e,t)=>{Ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Nd(e,t):_a(e,t)},Ba=(e,t)=>{Ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?zd(e,t):Sa(e,t)},Da=(e,t)=>{Ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ud(e,t):xa(e,t)},Ma=(e,t)=>{Ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Vd(e,t):Ca(e,t)},za=(e,t)=>{Ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Wd(e,t):Aa(e,t)},Ua=(e,t)=>{Ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Gd(e,t):Ia(e,t)},Va=(e,t)=>{Ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Hd(e,t):Ta(e,t)},Wa=(e,t)=>{Ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ld(e,t):Ea(e,t)},Na=(e,t)=>{Ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Fd(e,t):Pa(e,t)},Ga=(e,t)=>{Ot(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Md(e,t):Oa(e,t)}});var Ha,La,Fa,Eo,qa=K(()=>{"use strict";fe();Ke();On();Ha=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},La=(e,t)=>{Ha(e.inputs);let r=(o,i,u)=>{let a=[];for(let c=0;c<o.rank;c++)(u.indexOf(c)>=0||u.length===0)&&a.push(`input_indices[${c}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(kn("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Fa=(e,t)=>{Ha(e.inputs);let r=(o,i,u)=>{let a=[];for(let c=0;c<o.rank;c++)(u.indexOf(c)>=0||u.length===0)&&a.push(`input_indices[${c}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(kn("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Eo=e=>we(e)});var qd,jd,Kd,Yd,Rn,Zd,ja,Po=K(()=>{"use strict";fe();Cn();$e();qd=(e,t)=>{let r=e[0],o=e[1],i=e[2],u=e[3],a=e[4],c=e[5];if(a&&c)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let p=r.dims[0],h=r.dims[1],l=r.dims[2];if(i.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==l)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(i.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let y=i.dims[0]/3,w=y,_=w;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let P of t.qkvHiddenSizes)if(P%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");y=t.qkvHiddenSizes[0],w=t.qkvHiddenSizes[1],_=t.qkvHiddenSizes[2]}let $=h;if(y!==w)throw new Error("qkv_hidden_sizes first element should be same as the second");if(i.dims[0]!==y+w+_)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let S=0;if(a){if(w!==_)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(a.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(a.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(a.dims[1]!==p)throw new Error(\'Input "past" second dimension must be batch_size\');if(a.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(a.dims[4]!==w/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(S=a.dims[3])}let E=$+S,A=-1,x=0;if(u)throw new Error("Mask not supported");if(a)throw new Error("past is not supported");if(c)throw new Error("relativePositionBias is not supported");return{batchSize:p,sequenceLength:h,pastSequenceLength:S,kvSequenceLength:$,totalSequenceLength:E,maxSequenceLength:A,inputHiddenSize:l,hiddenSize:y,vHiddenSize:_,headSize:Math.floor(y/t.numHeads),vHeadSize:Math.floor(_/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:x,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},jd=(e,t,r,o)=>{let i=We(o),u=64,a=o/i;a<u?u=1:a/8<64&&(u=Math.ceil(a/8));let c=Math.ceil(o/i/u),p=[{type:t.dataType,data:1/o},{type:12,data:a},{type:12,data:c}],h=De(t.dataType,i),l=y=>{let w=j("x",t.dataType,t.dims,i),_="thread_max_vector";i===2?_="max(thread_max_vector.x, thread_max_vector.y)":i===4&&(_="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let $=ut(t.dataType),S=[{name:"d_inv",type:$},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`\n  var<workgroup> wgMax: array<f32, ${u}>;\n  var<workgroup> wgSum: array<f32, ${u}>;\n  ${y.registerUniforms(S).declareVariables(w)}\n  ${y.mainStart([u,1,1])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${Je("f32",i,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${vt($,i,"x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${_};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${u}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${Je("f32",i,"0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${vt($,i,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${lt("sumVector",i)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${u}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${Je($,i,"uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${vt($,i,"x[offset + i]")};\n        x[offset + i] = ${w.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${u};${h};${i}`},getShaderSource:l,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:p})},{inputs:[t],outputs:[]})},Kd=(e,t,r,o,i,u)=>{let a=[i.batchSize,i.numHeads,i.sequenceLength,i.kvSequenceLength+i.pastSequenceLength],c=u.scale===0?1/Math.sqrt(i.headSize):u.scale,p=We(i.headSize),h=i.headSize/p,l=12,y={x:Math.ceil(i.totalSequenceLength/l),y:Math.ceil(i.sequenceLength/l),z:i.batchSize*i.numHeads},w=[{type:12,data:i.sequenceLength},{type:12,data:h},{type:12,data:i.totalSequenceLength},{type:12,data:i.kvSequenceLength},{type:t.dataType,data:c}],_=[t,r],$=E=>{let A=z("q",t.dataType,t.dims,p),x=z("key",r.dataType,r.dims,p),P=j("output",t.dataType,a),T=De(t.dataType),k=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:T}];return`\n  const beta: ${T} = 1.0;\n  const TILE_SIZE = ${l}u;\n\n  var<workgroup> tileQ: array<${A.type.storage}, ${l*l}>;\n  var<workgroup> tileK: array<${A.type.storage}, ${l*l}>;\n  ${E.registerUniforms(k).declareVariables(A,x,P)}\n  ${E.mainStart([l,l,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${Je(T,p)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {\n      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;\n      output[outputIdx] = ${lt("value",p)} * uniforms.alpha;\n    }\n  }`},S=e.compute({name:"AttentionProbs",shaderCache:{hint:`${p}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType,gpuDataType:0}],dispatchGroup:y,programUniforms:w}),getShaderSource:$},{inputs:_,outputs:[-1]})[0];return jd(e,S,i.batchSize*i.numHeads*i.sequenceLength,i.totalSequenceLength),S},Yd=(e,t,r,o)=>{let i=[o.batchSize,o.sequenceLength,o.vHiddenSize],u=12,a={x:Math.ceil(o.vHeadSize/u),y:Math.ceil(o.sequenceLength/u),z:o.batchSize*o.numHeads},c=[{type:12,data:o.sequenceLength},{type:12,data:o.totalSequenceLength},{type:12,data:o.vHeadSize},{type:12,data:o.numHeads},{type:12,data:o.vHiddenSize}],p=h=>{let l=z("probs",t.dataType,t.dims),y=z("v",r.dataType,r.dims),w=j("output",t.dataType,i),_=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`\n  const TILE_SIZE = ${u}u;\n  var<workgroup> tileQ: array<${l.type.value}, ${u*u}>;\n  var<workgroup> tileK: array<${l.type.value}, ${u*u}>;\n  ${h.registerUniforms(_).declareVariables(l,y,w)}\n  ${h.mainStart([u,u,1])}\n   let headIdx = workgroup_id.z;\n   let m = global_id.y;\n   let n = global_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${l.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType,gpuDataType:0}],dispatchGroup:a,programUniforms:c}),getShaderSource:p},{inputs:[t,r],outputs:[0]})[0]},Rn=(e,t,r,o,i,u,a,c,p,h,l)=>{let y=Kd(e,t,r,p,h,l);Yd(e,y,o,h)},Zd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=t.sequenceLength,i=t.inputHiddenSize,u=t.headSize,a=12,c={x:Math.ceil(t.headSize/a),y:Math.ceil(t.sequenceLength/a),z:t.batchSize*t.numHeads},p=[e.inputs[0],e.inputs[1],e.inputs[2]],h=[{type:12,data:o},{type:12,data:i},{type:12,data:u},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],l=y=>{let w=j("output_q",p[0].dataType,r),_=j("output_k",p[0].dataType,r),$=j("output_v",p[0].dataType,r),S=z("input",p[0].dataType,p[0].dims),E=z("weight",p[1].dataType,p[1].dims),A=z("bias",p[2].dataType,p[2].dims),x=S.type.storage,P=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`\n  const TILE_SIZE = ${a}u;\n  var<workgroup> tileInput: array<${x}, ${a*a}>;\n  var<workgroup> tileWeightQ: array<${x}, ${a*a}>;\n  var<workgroup> tileWeightK: array<${x}, ${a*a}>;\n  var<workgroup> tileWeightV: array<${x}, ${a*a}>;\n  ${y.registerUniforms(P).declareVariables(S,E,A,w,_,$)}\n  ${y.mainStart([a,a,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = global_id.y;\n    let n = global_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${x}(0);\n    var valueK = ${x}(0);\n    var valueV = ${x}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:c,programUniforms:h}),getShaderSource:l},{inputs:p,outputs:[-1,-1,-1]})},ja=(e,t)=>{let r=qd(e.inputs,t),[o,i,u]=Zd(e,r);return Rn(e,o,i,u,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Xd,Jd,Qd,Ka,Ya=K(()=>{"use strict";hr();fe();Se();Ke();$e();Xd=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,i,u)=>{let a=i.length;if(a!==o.length)throw new Error(`${u}: num dimensions != ${a}`);i.forEach((c,p)=>{if(c!==o[p])throw new Error(`${u}: dim[${p}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Jd=(e,t)=>{let{epsilon:r,spatial:o,format:i}=t,u=e[0].dims,a=o?We(u[u.length-1]):1,c=i==="NHWC"&&u.length>1?a:1,p=M.size(u)/a,h=o,l=h?u.length:u,y=z("x",e[0].dataType,e[0].dims,a),w=z("scale",e[1].dataType,e[1].dims,c),_=z("bias",e[2].dataType,e[2].dims,c),$=z("inputMean",e[3].dataType,e[3].dims,c),S=z("inputVar",e[4].dataType,e[4].dims,c),E=j("y",e[0].dataType,l,a),A=()=>{let P="";if(o)P=`let cOffset = ${u.length===1?"0u":i==="NHWC"?`outputIndices[${u.length-1}] / ${a}`:"outputIndices[1]"};`;else if(i==="NCHW")P=`\n            ${E.indicesSet("outputIndices","0","0")}\n            let cOffset = ${E.indicesToOffset("outputIndices")};`;else{P=`var cIndices = ${w.type.indices}(0);\n                       cIndices[0] = outputIndices[${u.length-1}];`;for(let T=1;T<w.rank;T++)P+=`cIndices[${T}] = outputIndices[${T}];`;P+=`let cOffset = ${w.indicesToOffset("cIndices")};`}return P},x=P=>`\n  const epsilon = ${r};\n  ${P.registerUniform("outputSize","u32").declareVariables(y,w,_,$,S,E)}\n  ${P.mainStart()}\n  ${P.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${E.offsetToIndices(`global_idx * ${a}`)};\n    ${A()}\n    let scale = ${w.getByOffset("cOffset")};\n    let bias = ${_.getByOffset("cOffset")};\n    let inputMean = ${$.getByOffset("cOffset")};\n    let inputVar = ${S.getByOffset("cOffset")};\n    let x = ${y.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${E.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${a}`,inputDependencies:h?["rank","type","type","type","type"]:void 0},getShaderSource:x,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h?[{type:12,data:p},...Z(u)]:[{type:12,data:p}]})}},Qd=e=>we(e),Ka=(e,t)=>{let{inputs:r,outputCount:o}=e,i=Qd({...t,outputCount:o});if(fr.webgpu.validateInputContent&&Xd(r,i),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Jd(r,i))}});var ec,tc,Za,Xa=K(()=>{"use strict";Se();$e();ec=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},tc=e=>{let t=e[0].dims,r=e[0].dims[2],o=M.size(t)/4,i=e[0].dataType,u=z("input",i,t,4),a=z("bias",i,[r],4),c=z("residual",i,t,4),p=j("output",i,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:l=>`\n  const channels = ${r}u / 4;\n  ${l.declareVariables(u,a,c,p)}\n\n  ${l.mainStart()}\n    ${l.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${u.getByOffset("global_idx")}\n      + ${a.getByOffset("global_idx % channels")} + ${c.getByOffset("global_idx")};\n    ${p.setByOffset("global_idx","value")}\n  }`}},Za=e=>{ec(e.inputs),e.compute(tc(e.inputs))}});var rc,ke,Ja,Qa,es,ts,rs,ns,os,is,as,nc,ss,us,ls,ds,Bn,cs,Dn,ps,ms,fs,hs,gs,ys,bs,ws,vs,$s,_s,Ss,xs,Cs,As,Is,Ts,Es,Oo,ko,Ps,Os,ks,Mn=K(()=>{"use strict";fe();Se();Ke();$e();rc=(e,t,r,o,i,u)=>{let a=Math.ceil(t/4),c="";typeof i=="string"?c=`${i}(a)`:c=i("a");let p=z("inputData",r,[a],4),h=j("outputData",o,[a],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(p,h)}\n\n  ${u??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${p.getByOffset("global_idx")};\n    ${h.setByOffset("global_idx",c)}\n  }`},ke=(e,t,r,o,i,u=e.dataType)=>({name:t,shaderCache:{hint:i,inputDependencies:["type"]},getShaderSource:a=>rc(a,M.size(e.dims),e.dataType,u,r,o),getRunData:a=>({outputs:[{dims:e.dims,dataType:u}],dispatchGroup:{x:Math.ceil(M.size(a[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(M.size(e.dims)/4)}]})}),Ja=e=>{e.compute(ke(e.inputs[0],"Abs","abs"))},Qa=e=>{e.compute(ke(e.inputs[0],"Acos","acos"))},es=e=>{e.compute(ke(e.inputs[0],"Acosh","acosh"))},ts=e=>{e.compute(ke(e.inputs[0],"Asin","asin"))},rs=e=>{e.compute(ke(e.inputs[0],"Asinh","asinh"))},ns=e=>{e.compute(ke(e.inputs[0],"Atan","atan"))},os=e=>{e.compute(ke(e.inputs[0],"Atanh","atanh"))},is=e=>we(e),as=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(ke(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},nc=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Tn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:En;return we({min:t,max:r})},ss=(e,t)=>{let r=e.inputs.length===1?t:nc(e.inputs),o=ut(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Clip",i=>`clamp(${i}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},us=e=>{e.compute(ke(e.inputs[0],"Ceil","ceil"))},ls=e=>{e.compute(ke(e.inputs[0],"Cos","cos"))},ds=e=>{e.compute(ke(e.inputs[0],"Cosh","cosh"))},Bn=e=>we(e),cs=(e,t)=>{let r=ut(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Elu",o=>`elu_vf32(${o})`,`\n  const elu_alpha_ = ${r}(${t.alpha});\n\n  fn elu_f32(a: ${r}) -> ${r} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},Dn=(e="f32")=>`\nconst r0: ${e} = 0.3275911;\nconst r1: ${e} = 0.254829592;\nconst r2: ${e} = -0.284496736;\nconst r3: ${e} = 1.421413741;\nconst r4: ${e} = -1.453152027;\nconst r5: ${e} = 1.061405429;\n\nfn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,ps=e=>{let t=ut(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Dn(t)))},ms=e=>{e.compute(ke(e.inputs[0],"Exp","exp"))},fs=e=>{e.compute(ke(e.inputs[0],"Floor","floor"))},hs=e=>{let t=ut(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Dn(t)))},gs=(e,t)=>{let r=ut(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"LeakyRelu",o=>`select(leaky_relu_alpha_ * ${o}, ${o}, ${o} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},ys=e=>{e.compute(ke(e.inputs[0],"Not",t=>`!${t}`))},bs=e=>{e.compute(ke(e.inputs[0],"Neg",t=>`-${t}`))},ws=e=>{e.compute(ke(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},vs=e=>{let t=ut(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},$s=e=>{e.compute(ke(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},_s=e=>we(e),Ss=(e,t)=>{let r=ut(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"HardSigmoid",o=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${o} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},xs=e=>{e.compute(ke(e.inputs[0],"Sin","sin"))},Cs=e=>{e.compute(ke(e.inputs[0],"Sinh","sinh"))},As=e=>{e.compute(ke(e.inputs[0],"Sqrt","sqrt"))},Is=e=>{e.compute(ke(e.inputs[0],"Tan","tan"))},Ts=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Es=e=>{e.compute(ke(e.inputs[0],"Tanh",Ts))},Oo=(e="f32")=>`\nconst fast_gelu_a: ${e} = 0.5;\nconst fast_gelu_b: ${e} = 0.7978845608028654;\nconst fast_gelu_c: ${e} = 0.035677408136300125;\n\nfn tanh_v(v: vec4<${e}>) -> vec4<${e}> {\n  return ${Ts("v")};\n}\n`,ko=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Ps=e=>{let t=ut(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"FastGelu",ko,Oo(t),void 0,e.inputs[0].dataType))},Os=(e,t)=>{let r=ut(e.inputs[0].dataType);return e.compute(ke(e.inputs[0],"ThresholdedRelu",o=>`select(vec4<${r}>(0.0), ${o}, ${o} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},ks=e=>{e.compute(ke(e.inputs[0],"Log","log"))}});var oc,ic,Bs,Ds=K(()=>{"use strict";Se();$e();Mn();oc=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},ic=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=z("input",e[0].dataType,e[0].dims,4),o=z("bias",e[0].dataType,[e[0].dims[2]],4),i=j("output",e[0].dataType,t,4),u=M.size(t)/4,a=De(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)}}),getShaderSource:p=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${p.declareVariables(r,o,i)}\n\n  ${Dn(a)}\n\n  ${p.mainStart()}\n    ${p.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${i.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},Bs=e=>{oc(e.inputs),e.compute(ic(e.inputs))}});var ac,sc,kt,Ms,zs,Us,Vs,Ws,Ns,Gs,Hs,Ls,Fs,qs=K(()=>{"use strict";fe();Se();$e();ac=(e,t,r,o,i,u,a,c,p,h,l,y)=>{let w,_;typeof c=="string"?w=_=(x,P)=>`${c}((${x}),(${P}))`:typeof c=="function"?w=_=c:(w=c.scalar,_=c.vector);let $=j("outputData",l,o.length,4),S=z("aData",p,t.length,4),E=z("bData",h,r.length,4),A;if(i)if(u){let x=M.size(t)===1,P=M.size(r)===1,T=t.length>0&&t[t.length-1]%4===0,k=r.length>0&&r[r.length-1]%4===0;x||P?A=$.setByOffset("global_idx",_(x?`${S.type.value}(${S.getByOffset("0")}.x)`:S.getByOffset("global_idx"),P?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"))):A=`\n            let outputIndices = ${$.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${S.broadcastedIndicesToOffset("outputIndices",$)};\n            let offsetB = ${E.broadcastedIndicesToOffset("outputIndices",$)};\n            ${$.setByOffset("global_idx",_(a||T?S.getByOffset("offsetA / 4u"):`${S.type.value}(${S.getByOffset("offsetA / 4u")}[offsetA % 4u])`,a||k?E.getByOffset("offsetB / 4u"):`${E.type.value}(${E.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else A=$.setByOffset("global_idx",_(S.getByOffset("global_idx"),E.getByOffset("global_idx")));else{if(!u)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let x=(P,T,k="")=>{let W=`aData[indexA${T}][componentA${T}]`,N=`bData[indexB${T}][componentB${T}]`;return`\n            let outputIndices${T} = ${$.offsetToIndices(`global_idx * 4u + ${T}u`)};\n            let offsetA${T} = ${S.broadcastedIndicesToOffset(`outputIndices${T}`,$)};\n            let offsetB${T} = ${E.broadcastedIndicesToOffset(`outputIndices${T}`,$)};\n            let indexA${T} = offsetA${T} / 4u;\n            let indexB${T} = offsetB${T} / 4u;\n            let componentA${T} = offsetA${T} % 4u;\n            let componentB${T} = offsetB${T} % 4u;\n            ${P}[${T}] = ${k}(${w(W,N)});\n          `};l===9?A=`\n            var data = vec4<u32>(0);\n            ${x("data",0,"u32")}\n            ${x("data",1,"u32")}\n            ${x("data",2,"u32")}\n            ${x("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:A=`\n            ${x("outputData[global_idx]",0)}\n            ${x("outputData[global_idx]",1)}\n            ${x("outputData[global_idx]",2)}\n            ${x("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(S,E,$)}\n\n        ${y??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${A}\n      }`},sc=(e,t,r,o,i,u,a=r.dataType)=>{let c=!M.areEqual(r.dims,o.dims),p=r.dims,h=M.size(r.dims),l=!1,y=!1,w=[c];if(c){let _=It.calcShape(r.dims,o.dims,!1);if(!_)throw new Error("Can\'t perform binary op on the given tensors");p=_,h=M.size(p);let $=M.size(r.dims)===1,S=M.size(o.dims)===1,E=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,A=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;w.push($),w.push(S),w.push(E),w.push(A);let x=1;for(let P=1;P<p.length;P++){let T=r.dims[r.dims.length-P]??1,k=o.dims[o.dims.length-P]??1;if(T===k)x*=T;else break}x%4===0?(y=!0,l=!0):($||S||E||A)&&(l=!0)}else l=!0;return w.push(l),{name:e,shaderCache:{hint:t+w.map(_=>_.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:_=>ac(_,r.dims,o.dims,p,l,c,y,i,r.dataType,o.dataType,a,u),getRunData:()=>({outputs:[{dims:p,dataType:a}],dispatchGroup:{x:Math.ceil(h/64/4)},programUniforms:[{type:12,data:Math.ceil(M.size(p)/4)},...Z(r.dims,o.dims,p)]})}},kt=(e,t,r,o,i,u)=>{e.compute(sc(t,i??"",e.inputs[0],e.inputs[1],r,o,u))},Ms=e=>{kt(e,"Add",(t,r)=>`${t}+${r}`)},zs=e=>{kt(e,"Div",(t,r)=>`${t}/${r}`)},Us=e=>{kt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Vs=e=>{kt(e,"Mul",(t,r)=>`${t}*${r}`)},Ws=e=>{let t=z("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;kt(e,"Pow",{scalar:(o,i)=>`pow_custom(${o},${i})`,vector:(o,i)=>`pow_vector_custom(${o},${i})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Ns=e=>{kt(e,"Sub",(t,r)=>`${t}-${r}`)},Gs=e=>{kt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Hs=e=>{kt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Ls=e=>{kt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Fs=e=>{kt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var lc,dc,cc,pc,js,Ks,Ys=K(()=>{"use strict";fe();Se();Ke();$e();lc=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let r=0,o=e[r],i=o.dataType,u=o.dims.length;e.forEach((a,c)=>{if(c!==r){if(a.dataType!==i)throw new Error("input tensors should be one type");if(a.dims.length!==u)throw new Error("input tensors should have the same shape");a.dims.forEach((p,h)=>{if(h!==t&&p!==o.dims[h])throw new Error("non concat dimensions must match")})}})},dc=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,cc=(e,t)=>{let r=e.length,o=[];for(let i=0;i<r;++i){let u=t.setByOffset("global_idx",e[i].getByIndices("indices"));r===1?o.push(u):i===0?o.push(`if (inputIndex == ${i}u) { ${u} }`):i===r-1?o.push(`else { ${u} }`):o.push(`else if (inputIndex == ${i}) { ${u} }`)}return o.join(`\n`)},pc=(e,t,r,o)=>{let i=M.size(r),u=new Array(e.length),a=new Array(e.length),c=0,p=[],h=[],l=[{type:12,data:i}];for(let S=0;S<e.length;++S)c+=e[S].dims[t],u[S]=c,h.push(e[S].dims.length),a[S]=z(`input${S}`,o,h[S]),p.push("rank"),l.push({type:12,data:u[S]});for(let S=0;S<e.length;++S)l.push(...Z(e[S].dims));l.push(...Z(r));let y=j("output",o,r.length),w=y.indicesGet("indices",t),_=Array.from(Array(u.length).keys()).map(S=>`uniforms.sizeInConcatAxis${S}`).join(","),$=S=>`\n\n  ${(()=>{S.registerUniform("outputSize","u32");for(let E=0;E<e.length;E++)S.registerUniform(`sizeInConcatAxis${E}`,"u32");return S.declareVariables(...a,y)})()}\n\n  ${dc(u.length,_)}\n\n  ${S.mainStart()}\n    ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${y.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${w});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${u.length}u>(${_});\n      ${w} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${cc(a,y)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:r,dataType:o}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:l}),getShaderSource:$}},js=(e,t)=>{let r=e.inputs,o=r[0].dims,i=M.normalizeAxis(t.axis,o.length);lc(r,i);let u=o.slice();u[i]=r.reduce((c,p)=>c+(p.dims.length>i?p.dims[i]:0),0);let a=r.filter(c=>M.size(c.dims)>0);e.compute(pc(a,i,u,r[0].dataType),{inputs:a})},Ks=e=>we({axis:e.axis})});var $t,_t,St,zn,Lt=K(()=>{"use strict";fe();Se();$t=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},_t=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},St=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},zn=e=>{let t=e?.activation||"";if(t==="HardSigmoid"){let[r,o]=e?.activation_params||[.2,.5];return{activation:t,alpha:r,beta:o}}else if(t==="Clip"){let[r,o]=e?.activation_params||[Tn,En];return{activation:t,clipMax:o,clipMin:r}}else if(t==="LeakyRelu"){let[r]=e?.activation_params||[.01];return{activation:t,alpha:r}}return{activation:t}}});var Qe,Un,Vn=K(()=>{"use strict";Qe=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Un=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var Wn,Ro=K(()=>{"use strict";Wn=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var mc,fc,Hr,Zs,hc,Lr,gc,Nn,Fr=K(()=>{"use strict";fe();Se();$e();Lt();Vn();mc=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,fc=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,Hr=(e,t,r="f32",o,i=!1,u=32,a=!1,c=32)=>{let p=t[1]*e[1],h=t[0]*e[0],l=i?p:u,y=i?u:p,w=l/t[0],_=u/t[1];if(!((i&&w===4&&e[1]===4||!i&&(w===3||w===4))&&l%t[0]===0&&u%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${i} is true, innerElementSize ${w} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${w} must be 3 or 4.\n  tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}. tileInner ${u} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${w}<${r}>, ${l/w}>, ${y}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${h/e[0]}>, ${u}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${w};\nconst tileInner = ${u};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${a?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${p};\n\n  let num_tiles = ${a?`${Math.ceil(c/u)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n  var kStart = ${a?`i32(globalId.z) * ${c}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${_};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${mc(i,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${w===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${fc(i,w)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},Zs=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,hc=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Lr=(e,t,r="f32",o,i=!1,u=32,a=!1,c=32,p=!1)=>{let h=e[1]*t[1],l=e[0]*t[0],y=i?h:u,w=i?u:h;if(!(w%t[1]===0&&y%t[0]===0&&u%t[1]===0))throw new Error(`tileAHight ${w} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${y} must be divisible by workgroupSize[0]${t[0]}, tileInner ${u} must be divisible by workgroupSize[1]${t[1]}`);let _=w/t[1],$=y/t[0],S=u/t[1],E=p?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${h};\n    let globalColStart = i32(workgroupId.x) * ${l};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${w}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${y}; inputCol = inputCol + ${t[0]}) {\n          ${Zs(i,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${u}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${i?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${h};\n\nlet tileRowA = i32(localId.y) * ${_};\nlet tileColA = i32(localId.x) * ${$};\nlet tileRowB = i32(localId.y) * ${S};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${$}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Zs(i,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${hc(i)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${y}>, ${w}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${l}>, ${u}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${u};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${a?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let num_tiles = ${a?`${Math.ceil(c/u)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n    var kStart = ${a?`i32(globalId.z) * ${c}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${E}\n  }\n`},gc=(e,t,r,o,i,u=!1)=>{let[a,c,p]=i,[h,l,y,w]=o,_=gr(a,p),$=gr(c,p),S=De(o[0].type.tensor),E=()=>{let P=l.rank,T=h.rank,k=`var aIndices: ${l.type.indices};`;for(let W=P-2-1,N=T-1;W>=0;W--,N--)k+=`\naIndices[${W}] = ${T>1?`batchIndices[${N}]`:"batchIndices"};`;return _.forEach(W=>{k+=`\naIndices[${W}] = 0;`}),k+=`\naIndices[${P-2}] = u32(row);\n                   aIndices[${P-1}] = u32(colIn);`,k},A=()=>{let P=y.rank,T=h.rank,k=`var bIndices: ${y.type.indices};`;for(let W=P-2-1,N=T-1;W>=0;W--,N--)k+=`\nbIndices[${W}] = ${T>1?`batchIndices[${N}]`:"batchIndices"};`;return $.forEach(W=>{k+=`\nbIndices[${W}] = 0;`}),k+=`\nbIndices[${P-2}] = u32(row);\n                   bIndices[${P-1}] = u32(colIn);`,k};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${h.type.indices}) -> ${Qe(e,S)} {\n      var value = ${Qe(e,S)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        ${E()}\n        value = ${l.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${h.type.indices}) -> ${Qe(e,S)} {\n      var value = ${Qe(e,S)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        ${A()}\n        value = ${y.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Qe(e,S)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${u?"bias[colIn]":`${Qe(e,S)}(bias[row])`};`:""}\n        ${r}\n        ${w.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Nn=(e,t,r,o,i=!1)=>{let u=e[0].dims,a=e[1].dims,c=u.slice(0,-2),p=a.slice(0,-2),h=o?o.slice(0,-2):r.slice(0,-2),l=M.size(h),y=u[u.length-2],w=u[u.length-1],_=a[a.length-1],$=w%4===0&&_%4===0,S=y<=8?[4,1,1]:[4,4,1],E=[8,8,1],A=[Math.ceil(_/E[0]/S[0]),Math.ceil(y/E[1]/S[1]),Math.ceil(l/E[2]/S[2])],x=$?4:1,P=[...c,y,w/x],T=P.length,k=[...p,w,_/x],W=k.length,N=[l,y,_/x],G=[{type:6,data:y},{type:6,data:_},{type:6,data:w}];_t(t,G),G.push(...Z(h,P,k));let oe=["rank","rank"],X=e.length>2;X&&(G.push(...Z(e[2].dims)),oe.push("rank")),G.push(...Z(N));let U=re=>{let Be=h.length,Ee=Pn("batchDims",e[0].dataType,Be,1),Ae=De(e[0].dataType),te=z("a",e[0].dataType,T,x),Me=z("b",e[1].dataType,W,x),ye=j("result",e[0].dataType,N.length,x),he=[te,Me];if(X){let F=i?x:1;he.push(z("bias",e[2].dataType,e[2].dims.length,F))}let ue=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];St(t,ue);let ge=De(ye.type.tensor),Pe=$t(t,ye.type.value,ge),Le=gc(x,X,Pe,[Ee,te,Me,ye],[c,p,h],i);return`\n  ${re.registerUniforms(ue).registerInternalVariables(Ee).declareVariables(...he,ye)}\n  ${Le}\n  ${$?Hr(S,E,Ae,Ee):Lr(S,E,Ae,Ee)}\n                   `};return{name:"MatMul",shaderCache:{hint:`${S};${t.activation};${$};${i}`,inputDependencies:oe},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:A[0],y:A[1],z:A[2]},programUniforms:G}),getShaderSource:U}}});var yc,Xs,Js=K(()=>{"use strict";fe();Ht();$e();Lt();Vn();Ro();Fr();yc=(e,t,r,o,i=!1,u,a=4,c=4,p=4,h="f32")=>{let l=X=>{switch(X){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${h}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${X} is not supported.`)}},y=X=>{switch(X){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${X} is not supported.`)}},w=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,_=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,$=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",S=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",E=e?"row":"col",A=e?"col":"row",x=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${E} / outWidth;\n    let outCol = ${E} % outWidth;\n\n    let WRow = ${A} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${A} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${A} % inChannels;\n    var resData = ${Qe(a,h)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${$} && xCol >= 0 && xCol < ${S}) {\n      ${w}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${l(a)}\n    }\n    return resData;`,P=e?t&&o?`\n    let col = colIn * ${a};\n    ${x}`:`\n    let col = colIn * ${a};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${x}\n    }\n    return ${Qe(a,h)}(0.0);`:o&&r?`\n    let col = colIn * ${a};\n    ${x}`:`\n    let col = colIn * ${a};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${x}\n    }\n    return ${Qe(a,h)}(0.0);`,T=`${y(c)}`,k=Qe(p,h),W=e?Qe(a,h):Qe(c,h),N=e?Qe(c,h):Qe(a,h),G=$t(u,k,h);return`\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${W} {\n      ${e?P:T}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${N} {\n      ${e?T:P}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${k}) {\n      let col = colIn * ${p};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${_}\n      ${Un(i)}\n      ${G}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},Xs=(e,t,r,o,i,u,a,c)=>{let p=t.format==="NHWC",h=p?e[0].dims[3]:e[0].dims[1],l=r[0],y=p?r[2]:r[3],w=p?r[1]:r[2],_=p?r[3]:r[1],$=p&&(h%4===0||h%3===0)&&_%4===0,S=p?_:y*w,E=p?y*w:_,A=[8,8,1],x=o<=8?[4,1,1]:[4,4,1],P=[Math.ceil(S/A[0]/x[0]),Math.ceil(E/A[1]/x[1]),Math.ceil(l/A[2]/x[2])];Ve("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${P}`);let T=$?p&&h%4!==0?3:4:1,k=A[1]*x[1],W=A[0]*x[0],N=Math.max(A[0]*T,A[1]),G=o%k===0,oe=i%W===0,X=u%N===0,U=$?[T,4,4]:[1,1,1],re=[{type:6,data:o},{type:6,data:i},{type:6,data:u},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];_t(t,re),re.push(...Z(e[0].dims,e[1].dims));let Be=["rank","rank"];a&&(re.push(...Z(e[2].dims)),Be.push("rank")),re.push(...Z(r));let Ee=Ae=>{let te=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];St(t,te);let Me=$?4:1,ye=De(e[0].dataType),he=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${$?`vec4<${ye}>`:ye}) {\n        result[flatIndex] = ${$?`vec4<${ye}>`:ye}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${$?`vec4<${ye}>`:ye}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${$?"/ 4":""}, value);\n      }`,ue=z("x",e[0].dataType,e[0].dims.length,T===3?1:T),ge=z("w",e[1].dataType,e[1].dims.length,Me),Pe=[ue,ge],Le=j("result",e[0].dataType,r.length,Me);if(a){let F=z("bias",e[2].dataType,e[2].dims.length,Me);Pe.push(F),he+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${$?`vec4<${ye}>`:ye} {\n          return bias[coords.${p?"w":"y"}${$?"/ 4":""}];\n        }`}return`\n        ${Wn("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${Ae.registerUniforms(te).declareVariables(...Pe,Le)}\n        ${he}\n        ${yc(p,G,oe,X,a,t,U[0],U[1],U[2],ye)}\n        ${$?Hr(x,A,ye,void 0,!p,N):Lr(x,A,ye,void 0,!p,N,!1,void 0,c)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${T};${$};${G};${oe};${X};${k};${W};${N}`,inputDependencies:Be},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:P[0],y:P[1],z:P[2]},programUniforms:re}),getShaderSource:Ee}}});var Bo,Qs,eu=K(()=>{"use strict";fe();Se();$e();Do();Lt();Bo=(e,t,r)=>{let o=e.length>2,i=o?"value += b[output_channel];":"",u=e[0].dims,a=e[1].dims,c=a[0]/t.group,p=t.format==="NHWC",h=Gn(u,a,t.dilations,t.pads,t.strides,p),l=M.size(h),y=[{type:12,data:l},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:c}];_t(t,y),y.push(...Z(u,a));let w=["rank","rank"];o&&(y.push(...Z(e[2].dims)),w.push("rank")),y.push(...Z(h));let _=$=>{let S=j("output",e[0].dataType,h.length),E=De(S.type.tensor),A=$t(t,S.type.value,E),x=z("x",e[0].dataType,u.length),P=z("w",e[1].dataType,a.length),T=[x,P];o&&T.push(z("b",e[2].dataType,e[2].dims.length));let k=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return St(t,k),`\n  ${$.registerUniforms(k).declareVariables(...T,S)}\n\n  ${$.mainStart()}\n    ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let outputIndices = ${S.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${p?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${p?1:2}], outputIndices[${p?2:3}]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel / uniforms.output_channels_per_group;\n\n    var value: ${S.type.value} = ${S.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[${p?1:2}]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[${p?2:3}]) {\n            continue;\n          }\n\n          let xVal = ${p?x.get("batch","xHeight","xWidth","input_channel"):x.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${P.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${i}\n    ${A}\n    ${S.setByOffset("global_idx","value")}\n  }`};return{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:w},getRunData:()=>({outputs:[{dims:r?r(h):h,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:y}),getShaderSource:_}},Qs=(e,t,r)=>{let o=e.length>2,i=We(r[3]),u=We(r[2]),a=M.size(r)/i/u,c=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/i],p=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/i],h=[r[0],r[1],r[2],r[3]/i],l=[{type:12,data:a},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];_t(t,l),l.push(...Z(c,p,h));let y=(u-1)*t.strides[1]+p[1],w=_=>{let $=j("output",e[0].dataType,h.length,i),S=De($.type.tensor),E=$t(t,$.type.value,S),A=z("x",e[0].dataType,c.length,i),x=z("w",e[1].dataType,p.length,i),P=[A,x];o&&P.push(z("b",e[2].dataType,e[2].dims,i));let T=o?"value += b[output_channel];":"",k=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return St(t,k),`\n  ${_.registerUniforms(k).declareVariables(...P,$)}\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${u}u;\n    let col = (index1 % width1) * ${u}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${A.type.value}, ${y}>;\n    var values: array<${$.type.value}, ${u}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w\'s height/width.\n    for (var w_height: u32 = 0u; w_height < ${p[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${y}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${A.get("batch","u32(x_height)","u32(x_width)","input_channel")};\n          } else {\n            x_vals[i] = ${A.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${p[1]}; w_width++) {\n          let w_val = ${x.get("w_height","w_width","0","output_channel")};\n          for (var i = 0u; i < ${u}u; i++) {\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${u}u; i++) {\n      var value = values[i];\n      ${T}\n      ${E}\n      ${$.set("batch","row","col + i","output_channel","value")};\n    }\n  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${i};${u};${y};${p[0]};${p[1]}`,inputDependencies:o?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:l}),getShaderSource:w}}});var Mo,bc,tu,zo=K(()=>{"use strict";fe();Se();Fr();$e();Lt();Mo=(e,t,r,o,i=!1)=>{let u=e[0].dims,a=e[1].dims,c=u[u.length-2],p=a[a.length-1],h=u[u.length-1],l=We(p),y=We(h),w=We(c),_=M.size(r)/l/w,$=e.length>2,S=o?o.slice(0,-2):r.slice(0,-2),A=[M.size(S),c,p],x=[{type:12,data:_},{type:12,data:c},{type:12,data:p},{type:12,data:h}];_t(t,x),x.push(...Z(S,u,a)),$&&x.push(...Z(e[2].dims)),x.push(...Z(A));let P=T=>{let k=Pn("batch_dims",e[0].dataType,S.length),W=z("a",e[0].dataType,u.length,y),N=z("b",e[1].dataType,a.length,l),G=j("output",e[0].dataType,A.length,l),oe=De(G.type.tensor),X=$t(t,G.type.value,oe),U=[W,N],re="";if($){let ue=i?l:1;U.push(z("bias",e[2].dataType,e[2].dims.length,ue)),re=`${i?`value += bias[col / ${ue}];`:`value += ${G.type.value}(bias[row + i]);`}`}let Be=u.slice(0,-2),Ee=a.slice(0,-2),Ae=gr(Be,S),te=gr(Ee,S),Me=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];St(t,Me);let ye=(ue,ge)=>{let Pe=ue.rank,Le=ue.name;if(Pe===2)return`var ${Le}_indices = ${ue.type.indices}(0u, 0u);`;let F=k.rank,ie=`var ${Le}_indices: ${ue.type.indices};`;for(let xe=Pe-2-1,Ne=F-1;xe>=0;xe--,Ne--)ie+=`\n${Le}_indices[${xe}] = ${F>1?`batch_indices[${Ne}]`:"batch_indices"};`;return ge.forEach(xe=>{ie+=`\n${Le}_indices[${xe}] = 0;`}),ie+=`${Le}_indices[${Pe-2}] = 0u;\n                     ${Le}_indices[${Pe-1}] = 0u;`,ie},he=()=>{let ue=`var a_data: ${W.type.value};`;for(let ge=0;ge<y;ge++)ue+=`\n              let b_data${ge} = b[(b_offset + (k + ${ge}) * uniforms.N + col) / ${l}];`;for(let ge=0;ge<w;ge++){ue+=`a_data = a[(a_offset + (row + ${ge}) * uniforms.K + k) / ${y}];`;for(let Pe=0;Pe<y;Pe++)ue+=`\n            values[${ge}] = fma(${N.type.value}(a_data${y===1?"":`[${Pe}]`}), b_data${Pe}, values[${ge}]);\n`}return ue};return`\n  ${T.registerUniforms(Me).registerInternalVariables(k).declareVariables(...U,G)}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let col = (global_idx % (uniforms.N / ${l})) * ${l};\n    var index1 = global_idx / (uniforms.N / ${l});\n    let stride1 = uniforms.M / ${w};\n    let row = (index1 % stride1) * ${w};\n    let batch = index1 / stride1;\n\n    ${r.length===2?"":`let batch_indices = ${k.offsetToIndices("batch")};`}\n    ${ye(W,Ae)}\n    let a_offset = ${W.indicesToOffset("a_indices")};\n    ${ye(N,te)}\n    let b_offset = ${N.indicesToOffset("b_indices")};\n    var values: array<${G.type.value}, ${w}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${y}) {\n      ${he()}\n    }\n    for (var i = 0u; i < ${w}u; i++) {\n      var value = values[i];\n      ${re}\n      ${X}\n      let cur_indices = ${G.type.indices}(batch, row + i, col);\n      let offset = ${G.indicesToOffset("cur_indices")};\n      ${G.setByOffset(`offset / ${l}`,"value")};\n    }\n  }\n  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${l};${y};${w};${i}`,inputDependencies:$?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:x}),getShaderSource:P}},bc=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},tu=e=>{bc(e.inputs);let t=It.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");let r=t[t.length-1],o=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&o<8?e.compute(Mo(e.inputs,{activation:""},t)):e.compute(Nn(e.inputs,{activation:""},t))}});var Gn,Uo,wc,ru,Vo,vc,$c,Wo,Do=K(()=>{"use strict";Se();Js();Fr();eu();Lt();zo();yr();Gn=(e,t,r,o,i,u)=>{let a=e[0],c=e.slice(u?1:2,u?3:4),p=c.length,h=t[0],y=t.slice(2).map(($,S)=>$+($-1)*(r[S]-1)),_=c.map(($,S)=>$+o[S]+o[S+p]).map(($,S)=>Math.floor(($-y[S]+i[S])/i[S]));return _.splice(0,0,a),_.splice(u?3:1,0,h),_},Uo=[2,3,1,0],wc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let i=e[0].dims.length-2;if(t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},ru=(e,t)=>{let r=e.kernelShape.slice();for(let u=2;u<t[1].dims.length;++u)r[u-2]===0&&(r[u-2]=t[1].dims[u]);let o=e.pads.slice();er.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let i=Object.assign({},e);return Object.assign(i,{kernelShape:r,pads:o}),i},Vo=e=>{let t=zn(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],i=e.dilations,u=e.group,a=e.kernel_shape,c=e.pads,p=e.strides,h=e.w_is_const();return{autoPad:o,format:r,dilations:i,group:u,kernelShape:a,pads:c,strides:p,wIsConst:h,...t,cacheKey:`${e.format};${t.activation};`}},vc=(e,t,r)=>{let o=ru(r,t),i=r.format==="NHWC";if(r.group!==1){if(!e.adapterInfo.isArchitecture("ampere")&&i&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1){let N=Gn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,i),G=e.kernelCustomData.wT??e.compute(yt(t[1],Uo),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=G);let oe=[t[0],G];t.length===3&&oe.push(t[2]),e.compute(Qs(oe,o,N),{inputs:oe})}else e.compute(Bo(t,o));return}let u=t.length===3,a=t[0].dims[i?1:2],c=t[0].dims[i?2:3],p=t[0].dims[i?3:1],h=t[1].dims[2],l=t[1].dims[3],y=Gn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,i),w=y[i?1:2],_=y[i?2:3],$=y[i?3:1],S=i&&h===a&&l===c&&r.pads[0]===0&&r.pads[1]===0;if(S||h===1&&l===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let W=y[0],N,G,oe,X=[];if(i){let Be=e.kernelCustomData.wT??e.compute(yt(t[1],Uo),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Be),S){let Ee=a*c*p;N=t[0].reshape([1,W,Ee]),G=Be.reshape([1,Ee,$]),oe=[1,W,$]}else N=t[0].reshape([W,a*c,p]),G=Be.reshape([1,p,$]),oe=[W,w*_,$];X.push(N),X.push(G)}else N=t[0].reshape([W,p,a*c]),G=t[1].reshape([1,$,p]),oe=[W,$,w*_],X.push(G),X.push(N);u&&X.push(t[2]);let U=oe[2],re=X[0].dims[X[0].dims.length-1];U<8&&re<8?e.compute(Mo(X,o,y,oe,i),{inputs:X}):e.compute(Nn(X,o,y,oe,i),{inputs:X});return}let E=!0,A=e.kernelCustomData.wT??e.compute(yt(t[1],Uo),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);let x=[t[0],A];u&&x.push(t[2]);let P=i?w*_:$,T=i?$:w*_,k=h*l*p;e.compute(Xs(x,o,y,P,T,k,u,E),{inputs:x})},$c=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let i=[0,t.pads[0],0,t.pads[1]],u=[1].concat(t.strides),a=[1].concat(t.dilations),c=[1].concat(t.kernelShape),p=ru({...t,pads:i,strides:u,dilations:a,kernelShape:c},o);e.compute(Bo(o,p,h=>r?[h[0],h[2],h[3]]:[]))},Wo=(e,t)=>{wc(e.inputs,t),e.inputs[0].dims.length===3?$c(e,t):vc(e,e.inputs,t)}});var _c,nu,ou=K(()=>{"use strict";fe();Ht();$e();Lt();Vn();Ro();Fr();_c=(e,t=!1,r,o,i=4)=>{let u=A=>{switch(A){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return ${o}(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${A} is not supported.`)}},a=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,c=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,p=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",h=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",l=e?"row":"col",y=e?"col":"row",w=`\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${l} / outWidth;\n      let outCol = ${l} % outWidth;\n\n      let WRow = ${y} / (uniforms.filter_dims[1] * inChannels);\n      let WCol = ${y} / inChannels % uniforms.filter_dims[1];\n      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(${p}) || fract(xR) > 0.0) {\n        return ${o}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${h}) || fract(xC) > 0.0) {\n        return ${o}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${y} % inChannels;\n      ${a}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${i}];`,_=e?`\n      let col = colIn * ${i};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n        ${w}\n      }\n      return ${o}(0.0);`:`\n      let col = colIn * ${i};\n      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n        ${w}\n      }\n      return ${o}(0.0);`,$=`\n      let col = colIn * ${i};\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);\n      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];\n      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${u(i)}\n      }\n      return ${o}(0.0);\n      `,S=$t(r,o);return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${o} {\n    ${e?_:$}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${o} {\n    ${e?$:_}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${o}) {\n    let col = colIn * ${i};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${c}\n      ${Un(t)}\n      ${S}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${i}] = value;\n    }\n  }`},nu=(e,t,r,o,i,u,a,c)=>{let p=t.format==="NHWC",h=p?e[0].dims[3]:e[0].dims[1],l=r[0],y=p?r[2]:r[3],w=p?r[1]:r[2],_=p?r[3]:r[1],$=p&&h%4===0&&h%3&&_%4===0,S=p?_:y*w,E=p?y*w:_,A=[8,8,1],x=o<=8?[4,1,1]:[4,4,1],P=[Math.ceil(S/A[0]/x[0]),Math.ceil(E/A[1]/x[1]),Math.ceil(l/A[2]/x[2])];Ve("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${P}`);let T=$?4:1,k=Math.max(A[0]*T,A[1]),W=$?4:1,N=[t.kernelShape[p?1:2],t.kernelShape[p?2:3]],G=[N[0]+(t.dilations[0]<=1?0:(N[0]-1)*(t.dilations[0]-1)),N[1]+(t.dilations[1]<=1?0:(N[1]-1)*(t.dilations[1]-1))],oe=[G[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),G[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],X=[{type:6,data:o},{type:6,data:i},{type:6,data:u},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:N},{type:6,data:oe}];_t(t,X),X.push(...Z(e[0].dims,e[1].dims));let U=["rank","rank"];a&&(X.push(...Z(e[2].dims)),U.push("rank")),X.push(...Z(r));let re=Be=>{let Ee=z("x",e[0].dataType,e[0].dims.length,W),Ae=z("w",e[1].dataType,e[1].dims.length,1),te=j("result",e[0].dataType,r.length,W),Me=[Ee,Ae],ye="";if(a){let ge=z("bias",e[2].dataType,e[2].dims.length,W);Me.push(ge),ye+=`\n          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${ge.type.value} {\n            return bias[coords.${p?"w":"y"}${$?"/ 4":""}];\n          }`}let he=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:N.length},{name:"pads",type:"i32",length:oe.length}];St(t,he);let ue=De(e[0].dataType,1);if(ue!=="f16"&&ue!=="f32")throw new Error(`elemType ${ue} is not supported.`);return`\n        ${Wn("uniforms.result_strides")}\n        ${Be.registerUniforms(he).declareVariables(...Me,te)};\n        ${ye}\n        ${_c(p,a,t,Ee.type.value,T)}\n        ${$?Hr(x,A,ue,void 0,!p,k):Lr(x,A,ue,void 0,!p,k,!1,void 0,c)}`};return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${x};${A};${$}`,inputDependencies:U},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:P[0],y:P[1],z:P[2]},programUniforms:X}),getShaderSource:re}}});var Sc,No,iu=K(()=>{"use strict";fe();Ht();Se();$e();Sc=(e,t,r,o,i,u=!1,a,c,p=!1)=>{let h=p?1:2,l=p?2:3,y=p?3:1,w=u?2:1,_=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${a}>`:a}) {\n    result[flatIndex] = ${u?`vec4<${a}>`:a}(value);\n  }`;o&&(_+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${a}>`:a} {\n      return bias[coords.${p?"w":"y"}${u?"/ 4":""}];\n    }`);let $=u?4:1,S=z("W",t[1].dataType,t[1].dims.length,$),E=z("Dy",t[0].dataType,t[0].dims.length,$),A=[E,S];o&&A.push(z("bias",t[2].dataType,[r[y]].length,$));let x=j("result",t[0].dataType,r.length,$),P=`{\n        let batch: u32 = ${i?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];\n        let r = ${i?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];\n        let c = ${i?"global_id.y":"workgroup_id.y"} * ${w};\n        let d1: u32 = ${i?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${a}>, ${w}>;\n        for (var i = 0; i < ${w}; i++) {\n          dotProd[i] = vec4<${a}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {\n          var dyR = (${a}(dyCorner.x) + ${a}(wR)) / ${a}(uniforms.strides.x);\n          let wRPerm = uniforms.filter_dims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${a}(uniforms.Dy_shape[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {\n            let dyC = (${a}(dyCorner.y) + ${a}(wC)) / ${a}(uniforms.strides.y);\n            let dyC2 = (${a}(dyCorner.y) + 1.0 + ${a}(wC)) / ${a}(uniforms.strides.y);\n            let wCPerm = uniforms.filter_dims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${a}(uniforms.Dy_shape[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${a}(uniforms.Dy_shape[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${E.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${a}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${E.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${a}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = uniforms.Dy_shape[${y}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${E.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${a}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${S.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${E.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${a}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${w}; i = i + 1) {\n          let value = dotProd[i] + ${o?"bias[c+i]":`vec4<${a}>(0.0)`};\n          ${x.set("batch","r","c + i","d1","value")};\n        }\n      }`,T=`\n          let outputIndices = ${x.offsetToIndices("global_idx")};\n          let batch = ${x.indicesGet("outputIndices",0)};\n          let d1 = ${x.indicesGet("outputIndices",y)};\n          let r = ${x.indicesGet("outputIndices",h)};\n          let c = ${x.indicesGet("outputIndices",l)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / uniforms.output_channels_per_group;\n          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${a}(0.0);\n          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n            if (wR % uniforms.dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${a}(dyRCorner) + ${a}(wR)) / ${a}(uniforms.strides[0]);\n            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n            if (dyR < 0.0 || dyR >= ${a}(uniforms.Dy_shape[${h}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n              if (wC % uniforms.dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${a}(dyCCorner) + ${a}(wC)) / ${a}(uniforms.strides.y);\n              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n              if (dyC < 0.0 || dyC >= ${a}(uniforms.Dy_shape[${l}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * uniforms.input_channels_per_group;\n              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {\n                let xValue = ${p?E.get("batch","idyR","idyC","inputChannel"):E.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${S.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${o?"bias[d1]":`${a}(0.0)`};\n          ${x.setByOffset("global_idx","value")};\n        `;return`\n  ${e.registerUniforms(c).declareVariables(...A,x)}\n  ${_}\n\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};\n  ${u?P:T}}`},No=(e,t,r)=>{let o=e.length>2,i=t.outputShape,u=M.size(i),a=[Math.ceil(u/64),1,1];Ve("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${a}`);let c=t.format==="NHWC",p=["rank","rank"],h=[t.strides[0],t.strides[1]],l=[t.kernelShape[c?1:2],t.kernelShape[c?2:3]],y=[t.dilations[0],t.dilations[1]],w=[l[0]+(t.dilations[0]<=1?0:(t.kernelShape[c?1:2]-1)*(t.dilations[0]-1)),l[1]+(t.dilations[1]<=1?0:(t.kernelShape[c?2:3]-1)*(t.dilations[1]-1))],_=[w[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),w[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],$=!1,S=t.group,E=e[1].dims,A=E[0]/S,x=E[1],P=[{type:12,data:u},{type:12,data:h},{type:12,data:l},{type:12,data:y},{type:12,data:w},{type:6,data:_},{type:12,data:A},{type:12,data:x},...Z(e[0].dims,e[1].dims)];o&&(P.push(...Z(e[2].dims)),p.push("rank")),P.push(...Z(i));let T=a[1]===1&&a[2]===1,k=W=>{let N=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:h.length},{name:"filter_dims",type:"u32",length:l.length},{name:"dilations",type:"u32",length:l.length},{name:"effective_filter_dims",type:"u32",length:w.length},{name:"pads",type:"i32",length:_.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],G=De(e[0].dataType);return`${Sc(W,e,i,o,T,$,G,N,c)}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:p},getRunData:()=>({dispatchGroup:{x:a[0],y:a[1],z:a[2]},outputs:[{dims:r?r(i):i,dataType:e[0].dataType}],programUniforms:P}),getShaderSource:k}}});var xc,Cc,Ac,au,su,Ic,Tc,Ec,Pc,uu,lu=K(()=>{"use strict";ou();iu();Lt();yr();xc=(e,t,r,o,i,u)=>(e-1)*t+r+(o-1)*i+1-u,Cc=(e,t,r,o,i)=>{let u=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=u,r[i]=e-u):t==="SAME_LOWER"&&(r[o]=e-u,r[i]=u)},Ac=(e,t,r,o,i,u,a,c,p,h)=>{let l=e.length-2,y=h.length===0;if(p.length===0)for(let $=0;$<l;++$)p.push(0);let w=e[0],_=t[c?3:1]*i;for(let $=0,S=e.length-l-(c?1:0);$<l;++$,++S){let E=e[S],A=y?E*a[$]:h[$],x=xc(E,a[$],u[$],t[S],r[$],A);Cc(x,o,u,$,$+l),y&&h.push(a[$]*(E-1)+p[$]+(t[S]-1)*r[$]+1-u[$]-u[$+l])}h.splice(0,0,w),h.splice(c?3:1,0,_)},au=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((y,w)=>y*w,1)===0){r.length=0;for(let y=2;y<t[1].dims.length;++y)r.push(t[1].dims[y])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let i=e.pads.slice(),u=e.outputShape.slice(),a=e.outputPadding.slice(),c=t[0].dims,p=e.dilations.slice();if(p.reduce((y,w)=>y+w,0)===0){let y=t[0].dims.length-2;p=new Array(y).fill(1)}let h=e.strides.slice();if(h.reduce((y,w)=>y+w,0)===0){let y=t[0].dims.length-2;h=new Array(y).fill(1)}Ac(c,r,p,e.autoPad,e.group,i,h,o,a,u);let l=Object.assign({},e);return Object.assign(l,{kernelShape:r,pads:i,outputPadding:a,outputShape:u,dilations:p,strides:h}),l},su=e=>{let t=zn(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],i=e.dilations,u=e.group,a=e.kernelShape,c=e.pads,p=e.strides,h=e.wIsConst(),l=e.outputPadding,y=e.outputShape;return{autoPad:o,format:r,dilations:i,group:u,kernelShape:a,outputPadding:l,outputShape:y,pads:c,strides:p,wIsConst:h,...t,cacheKey:`${e.format};${t.activation};`}},Ic=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let i=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==i))throw new Error("invalid bias");let u=e[0].dims.length-2;if(t.dilations.reduce((l,y)=>l+y,0)>0&&t.dilations.length!==u)throw new Error(`dilations should be ${u}D`);if(t.strides.reduce((l,y)=>l+y,0)>0&&t.strides.length!==u)throw new Error(`strides should be ${u}D`);if(t.pads.reduce((l,y)=>l+y,0)>0&&t.pads.length!==u*2)throw new Error(`pads should be ${u*2}D`);if(t.outputPadding.length!==u&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${u}D`);if(t.kernelShape.reduce((l,y)=>l+y,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Tc=[2,3,1,0],Ec=(e,t,r)=>{let o=au(r,t),i=r.format==="NHWC",u=o.outputShape,a=u[i?3:1],c=t[0].dims[i?3:1];if(o.group!==1||a===1&&c===1){e.compute(No(t,o));return}let p=u[i?1:2],h=u[i?2:3],l=t[1].dims[2],y=t[1].dims[3],w=i?p*h:a,_=i?a:p*h,$=l*y*c,S=!0,E=e.kernelCustomData.wT??e.compute(yt(t[1],Tc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=E);let A=[t[0],E],x=t.length===3;x&&(!i&&t[2].dims.length===1?A.push(t[2].reshape([t[2].dims[0],1,1])):A.push(t[2])),e.compute(nu(A,o,u,w,_,$,x,S),{inputs:A})},Pc=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let i=t.kernelShape;(i.length===0||i[0]===0)&&(i=[e.inputs[1].dims[2]]);let u=t.dilations;(u.length===0||u[0]===0)&&(u=[1]);let a=t.strides;(a.length===0||a[0]===0)&&(a=[1]);let c=t.pads;c.length===0&&(c=[0,0]),c=[0,c[0],0,c[1]],a=[1].concat(a),u=[1].concat(u),i=[1].concat(i);let p=au({...t,pads:c,strides:a,dilations:u,kernelShape:i},o);e.compute(No(o,p,h=>r?[h[0],h[2],h[3]]:[h[0],h[1],h[3]]))},uu=(e,t)=>{Ic(e.inputs,t),e.inputs[0].dims.length===3?Pc(e,t):Ec(e,e.inputs,t)}});var Oc,du,cu,pu=K(()=>{"use strict";fe();Se();Ke();$e();Oc=(e,t,r,o)=>{let i=M.size(t),u=t.length,a=z("input",e,u),c=j("output",e,u),p=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),h=M.normalizeAxis(p,u),l=y=>{let w=` i32(${a.indicesGet("inputIndices","uniforms.axis")}) `,_=se("uniforms.input_shape","uniforms.axis",u),$=o.reverse?w+(o.exclusive?" + 1":""):"0",S=o.reverse?_:w+(o.exclusive?"":" + 1");return`\n                ${y.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(a,c)}\n                ${y.mainStart()}\n                  ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${c.offsetToIndices("global_idx")};\n                  var sum = ${c.type.value}(0);\n                  let first : i32 = ${$};\n                  let last : i32 = ${S};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${a.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${a.getByIndices("inputIndices")};\n                  }\n                  ${c.setByOffset("global_idx","sum")};\n                }`};return{name:"CumSum",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},{type:6,data:h},...Z(t,t)]}),getShaderSource:l}},du=(e,t)=>{let r=e.inputs[0].dims,o=e.inputs[0].dataType,i=e.inputs[1];e.compute(Oc(o,r,i,t),{inputs:[0]})},cu=e=>{let t=e.exclusive===1,r=e.reverse===1;return we({exclusive:t,reverse:r})}});var Go,Hn,mu,kc,Rc,Ho,Lo,fu,Bc,hu,gu,yu=K(()=>{"use strict";fe();Se();Ke();$e();Go="[a-zA-Z]|\\\\.\\\\.\\\\.",Hn="("+Go+")+",mu="^"+Hn+"$",kc="("+Hn+",)*"+Hn,Rc="^"+kc+"$",Ho=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Lo=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,i]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(Rc)))throw new Error("Invalid LHS term");if(o.split(",").forEach((c,p)=>{let h=t[p].dims.slice();if(!c.match(RegExp(mu)))throw new Error("Invalid LHS term");let l=this.processTerm(c,!0,h,p);this.lhs.push(l)}),i==="")i+=[...this.symbolToInfo.entries()].filter(([c,p])=>p.count===1||c==="...").map(([c])=>c).join("");else if(!i.match(RegExp(Hn)))throw new Error("Invalid RHS");i.match(RegExp(Go,"g"))?.forEach(c=>{if(c==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let p=this.symbolToInfo.get(c);if(p===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(p.dimValue)}}),this.rhs=this.processTerm(i,!1,this.outputDims)}addSymbol(t,r,o){let i=this.symbolToInfo.get(t);if(i!==void 0){if(i.dimValue!==r&&i.count!==1)throw new Error("Dimension mismatch");i.count++,i.inputIndices.push(o)}else i={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,i)}processTerm(t,r,o,i=-1){let u=o.length,a=!1,c=[],p=0;if(!t.match(RegExp(mu))&&!r&&t!=="")throw new Error("Invalid LHS term");let h=t.match(RegExp(Go,"g")),l=new Ho(i);return h?.forEach((y,w)=>{if(y==="..."){if(a)throw new Error("Only one ellipsis is allowed per input term");a=!0;let _=u-h.length+1;if(_<0)throw new Error("Ellipsis out of bounds");if(c=o.slice(p,p+_),this.hasEllipsis){if(this.ellipsisDims.length!==c.length||this.ellipsisDims.toString()!==c.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=c;else throw new Error("Ellipsis must be specified in the LHS");for(let $=0;$<c.length;$++){let S=String.fromCharCode("0".charCodeAt(0)+$);l.addSymbol(S,w+$),this.addSymbol(S,o[p++],i)}}else l.addSymbol(y,w+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(y,o[p++],i)}),l}},fu=e=>e+"_max",Bc=(e,t,r,o)=>{let u=e.map(l=>l.length).map((l,y)=>z(`input${y}`,t,l)),a=M.size(o),c=j("output",t,o.length),p=[...r.symbolToInfo.keys()].filter(l=>!r.rhs.symbolToIndices.has(l)),h=l=>{let y=[],w="var prod = 1.0;",_="var sum = 0.0;",$="sum += prod;",S=[],E=[],A=[],x=[],P=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((k,W)=>{if(r.rhs.symbolToIndices.has(W)){let N=r.rhs.symbolToIndices.get(W)?.[0];N!==void 0&&r.lhs.forEach((G,oe)=>{if(k.inputIndices.includes(oe)){let X=G.symbolToIndices.get(W);if(X===void 0)throw new Error("Invalid symbol error");X.forEach(U=>{y.push(`${u[oe].indicesSet(`input${oe}Indices`,U,c.indicesGet("outputIndices",N))}`)})}})}else r.lhs.forEach((N,G)=>{if(k.inputIndices.includes(G)){let oe=N.symbolToIndices.get(W);if(oe===void 0)throw new Error("Invalid symbol error");oe.forEach(X=>{S.push(`${u[G].indicesSet(`input${G}Indices`,X,`${W}`)}`)}),x.push(`prod *= ${u[G].getByIndices(`input${G}Indices`)};`)}}),E.push(`for(var ${W}: u32 = 0; ${W} < uniforms.${fu(W)}; ${W}++) {`),A.push("}")});let T=P?[...y,`let sum = ${u.map((k,W)=>k.getByIndices(`input${W}Indices`)).join(" * ")};`]:[...y,_,...E,...S,w,...x,$,...A];return`\n            ${l.registerUniforms(p.map(k=>({name:`${fu(k)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,c)}\n\n            ${l.mainStart()}\n            ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${c.offsetToIndices("global_idx")};\n            ${u.map((k,W)=>`var input${W}Indices: ${u[W].type.indices};`).join(`\n`)}\n            ${T.join(`\n`)};\n            ${c.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let l=p.filter(w=>r.symbolToInfo.has(w)).map(w=>({type:12,data:r.symbolToInfo.get(w)?.dimValue||0}));l.push({type:12,data:a});let y=e.map((w,_)=>[...Z(w)]).reduce((w,_)=>w.concat(_),l);return y.push(...Z(o)),{outputs:[{dims:o,dataType:t}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:y}},getShaderSource:h}},hu=(e,t)=>{let r=new Lo(e.inputs,t.equation),o=r.outputDims,i=e.inputs.map((u,a)=>u.dims);e.compute(Bc(i,e.inputs[0].dataType,r,o))},gu=e=>{let t=e.equation.replace(/\\s+/g,"");return we({equation:t})}});var Dc,bu,Mc,zc,wu,vu=K(()=>{"use strict";fe();Se();$e();Dc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,i=t.length<r.length?0:t.length-r.length;for(;o<r.length&&i<t.length;++o,++i)if(r[o]!==t[i]&&r[o]!==1&&t[i]!==1)throw new Error("Expand requires shape to be broadcastable to input")},bu=(e,t)=>{let r=e.length-t.length,o=[];for(let i=0;i<r;++i)o.push(e[i]);for(let i=0;i<t.length;++i)o.push(t[i]===1?e[i+r]:t[i]);return o},Mc=(e,t)=>e.length>t.length?bu(e,t):bu(t,e),zc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=Mc(t,r),i=e[0].dataType,u=i===9?4:1,a=Math.ceil(M.size(o)/u),c=h=>{let l=z("input",i,t.length,u),y=j("output",i,o.length,u),w;if(i===9){let _=($,S,E="")=>`\n          let outputIndices${S} = ${y.offsetToIndices(`outputOffset + ${S}u`)};\n          let offset${S} = ${l.broadcastedIndicesToOffset(`outputIndices${S}`,y)};\n          let index${S} = offset${S} / 4u;\n          let component${S} = offset${S} % 4u;\n          ${$}[${S}] = ${E}(${l.getByOffset(`index${S}`)}[component${S}]);\n        `;w=`\n        let outputOffset = global_idx * ${u};\n        var data = vec4<u32>(0);\n        ${_("data",0,"u32")}\n        ${_("data",1,"u32")}\n        ${_("data",2,"u32")}\n        ${_("data",3,"u32")}\n        ${y.setByOffset("global_idx","data")}\n      }`}else w=`\n        let outputIndices = ${y.offsetToIndices("global_idx")};\n        let inputOffset = ${l.broadcastedIndicesToOffset("outputIndices",y)};\n        ${y.setByOffset("global_idx",l.getByOffset("inputOffset"))}\n      }`;return`\n    ${h.registerUniform("vec_size","u32").declareVariables(l,y)}\n    ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${w}`},p=[{type:12,data:a},...Z(t,o)];return{name:"Expand",shaderCache:{hint:`${o.length}`,inputDependencies:["rank"]},getShaderSource:c,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p})}},wu=e=>{Dc(e.inputs),e.compute(zc(e.inputs),{inputs:[0]})}});var Uc,$u,_u=K(()=>{"use strict";fe();Se();$e();Mn();Uc=e=>{let t=e[0].dataType,r=M.size(e[0].dims),o=M.size(e[1].dims),i=o%4===0,u=a=>{let c=z("x",t,[1],4),p=z("bias",t,[1],4),h=j("y",t,[1],4),l=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],y=_=>`\n      let bias${_}_offset: u32 = (global_idx * 4 + ${_}) % uniforms.bias_size;\n      let bias${_} = ${p.getByOffset(`bias${_}_offset / 4`)}[bias${_}_offset % 4];`,w=i?`\n      let bias = ${p.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${y(0)}${y(1)}${y(2)}${y(3)}\n      let bias = ${c.type.value}(bias0, bias1, bias2, bias3);`;return`${a.registerUniforms(l).declareVariables(c,p,h)}\n\n    ${Oo(ut(t))}\n\n    ${a.mainStart(tr)}\n      ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}\n\n      let x = ${c.getByOffset("global_idx")};\n      ${w}\n      let x_in = x + bias;\n      ${h.setByOffset("global_idx",ko("x_in"))}\n    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${i}`,inputDependencies:["type","type"]},getShaderSource:u,getRunData:a=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:o}],dispatchGroup:{x:Math.ceil(r/tr/4)}})}},$u=e=>{e.inputs.length<2||M.size(e.inputs[1].dims)===0?Ps(e):e.compute(Uc(e.inputs))}});var Vc,Wc,Su,xu,Cu=K(()=>{"use strict";fe();Se();Ke();$e();Vc=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Wc=(e,t)=>{let r=e[0].dims,o=e[1].dims,i=r.length,u=M.normalizeAxis(t.axis,i),a=r.slice(0);a.splice(u,1,...o);let c=r[u],p=e[0].dataType===9?4:1,h=Math.ceil(M.size(a)/p),l=[{type:12,data:h},{type:6,data:c},{type:12,data:u},...Z(e[0].dims,e[1].dims,a)],y=w=>{let _=z("data",e[0].dataType,e[0].dims.length,p),$=z("inputIndices",e[1].dataType,e[1].dims.length),S=j("output",e[0].dataType,a.length,p),E=x=>{let P=o.length,T=`var indicesIndices${x}  = ${$.type.indices}(0);`;for(let k=0;k<P;k++)T+=`${P>1?`indicesIndices${x}[${k}]`:`indicesIndices${x}`} = ${a.length>1?`outputIndices${x}[uniforms.axis + ${k}]`:`outputIndices${x}`};`;T+=`\n          var idx${x} = ${$.getByIndices(`indicesIndices${x}`)};\n          if (idx${x} < 0) {\n            idx${x} = idx${x} + uniforms.axisDimLimit;\n          }\n          var dataIndices${x} : ${_.type.indices};\n        `;for(let k=0,W=0;k<i;k++)k===u?(T+=`${i>1?`dataIndices${x}[${k}]`:`dataIndices${x}`} = u32(idx${x});`,W+=P):(T+=`${i>1?`dataIndices${x}[${k}]`:`dataIndices${x}`} = ${a.length>1?`outputIndices${x}[${W}]`:`outputIndices${x}`};`,W++);return T},A;if(e[0].dataType===9){let x=(P,T,k="")=>`\n          let outputIndices${T} = ${S.offsetToIndices(`outputOffset + ${T}u`)};\n          ${E(T)};\n          let offset${T} = ${_.indicesToOffset(`dataIndices${T}`)};\n          let index${T} = offset${T} / 4u;\n          let component${T} = offset${T} % 4u;\n          ${P}[${T}] = ${k}(${_.getByOffset(`index${T}`)}[component${T}]);\n        `;A=`\n        let outputOffset = global_idx * ${p};\n        var value = vec4<u32>(0);\n        ${x("value",0,"u32")}\n        ${x("value",1,"u32")}\n        ${x("value",2,"u32")}\n        ${x("value",3,"u32")}\n        ${S.setByOffset("global_idx","value")}\n      `}else A=`\n      let outputIndices = ${S.offsetToIndices("global_idx")};\n      ${E("")};\n      let value = ${_.getByIndices("dataIndices")};\n      ${S.setByOffset("global_idx","value")};\n      `;return`\n      ${w.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(_,$,S)}\n      ${w.mainStart()}\n        ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${A}\n      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:l}),getShaderSource:y}},Su=e=>we({axis:e.axis}),xu=(e,t)=>{let r=e.inputs;Vc(r),e.compute(Wc(e.inputs,t))}});var Nc,Gc,Au,Iu,Tu=K(()=>{"use strict";fe();Se();Ke();$e();Nc=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},Gc=(e,t)=>{let r=e[0].dims,o=e[0].dataType,i=r.length,u=e[1].dims,a=e[1].dataType,c=M.normalizeAxis(t.axis,i),p=r[c],h=u.slice(0),l=M.size(h),y=z("input",o,i),w=z("indicesInput",a,u.length),_=j("output",o,h.length),$=[{type:12,data:l},{type:6,data:p},{type:12,data:c}];return $.push(...Z(r,u,h)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:h,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:$}),getShaderSource:A=>`\n      ${A.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(y,w,_)}\n      ${A.mainStart()}\n      ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${_.offsetToIndices("global_idx")};\n\n      var idx = ${w.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${y.type.indices}(outputIndices);\n      ${y.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${y.getByIndices("inputIndices")};\n\n      ${_.setByOffset("global_idx","value")};\n  }`}},Au=e=>we({axis:e.axis}),Iu=(e,t)=>{let r=e.inputs;Nc(r),e.compute(Gc(e.inputs,t))}});var Hc,Lc,Eu,Pu,Ou=K(()=>{"use strict";fe();Se();$e();Hc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Lc=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[i,u,a]=In.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),c=[i,u];if(!c)throw new Error("Can\'t use gemm on the given tensors");let p=M.size(c),h=[{type:12,data:p},{type:12,data:i},{type:12,data:u},{type:12,data:a},{type:1,data:t.alpha},{type:1,data:t.beta}],l=["type","type"];e.length===3&&(h.push(...Z(e[2].dims)),l.push("rank")),h.push(...Z(c));let y=w=>{let _="";t.transA&&t.transB?_="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?_="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?_="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(_="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let $=t.alpha===1?"":"value *= uniforms.alpha;",S=z("a",e[0].dataType,e[0].dims),E=z("b",e[1].dataType,e[1].dims),A=S.type.value,x=null,P=[S,E];e.length===3&&(x=z("c",e[2].dataType,e[2].dims.length),P.push(x));let T=j("output",e[0].dataType,c.length);P.push(T);let k=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`\n  ${w.registerUniforms(k).declareVariables(...P)}\n\n  ${w.mainStart()}\n    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${A}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${_}\n    }\n\n    ${$}\n    ${(()=>x!=null?`let cOffset = ${x.broadcastedIndicesToOffset("vec2(m, n)",T)}; value += ${A}(uniforms.beta) * ${x.getByOffset("cOffset")};`:"")()}\n    output[global_idx] = value;\n  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h}),getShaderSource:y}},Eu=e=>{let t=e.transA,r=e.transB,o=e.alpha,i=e.beta;return{transA:t,transB:r,alpha:o,beta:i,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},Pu=(e,t)=>{Hc(e.inputs),e.compute(Lc(e.inputs,t))}});var Fc,qc,jc,ku,Ru=K(()=>{"use strict";fe();Se();$e();Fc=(e,t)=>{let r=e[0].dims,o=r,i=2,u=M.sizeToDimension(r,i),a=M.sizeFromDimension(r,i),c=We(a),p=a/c,h=[r[0],r[1],p],l=["rank","type","type"],y=[{type:12,data:a},{type:12,data:p}];y.push(...Z(h,h));let w=_=>{let $=z("x",e[0].dataType,h.length,c),S=z("scale",e[1].dataType,e[1].dims),E=z("bias",e[2].dataType,e[2].dims),A=j("output",e[0].dataType,h.length,c),x=[$,S,E,A],P=$.type.value,T=c===1?"f32":`vec${c}<f32>`,k=64,W=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${T}, ${k}>;\n  const workgroupSize = ${k}u;\n  ${_.registerUniforms(W).declareVariables(...x)}\n  ${_.mainStart(k)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${T}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${T}(${$.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${lt("workgroupShared[0]",c)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${T}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${T}(${$.get("batch","channel","h")}) - ${T}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${lt("workgroupShared[0]",c)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${S.getByOffset("channel")});\n    let channelShift = f32(${E.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${$.get("batch","channel","h")} * ${P}(${T}(channelScale)) + ${P}(${T}(channelShift));\n      ${A.set("batch","channel","h","value")};\n    }\n  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${c}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:u},programUniforms:y}),getShaderSource:w}},qc=(e,t,r,o,i,u,a,c)=>{let p=We(a),h=64,l=p===1?"vec2f":`mat2x${p}f`,y=p===1?"f32":`vec${p}f`,w=(W,N)=>`${l}(${W}, ${N})`,_=i*a/p,$=Math.ceil(u/h),S=["type"],E=[{type:12,data:$},{type:12,data:u},{type:12,data:Math.floor(a/p)},{type:12,data:Math.floor(u*a/p)}],A=W=>{let N=z("input",t.dataType,t.dims,p);return`\n  ${W.declareVariables(N)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${l}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${W.mainStart(h)}\n    let currentImageNumber = global_idx / ${h} / uniforms.C;\n    let currentChannelNumber = (global_idx / ${h}) % uniforms.C;\n    let wgOffset = local_id.x * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${Je("f32",p)};\n    var squaredSum = ${Je("f32",p)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${y}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${w("sum","squaredSum")};\n  }`},x=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${p}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:[i,a,h,2],dataType:1}],dispatchGroup:{x:i*a/p},programUniforms:E}),getShaderSource:A},{inputs:[t],outputs:[-1]})[0],P=[{type:12,data:_},{type:12,data:u},{type:12,data:Math.floor(a/p)},{type:12,data:Math.floor(h*a/p)}],T=["type","type","type"],k=W=>{let N=z("scale",r.dataType,r.dims,p),G=z("bias",o.dataType,o.dims,p);return`\n  @group(0) @binding(0) var<storage, read> input : array<${l}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${N.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${G.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${l}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${W.mainStart()}\n    ${W.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${Je("f32",p)};\n    var squaredSum = ${Je("f32",p)};\n    for (var i: u32 = 0; i < min(${h}, uniforms.H); i++) {\n        let value = input[offset + i + currentChannelNumber * ${h}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${c}));\n    let channelScale = invStdDev * ${y}(scale[currentChannelNumber]);\n    let channelShift = ${y}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${w("channelScale","channelShift")};\n  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${p};${c}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:[i,a,2],dataType:1}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:P}),getShaderSource:k},{inputs:[x,r,o],outputs:[-1]})[0]},jc=(e,t,r)=>{let o=t[0].dims,i=o,u=o[0],a=o[o.length-1],c=M.sizeFromDimension(o,1)/a,p=We(a),h=M.size(i)/p,l=[{type:12,data:c},{type:12,data:Math.floor(a/p)}],y=["type","type"],w=qc(e,t[0],t[1],t[2],u,c,a,r.epsilon),_=$=>{let S=De(t[0].dataType),E=p===1?"vec2f":`mat2x${p}f`,A=p===1?S:`vec${p}<${S}>`,x=z("input",t[0].dataType,t[0].dims,p),P=j("output",t[0].dataType,i,p);return`\n  @group(0) @binding(0) var<storage, read> input : array<${x.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${E}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${P.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${$.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${A}(scale[0]), ${A}(scale[1]));\n  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${p}`,inputDependencies:y},getRunData:()=>({outputs:[{dims:i,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:l}),getShaderSource:_},{inputs:[t[0],w]})},ku=(e,t)=>{t.format==="NHWC"?jc(e,e.inputs,t):e.compute(Fc(e.inputs,t))}});var Kc,Yc,Bu,Du=K(()=>{"use strict";fe();Se();$e();Kc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Yc=(e,t,r)=>{let o=e[0].dims,i=e[1],u=e[2],a=o,c=M.normalizeAxis(t.axis,o.length),p=M.sizeToDimension(o,c),h=M.sizeFromDimension(o,c),l=M.size(i.dims),y=u?M.size(u.dims):0;if(l!==h||u&&y!==h)throw new Error(`Size of X.shape()[axis:] == ${h}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${l} and bias size of ${y}`);let w=[];for(let T=0;T<o.length;++T)T<c?w.push(o[T]):w.push(1);let _=We(h),$=["type","type"],S=[{type:12,data:p},{type:1,data:h},{type:12,data:Math.floor(h/_)},{type:1,data:t.epsilon}];u&&$.push("type");let E=r>1,A=r>2,x=T=>{let k=De(e[0].dataType),W=[z("x",e[0].dataType,e[0].dims,_),z("scale",i.dataType,i.dims,_)];u&&W.push(z("bias",u.dataType,u.dims,_)),W.push(j("output",e[0].dataType,a,_)),E&&W.push(j("mean_data_output",1,w)),A&&W.push(j("inv_std_output",1,w));let N=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`\n  ${T.registerUniforms(N).declareVariables(...W)}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var mean_vector = ${Je("f32",_)};\n    var mean_square_vector = ${Je("f32",_)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${vt(k,_,"x[h + offset]")};\n      mean_vector += value;\n      mean_square_vector += value * value;\n    }\n    let mean = ${lt("mean_vector",_)} / uniforms.norm_size;\n    let inv_std_dev = inverseSqrt(${lt("mean_square_vector",_)} / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${vt(k,_,"x[j + offset]")};\n      let f32scale = ${vt(k,_,"scale[j]")};\n      output[j + offset] = ${W[0].type.value}((f32input - mean) * inv_std_dev * f32scale\n        ${u?`+ ${vt(k,_,"bias[j]")}`:""}\n      );\n    }\n\n    ${E?"mean_data_output[global_idx] = mean":""};\n    ${A?"inv_std_output[global_idx] = inv_std_dev":""};\n  }`},P=[{dims:a,dataType:e[0].dataType}];return E&&P.push({dims:w,dataType:1}),A&&P.push({dims:w,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${_};${r}`,inputDependencies:$},getRunData:()=>({outputs:P,dispatchGroup:{x:Math.ceil(p/64)},programUniforms:S}),getShaderSource:x}},Bu=(e,t)=>{Kc(e.inputs),e.compute(Yc(e.inputs,t,e.outputCount))}});var Zc,Xc,Mu,zu,Uu=K(()=>{"use strict";fe();Se();Ke();$e();Zc=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],o=r.dims.length;if(r.dims[o-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let i=Math.floor((t.k+t.blockSize-1)/t.blockSize),u=t.blockSize/8*t.bits,a=e[1];if(!M.areEqual(a.dims,[t.n,i,u]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let p=e[2].dims;if(M.size(p)!==t.n*i)throw new Error("scales input size error.");if(e.length===4){let l=e[3].dims,y=t.bits>4?t.n*i:t.n*Math.floor((i+1)/2);if(M.size(l)!==y)throw new Error("zeroPoints input size error.")}},Xc=(e,t)=>{let r=e[0].dims,o=r.length,i=r.slice(0,o-1).concat(t.n),u=r[o-2],c=t.blockSize/8*t.bits/4,p=We(u),h=We(t.n),l=We(t.k),y=We(c),w=M.size(i)/h/p,_=[{type:12,data:w},{type:12,data:t.k},{type:12,data:t.n},{type:12,data:t.accuracyLevel},{type:12,data:t.bits},{type:12,data:t.blockSize}],$=r.slice();$.splice(-1,1,t.k/l);let S=M.convertShape(e[1].dims).slice();S.splice(-1,1,c/y),_.push(...Z($)),_.push(...Z(S)),_.push(...Z(e[2].dims)),e.length===4&&_.push(...Z(M.convertShape(e[3].dims)));let E=i.slice();E.splice(-1,1,t.n/h),_.push(...Z(E));let A=x=>{let P=z("a",e[0].dataType,$.length,l),T=z("b",12,S.length,y),k=z("scales",e[2].dataType,e[2].dims.length),W=[P,T,k],N=e.length===4?z("zero_points",12,e[3].dims.length):void 0;N&&W.push(N);let G=j("output",e[0].dataType,i.length,h),oe=[{name:"output_size",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"accuracy_level",type:"u32"},{name:"bits",type:"u32"},{name:"block_size",type:"u32"}],X=Math.floor((t.k+t.blockSize-1)/t.blockSize),U=De(e[0].dataType),re=(()=>{switch(l){case 1:return`array<${U}, 8>`;case 2:return`mat4x2<${U}>`;case 4:return`mat2x4<${U}>`;default:throw new Error(`${l}-component is not supported.`)}})(),Be=`\n        fn dequantize(quantized: ${re}, zero_point: ${U}, scale: ${U}) -> ${re} {\n          ${(()=>l===1?`var dequantized = ${re}(${Array.from({length:8},(te,Me)=>`(quantized[${Me}] - zero_point) * scale`).join(", ")});\n              return dequantized;`:`var zero_points: ${re} = ${re}(${Array(8).fill("zero_point").join(",")});\n              return (quantized - zero_points) * scale;`)()}\n        }`,Ee=`\n        fn ortUnpack8x4snorm(value: u32) -> ${re} {\n          var quantized: ${re};\n          var offset: u32 = 0;\n          let count: u32 = 4;\n          for (var i: u32 = 0; i < 8u; i++) {\n            var result = ${U}(extractBits(value, offset, count));\n            ${(()=>{switch(l){case 1:return"quantized[i] = result;";case 2:return"quantized[i / 2][i % 2] = result;";case 4:return"quantized[i / 4][i % 4] = result;";default:throw new Error(`${l}-component is not supported.`)}})()}\n            offset += count;\n          }\n          return quantized;\n        }`,Ae=N?`\n          zero_point_offset += 4;\n          if (zero_point_offset == 32) {\n            zero_point_offset = 0;\n            zero_point_index++;\n            zero_point_word = ${N.getByOffset("zero_point_index")};\n          }`:"";return`\n        ${Be};\n        ${Ee};\n        ${x.registerUniforms(oe).declareVariables(...W,G)}\n        ${x.mainStart()}\n          ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var output_values: array<${G.type.value}, ${p}>;\n          var output_indices = ${G.offsetToIndices("global_idx")};\n          var n = ${G.indicesGet("output_indices",o-1)};\n          var m = ${G.indicesGet("output_indices",o-2)};\n          var a_indices: ${P.type.indices} = output_indices;\n          // Two zero points are packed into one byte because uniforms.bits <= 4.\n          // zero_point_offset is either 0 or 4. It is bit offset within one byte.\n          // TODO support zero_point_offset for bits > 4\n          ${N?`\n          var zero_point_index: u32 = n * ${h} * ((${X} + 1) / 2) / 4;\n          var zero_point_word: u32 = ${N.getByOffset("zero_point_index")};\n          var zero_point_offset: u32 = 0;`:""}\n          var scale_index = n * ${X*h};\n          var b_indices: ${T.type.indices};\n          for (var c: u32 = 0; c < ${h}; c++) {\n            ${T.indicesSet("b_indices","0",`n * ${h} + c`)};\n            var block_offset: u32 = 0;\n            for (var block: u32 = 0; block < ${X}; block++) {\n              // The scale and zero points are computed per block.\n              let scale = ${k.getByOffset("scale_index")};\n              // The default zero point is 8 for unsigned 4-bit quantization.\n              let zero_point = ${U}(${N?"extractBits(zero_point_word, zero_point_offset, 4)":8});\n              ${T.indicesSet("b_indices","1","block")};\n              var word_offset: u32 = block_offset;\n              for (var word: u32 = 0; word < ${c}; word += ${y}) {\n                ${T.indicesSet("b_indices","2","word")};\n                let b_data = ${T.getByIndices("b_indices")};\n                for (var i: u32 = 0; i < ${y}; i++) {\n                  let b_value = ${y===1?"b_data":"b_data[word + i]"};\n                  let b_quantized_values: ${re} = ortUnpack8x4snorm(b_value);\n                  let b_dequantized_values = dequantize(b_quantized_values, zero_point, scale);\n                  // Number of B elements per 32-bit word is 32/bits = 32/4 = 8\n                  var offset: u32 = word_offset;\n                  for (var j: u32 = 0; j < 8/${l}; j++) {\n                    ${P.indicesSet("a_indices",o-1,`offset/${l}`)};\n                    for (var k: u32 = 0; k < ${p}u; k++) {\n                      ${P.indicesSet("a_indices",o-2,`m * ${p} + k`)};\n                      let a_data = ${P.getByIndices("a_indices")};\n                      output_values[k]${h>1?"[c]":""} += ${l===1?"a_data * b_dequantized_values[j]":"dot(a_data, b_dequantized_values[j])"};\n                    }\n                    offset += ${l};\n                  }\n                  word_offset += 8;\n                }\n              }\n              scale_index++;\n              ${Ae}\n              block_offset += uniforms.block_size;\n            }\n            // Drop the trailing 4 bits if the zero_poit_offset is not a byte boundary to align with the next byte.\n            ${N?`if (zero_point_offset % 8 > 0) {\n                ${Ae}\n              }`:""}\n            }\n            for (var k: u32 = 0u; k < ${p}u; k++) {\n              ${G.indicesSet("output_indices",o-2,`${p+" * m + k"}`)};\n              ${G.setByIndices("output_indices","output_values[k]")}\n            }\n        }`};return{name:"MatMulNBits",shaderCache:{hint:`${t.cacheKey};${e.length}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:_}),getShaderSource:A}},Mu=(e,t)=>{Zc(e.inputs,t),e.compute(Xc(e.inputs,t))},zu=e=>we(e)});var Jc,Wu,Vu,Qc,Fo,Nu,Gu=K(()=>{"use strict";fe();Se();Ke();Cn();Po();$e();yr();Jc=(e,t)=>{let r=e[0],o=e[1],i=e[2],u=e[3],a=e[4],c=e[5],p=e[6],h=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let l=!1,y=r.dims[0],w=r.dims[1],_=r.dims.length===3?l?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],$=w,S=0,E=0,A=Math.floor(_/t.numHeads);if(p&&h){if(p.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(h.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');S=p.dims[2],E=p.dims[2]}else if(p||h)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let x;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');x=2,$=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==A)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(i)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');x=5,$=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==A)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');x=0,$=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');x=3}if(u){if(u.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(i&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let P=0;if(a){P=8;let G=a.dims;throw G.length===1?G[0]===y?P=1:G[0]===3*y+2&&(P=3):G.length===2&&G[0]===y&&G[1]===$&&(P=5),P===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let T=!1,k=_;if(i){if(i.dims.length!==3&&i.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==i.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(i.dims.length===3){if($!==i.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');k=i.dims[2]}else{if($!==i.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');k=i.dims[1]*i.dims[3],T=!0}}let W=S+$,N=!1;if(a)throw new Error("Key padding mask is not supported");if(c)throw new Error("extraAddQk is not supported");if(p)throw new Error("pastKey is not supported");if(h)throw new Error("pastValue is not supported");return{batchSize:y,sequenceLength:w,pastSequenceLength:S,kvSequenceLength:$,totalSequenceLength:W,maxSequenceLength:E,inputHiddenSize:0,hiddenSize:_,vHiddenSize:k,headSize:A,vHeadSize:Math.floor(k/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:P,scale:t.scale,broadcastResPosBias:N,passPastInKv:T,qkvFormat:x}},Wu=e=>we({...e}),Vu=we({perm:[0,2,1,3]}),Qc=(e,t,r,o,i,u,a)=>{let c=[o,i,u],p=M.size(c),h=[{type:12,data:p},{type:12,data:a},{type:12,data:u}],l=y=>{let w=j("qkv_with_bias",t.dataType,c),_=z("qkv",t.dataType,c),$=z("bias",r.dataType,c),S=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`\n  ${y.registerUniforms(S).declareVariables(_,$,w)}\n  ${y.mainStart()}\n    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:c,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h}),getShaderSource:l},{inputs:[t,r],outputs:[-1]})[0]},Fo=(e,t,r,o,i,u,a,c)=>{let p=u;if(a){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return p=Qc(e,u,a,t,o,r*i,c),p=p.reshape([t,o,r,i]),e.compute(yt(p,Vu.perm),{inputs:[p],outputs:[-1]})[0]}else return u.dims.length===3&&(p=u.reshape([t,o,r,i])),e.compute(yt(p,Vu.perm),{inputs:[p],outputs:[-1]})[0]},Nu=(e,t)=>{let r=Jc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,i=Fo(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return Rn(e,i,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let u=Fo(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),a=Fo(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Rn(e,i,u,a,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var ep,tp,rp,np,op,ip,ap,sp,Hu,Lu=K(()=>{"use strict";fe();Se();$e();ep=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},tp=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n            k = i32(${e.indicesGet("indices",i)}) - ${se("uniforms.pads",i,r)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${se("uniforms.x_shape",i,t)})) {\n              break;\n            }\n            offset += k * i32(${se("uniforms.x_strides",i,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${o}\n            value = x[offset];\n          }\n      `},rp=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n                k = i32(${e.indicesGet("indices",i)}) - ${se("uniforms.pads",i,r)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${se("uniforms.x_shape",i,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${se("uniforms.x_shape",i,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${se("uniforms.x_strides",i,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},np=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n                k = i32(${e.indicesGet("indices",i)}) - ${se("uniforms.pads",i,r)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${se("uniforms.x_shape",i,t)})) {\n                  k = i32(${se("uniforms.x_shape",i,t)}) - 1;\n                }\n                offset += k * i32(${se("uniforms.x_strides",i,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},op=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n                k = i32(${e.indicesGet("indices",i)}) - ${se("uniforms.pads",i,r)};\n                if (k < 0)  {\n                  k += i32(${se("uniforms.x_shape",i,t)}]);\n                }\n                if (k >= i32(${se("uniforms.x_shape",i,t)})) {\n                  k -= i32(${se("uniforms.x_shape",i,t)});\n                }\n                offset += k * i32(${se("uniforms.x_strides",i,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},ip=(e,t,r)=>{switch(r.mode){case 0:return tp(e,t,r.pads.length);case 1:return rp(e,t,r.pads.length);case 2:return np(e,t,r.pads.length);case 3:return op(e,t,r.pads.length);default:throw new Error("Invalid mode")}},ap=(e,t)=>{let r=M.padShape(e[0].dims.slice(),t.pads),o=e[0].dims,i=M.size(r),u=[{type:12,data:i},{type:6,data:t.pads}];t.mode===0&&u.push({type:e[0].dataType,data:t.value}),u.push(...Z(e[0].dims,r));let a=["rank"],c=p=>{let h=j("output",e[0].dataType,r.length),l=z("x",e[0].dataType,o.length),y=l.type.value,w=ip(h,o.length,t),_=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&_.push({name:"constant_value",type:y}),`\n            ${p.registerUniforms(_).declareVariables(l,h)}\n            ${p.mainStart()}\n            ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${h.offsetToIndices("global_idx")};\n\n            var value = ${y}(0);\n            ${w}\n            output[global_idx] = value;\n        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:a},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(M.size(r)/64)},programUniforms:u}),getShaderSource:c}},sp=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,i=e[0].dims.length,u=new Int32Array(2*i).fill(0);if(e.length>=4){let c=e[3].getBigInt64Array();for(let p=0;p<c.length;p++)u[Number(c[p])]=Number(r[p]),u[Number(c[p])+i]=Number(r[p+c.length])}else r.forEach((c,p)=>u[Number(p)]=Number(c));let a=[];return u.forEach(c=>a.push(c)),{mode:t.mode,value:o,pads:a}}else return t},Hu=(e,t)=>{ep(e.inputs);let r=sp(e.inputs,t);e.compute(ap(e.inputs,r),{inputs:[0]})}});var Ln,Fu,qu,ju,Ku,up,lp,Yu,Zu,Xu,Ju,Qu,el,tl,rl,nl,ol,il,al,sl=K(()=>{"use strict";hr();fe();Se();$e();Ln=e=>{if(fr.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},Fu=(e,t,r)=>{let o=t.format==="NHWC",i=e.dims.slice();o&&i.splice(1,0,i.pop());let u=Object.hasOwnProperty.call(t,"dilations"),a=t.kernelShape.slice(),c=t.strides.slice(),p=u?t.dilations.slice():[],h=t.pads.slice();er.adjustPoolAttributes(r,i,a,c,p,h);let l=er.computePoolOutputShape(r,i,c,p,a,h,t.autoPad),y=Object.assign({},t);u?Object.assign(y,{kernelShape:a,strides:c,pads:h,dilations:p,cacheKey:t.cacheKey}):Object.assign(y,{kernelShape:a,strides:c,pads:h,cacheKey:t.cacheKey});let w=l.slice();return w.push(w.splice(1,1)[0]),[y,o?w:l]},qu=(e,t)=>{let r=t.format==="NHWC",o=M.size(e),i=M.size(t.kernelShape),u=[{type:12,data:o},{type:12,data:i}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let c=t.kernelShape[t.kernelShape.length-1],p=t.strides[t.strides.length-1],h=t.pads[t.pads.length/2-1],l=t.pads[t.pads.length-1],y=!!(h+l);u.push({type:12,data:c},{type:12,data:p},{type:12,data:h},{type:12,data:l}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let w=!1;if(t.kernelShape.length===2){let _=t.kernelShape[t.kernelShape.length-2],$=t.strides[t.strides.length-2],S=t.pads[t.pads.length/2-2],E=t.pads[t.pads.length-2];w=!!(S+E),u.push({type:12,data:_},{type:12,data:$},{type:12,data:S},{type:12,data:E}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[u,a,!0,y,w]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let c=M.computeStrides(t.kernelShape);u.push({type:12,data:c},{type:12,data:t.pads},{type:12,data:t.strides}),a.push({name:"kernelStrides",type:"u32",length:c.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let p=t.pads.reduce((h,l)=>h+l);return[u,a,!!p,!1,!1]}},ju=(e,t,r,o,i,u,a,c,p,h,l,y)=>{let w=i.format==="NHWC",_=t.type.value,$=j("output",t.type.tensor,o);if(i.kernelShape.length<=2){let S="",E="",A="",x=r-(w?2:1);if(l?S=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${x}] = indices[${x}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${x}] < 0 || xIndices[${x}]\n                      >= uniforms.x_shape[${x}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${u}\n                }`:S=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${x}] = indices[${x}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${u}\n                }`,i.kernelShape.length===2){let T=r-(w?3:2);y?E=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${T}] < 0 || xIndices[${T}] >= uniforms.x_shape[${T}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:E=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                `,A=`\n              }\n            `}return`\n            ${e.registerUniforms(p).declareVariables(t,$)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${$.offsetToIndices("global_idx")};\n              var xIndices = ${$.offsetToIndices("global_idx")};\n\n              var value = ${_}(${c});\n              var pad = 0;\n              ${E}\n              ${S}\n              ${A}\n              ${a}\n\n              output[global_idx] = value;\n            }`}else{if(w)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let S=i.kernelShape.length,E=i.pads.length,A="";return h?A=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${u}\n              }`:A=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${u}\n            `,`\n            ${e.registerUniforms(p).declareVariables(t,$)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${$.offsetToIndices("global_idx")};\n              var xIndices = ${$.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${S}>;\n\n              var value = ${_}(${c});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${S-1}u; j++) {\n                  offsets[j] = offset / ${se("uniforms.kernelStrides","j",S)};\n                  offset -= offsets[j] * ${se("uniforms.kernelStrides","j",S)};\n                }\n                offsets[${S-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-S}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${se("uniforms.strides",`j - ${r-S}u`,S)}\n                    + offsets[j - ${r-S}u] - ${se("uniforms.pads","j - 2u",E)};\n                  ${A}\n              }\n              ${a}\n\n              output[global_idx] = value;\n            }`}},Ku=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,up=e=>`${Ku(e)};${e.countIncludePad}`,lp=e=>`${Ku(e)};${e.storageOrder};${e.dilations}`,Yu=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Zu=(e,t,r,o)=>{let[i,u]=Fu(t,o,r),a=z("x",t.dataType,t.dims.length),c=a.type.value,p="value += x_val;",h="";i.countIncludePad?h+=`value /= ${c}(uniforms.kernelSize);`:h+=`value /= ${c}(i32(uniforms.kernelSize) - pad);`;let[l,y,w,_,$]=qu(u,i);l.push(...Z(t.dims,u));let S=["rank"];return{name:e,shaderCache:{hint:`${o.cacheKey};${w};${_};${$}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(M.size(u)/64)},programUniforms:l}),getShaderSource:E=>ju(E,a,t.dims.length,u.length,i,p,h,0,y,w,_,$)}},Xu=e=>{let t=e.count_include_pad!==0,r=Yu(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let o={countIncludePad:t,...r,cacheKey:""};return{...o,cacheKey:up(o)}},Ju=(e,t)=>{Ln(e.inputs),e.compute(Zu("AveragePool",e.inputs[0],!1,t))},Qu={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},el=e=>{let t=e.format;return{format:t,...Qu,cacheKey:t}},tl=(e,t)=>{Ln(e.inputs),e.compute(Zu("GlobalAveragePool",e.inputs[0],!0,t))},rl=(e,t,r,o)=>{let[i,u]=Fu(t,o,r),a=`\n      value = max(x_val, value);\n    `,c="",p=z("x",t.dataType,t.dims.length),h=["rank"],[l,y,w,_,$]=qu(u,i);return l.push(...Z(t.dims,u)),{name:e,shaderCache:{hint:`${o.cacheKey};${w};${_};${$}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(M.size(u)/64)},programUniforms:l}),getShaderSource:S=>ju(S,p,t.dims.length,u.length,i,a,c,t.dataType===10?-65504:-1e5,y,w,_,$)}},nl=(e,t)=>{Ln(e.inputs),e.compute(rl("MaxPool",e.inputs[0],!1,t))},ol=e=>{let t=e.storage_order,r=e.dilations,o=Yu(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let i={storageOrder:t,dilations:r,...o,cacheKey:""};return{...i,cacheKey:lp(i)}},il=e=>{let t=e.format;return{format:t,...Qu,cacheKey:t}},al=(e,t)=>{Ln(e.inputs),e.compute(rl("GlobalMaxPool",e.inputs[0],!0,t))}});var cp,pp,ul,ll=K(()=>{"use strict";hr();fe();$e();cp=(e,t,r)=>{let o=e===t,i=e<t&&r<0,u=e>t&&r>0;if(o||i||u)throw new Error("Range these inputs\' contents are invalid.")},pp=(e,t,r,o)=>{let i=Math.abs(Math.ceil((t-e)/r)),u=[i],a=i,c=[{type:12,data:a},{type:o,data:e},{type:o,data:r},...Z(u)],p=h=>{let l=j("output",o,u.length),y=l.type.value,w=[{name:"outputSize",type:"u32"},{name:"start",type:y},{name:"delta",type:y}];return`\n        ${h.registerUniforms(w).declareVariables(l)}\n        ${h.mainStart()}\n        ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${y}(global_idx) * uniforms.delta;\n      }`};return{name:"Range",shaderCache:{hint:`${o}`},getShaderSource:p,getRunData:()=>({outputs:[{dims:u,dataType:o}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:c})}},ul=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),fr.webgpu.validateInputContent&&cp(t,r,o),e.compute(pp(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var mp,fp,hp,gp,yp,bp,wp,vp,$p,_p,Sp,dl,xp,Cp,Ap,Ip,Tp,cl,pl,ml=K(()=>{"use strict";fe();Se();Ke();$e();mp=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},fp=(e,t,r)=>{t.every(i=>i>=0&&i<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((i,u)=>o[i]=e[u]),o},hp=(e,t,r,o,i,u)=>{let[a,c,p]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],h=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(l=>u.push(l));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(c>0&&e.length>c&&e[c].dims.length>0){if(e[c].getFloat32Array().forEach(l=>o.push(l)),o.length!==0&&o.length!==h&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");mp(o,t),t.axes.length>0&&fp(o,t.axes,h).forEach((l,y)=>o[y]=l)}if(p>0&&e.length>p&&(e[p].getBigInt64Array().forEach(l=>i.push(Number(l))),i.length!==h||r>=18&&i.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(i.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof i<"u"&&o.length>0&&i.length>h)throw new Error("Resize requires only of scales or sizes to be specified")},gp=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",yp=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",bp=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),i=e.length===0?o:e.slice();return t.length>0?(t.forEach((u,a)=>{o[u]=i[a],o[a+r]=i[t.length+a]}),o):i},wp=(e,t,r,o)=>{let i=[];if(r.length>0)if(o.length>0){if(e.forEach(u=>i.push(u)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((u,a)=>i[u]=r[a])}else r.forEach(u=>i.push(u));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");i=e.map((u,a)=>Math.round(u*t[a]))}return i},vp=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(u=>t[u]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(u=>t[u]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let i=e.slice();return r.axes.length>0?(r.axes.forEach(u=>t[u]=o),r.axes.forEach(u=>i[u]=Math.round(e[u]*t[u]))):(t.fill(o,0,t.length),i.forEach((u,a)=>i[a]=Math.round(u*t[a]))),i},$p=(e,t,r,o,i)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${se("uniforms.scales","i",o)};\n        var roi_low = ${se("uniforms.roi","i",i)};\n        var roi_hi = ${se("uniforms.roi",`i + ${t.length}`,i)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${se("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${se("uniforms.output_shape","i",r.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,_p=(e,t,r,o,i,u,a)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${o.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${se("uniforms.scales","i",i)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${se("uniforms.roi","i",u)};\n          var roi_hi = ${se("uniforms.roi",`i + ${r.length}`,u)};\n          var input_shape_i = ${se("uniforms.input_shape","i",r.length)};\n          var output_shape_i = ${se("uniforms.output_shape","i",o.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${a} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,Sp=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${se("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,dl=(e,t,r,o)=>e.rank>o?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",r,"batch")};\n`:"",xp=(e,t,r,o,i)=>{let[a,c,p,h]=r.length===2?[-1,0,1,-1]:[0,2,3,1],l=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${l} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",c,`max(0, min(row, ${r[c]} - 1))`)};\n      ${e.indicesSet("input_indices",p,`max(0, min(col, ${r[p]} - 1))`)};\n      ${dl(e,h,a,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${l} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${l} = originalIndices[${c}];\n      var col:${l} = originalIndices[${p}];\n      ${o?`if (row < 0 || row > (${r[c]} - 1) || col < 0 || col > (${r[p]} - 1)) {\n        return ${i};\n      }`:""};\n      row = max(0, min(row, ${r[c]} - 1));\n      col = max(0, min(col, ${r[p]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${r.length>2?`u32(originalIndices[${h}])`:"0"};\n      var batch: u32 =  ${r.length>2?`u32(originalIndices[${a}])`:"0"};\n      var x11: ${l} = getInputValue(batch, channel, row1, col1);\n      var x12: ${l} = getInputValue(batch, channel, row1, col2);\n      var x21: ${l} = getInputValue(batch, channel, row2, col1);\n      var x22: ${l} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${l} = abs(row - ${l}(row1));\n      var dx2: ${l} = abs(${l}(row2) - row);\n      var dy1: ${l} = abs(col - ${l}(col1));\n      var dy2: ${l} = abs(${l}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},Cp=(e,t,r,o,i,u,a,c,p,h)=>{let l=r.length===2,y=!0,[w,_]=l?[0,1]:y?[2,3]:[1,2],$=e.type.value,S=E=>{let A=E===w?"row":"col";return`\n      fn ${A}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${$} {\n        var output_index = ${t.indicesGet("output_indices",E)};\n        var originalIdx: ${$} = getOriginalCoordinateFromResizedCoordinate(output_index, ${i[E]},\n        ${o[E]}, ${r[E]}, ${u[E]}, ${u[E]} + ${r.length});\n        var fractOriginalIdx: ${$} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${c} && (originalIdx < 0 || originalIdx > (${r[E]} - 1))) {\n          return ${p};\n        }\n        var data: array<${$}, 4> = array<${$}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${A}: ${$} = originalIdx + ${$}(i);\n          if (${A} < 0 || ${A} >= ${r[E]}) {\n            ${(()=>h?`coefs[i + 1] = 0.0;\n                        continue;`:c?`return ${p};`:`${A} = max(0, min(${A}, ${r[E]} - 1));`)()};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",E,`u32(${A})`)};\n          data[i + 1] = ${E===w?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${S(w)};\n    ${S(_)};\n  fn getCubicInterpolationCoefs(s: ${$}) -> array<${$}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${$}, 4> = array<${$}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${$} = 1.0 - absS;\n    var twoMinusAbsS: ${$} = 2.0 - absS;\n    var onePlusAbsS: ${$} = 1.0 + absS;\n    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};\n    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${$}, 4>, coefs: array<${$}, 4>) -> ${$} {\n    var coefsSum: ${$} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${$} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},Ap=(e,t,r,o,i)=>{let[a,c,p,h,l]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],y=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${y} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",c,`max(0, min(depth, ${r[c]} - 1))`)};\n      ${e.indicesSet("input_indices",p,`max(0, min(height, ${r[p]} - 1))`)};\n      ${e.indicesSet("input_indices",h,`max(0, min(width, ${r[h]} - 1))`)};\n      ${dl(e,l,a,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${y} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${y} = originalIndices[${c}];\n      var height:${y} = originalIndices[${p}];\n      var width:${y} = originalIndices[${h}];\n      ${o?`if (depth < 0 || depth > (${r[c]} - 1) || height < 0 || height > (${r[p]} - 1) || width < 0 || (width > ${r[h]} - 1)) {\n      return ${i};\n        }`:""};\n\n    depth = max(0, min(depth, ${r[c]} - 1));\n      height = max(0, min(height, ${r[p]} - 1));\n      width = max(0, min(width, ${r[h]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${r.length>3?`u32(originalIndices[${l}])`:"0"};\n      var batch: u32 =  ${r.length>3?`u32(originalIndices[${a}])`:"0"};\n\n      var x111: ${y} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${y} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${y} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${y} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${y} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${y} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${y} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${y} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${y} = abs(depth - ${y}(depth1));\n      var dx2: ${y} = abs(${y}(depth2) - depth);\n      var dy1: ${y} = abs(height - ${y}(height1));\n      var dy2: ${y} = abs(${y}(height2) - height);\n      var dz1: ${y} = abs(width - ${y}(width1));\n      var dz2: ${y} = abs(${y}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},Ip=(e,t,r,o,i,u)=>{let a=e.dims,c=bp(u,t.axes,a.length),p=wp(a,o,i,t.axes),h=o.slice();o.length===0&&(h=a.map((x,P)=>x===0?1:p[P]/x),t.keepAspectRatioPolicy!=="stretch"&&(p=vp(a,h,t)));let l=j("output",e.dataType,p.length),y=z("input",e.dataType,a.length),w=M.size(p),_=a.length===p.length&&a.every((x,P)=>x===p[P]),$=t.coordinateTransformMode==="tf_crop_and_resize",S=t.extrapolationValue,E=y.type.value,A=x=>`\n      ${_?"":`\n      ${gp(t.coordinateTransformMode,E)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${Sp(y,a)};\n              ${yp(t.nearestMode,r,E)};\n              ${_p(y,l,a,p,h.length,c.length,$)};\n              `;case"linear":return`\n              ${$p(l,a,p,h.length,c.length)};\n              ${(()=>{if(a.length===2||a.length===4)return`${xp(y,l,a,$,S)}`;if(a.length===3||a.length===5)return`${Ap(y,l,a,$,S)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(a.length===2||a.length===4)return`${Cp(y,l,a,p,h,c,t.cubicCoeffA,$,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${x.registerUniform("output_size","u32").registerUniform("scales","f32",h.length).registerUniform("roi","f32",c.length).declareVariables(y,l)}\n      ${x.mainStart()}\n        ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${_?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${l.offsetToIndices("global_idx")};\n        var input_indices: ${y.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${y.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${a.length===2||a.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${h.length>0?h:""}|${i.length>0?i:""}|${c.length>0?c:""}|${_}|${a}`,inputDependencies:["rank"]},getShaderSource:A,getRunData:()=>({outputs:[{dims:p,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:[{type:12,data:w},{type:1,data:h},{type:1,data:c},...Z(a,p)]})}},Tp=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},cl=(e,t)=>{let r=[],o=[],i=[],u=Tp(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");hp(e.inputs,t,u,r,o,i),e.compute(Ip(e.inputs[0],t,u,r,o,i),{inputs:[0]})},pl=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,i=e.cubicCoeffA,u=e.excludeOutside!==0,a=e.extrapolationValue,c=e.keepAspectRatioPolicy,p=e.mode,h=e.nearestMode===""?"simple":e.nearestMode;return we({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:i,excludeOutside:u,extrapolationValue:a,keepAspectRatioPolicy:c,mode:p,nearestMode:h})}});var Ep,Pp,fl,hl=K(()=>{"use strict";fe();Se();Ke();$e();Ep=(e,t)=>{let[r,o,i,u]=e,{numHeads:a,rotaryEmbeddingDim:c}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input \'x\' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!M.areEqual(o.dims,[])&&!M.areEqual(o.dims,[1])&&o.dims.length!==2)throw new Error(`Input \'position_ids\' is expected to have 0, 1, or 2 dimensions, got ${o.dims.length}`);if(i.dims.length!==2)throw new Error(`Input \'cos_cache\' is expected to have 2 dimensions, got ${i.dims.length}`);if(u.dims.length!==2)throw new Error(`Input \'sin_cache\' is expected to have 2 dimensions, got ${u.dims.length}`);if(!M.areEqual(i.dims,u.dims))throw new Error("Inputs \'cos_cache\' and \'sin_cache\' are expected to have the same shape");if(c>0&&a===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let p=r.dims[0],h=r.dims[r.dims.length-2],l=i.dims[0],y=M.sizeFromDimension(r.dims,1)/h,w=c===0?i.dims[1]*2:y/a;if(c>w)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(o.dims.length===2){if(p!==o.dims[0])throw new Error(`Input \'position_ids\' dimension 0 should be of size batch_size, got ${o.dims[0]}`);if(h!==o.dims[1])throw new Error(`Input \'position_ids\' dimension 1 should be of size sequence_length, got ${o.dims[1]}`)}if(w/2!==i.dims[1]&&c/2!==i.dims[1])throw new Error(`Input \'cos_cache\' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${i.dims[1]}`);if(h>l)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Pp=(e,t)=>{let{interleaved:r,numHeads:o,rotaryEmbeddingDim:i,scale:u}=t,a=e[0].dims[0],c=M.sizeFromDimension(e[0].dims,1),p=e[0].dims[e[0].dims.length-2],h=c/p,l=e[2].dims[1],y=i===0?l*2:h/o,w=new Array(a,p,h/y,y-l),_=M.computeStrides(w),$=[{type:1,data:u},{type:12,data:w},{type:12,data:_},...e[0].dims.length===3?new Array({type:12,data:[c,h,y,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[c,y,p*y,1]}):[],...Z(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],S=E=>{let A=z("input",e[0].dataType,e[0].dims.length),x=z("position_ids",e[1].dataType,e[1].dims.length),P=z("cos_cache",e[2].dataType,e[2].dims.length),T=z("sin_cache",e[3].dataType,e[3].dims.length),k=j("output",e[0].dataType,e[0].dims.length);return E.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:w.length},{name:"global_strides",type:"u32",length:_.length},{name:"input_output_strides",type:"u32",length:_.length}]),`\n        ${E.declareVariables(A,x,P,T,k)}\n\n        ${E.mainStart(tr)}\n          let half_rotary_emb_dim = uniforms.${P.name}_shape[1];\n          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;\n          let size = uniforms.global_shape[0] * uniforms.global_strides[0];\n          ${E.guardAgainstOutOfBoundsWorkgroupSizes("size")}\n\n          if (bsnh[3] < half_rotary_emb_dim) {\n            let position_ids_idx =\n                ${x.broadcastedIndicesToOffset("bsnh.xy",j("",x.type.tensor,2))};\n            let position_id =\n                u32(${x.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);\n            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});\n            let j = i + select(half_rotary_emb_dim, 1, ${r});\n            let re = ${A.getByOffset("i")} * ${P.get("position_id","bsnh[3]")} -\n                ${A.getByOffset("j")} * ${T.get("position_id","bsnh[3]")};\n            ${k.setByOffset("i","re")}\n            let im = ${A.getByOffset("i")} * ${T.get("position_id","bsnh[3]")} +\n                ${A.getByOffset("j")} * ${P.get("position_id","bsnh[3]")};\n            ${k.setByOffset("j","im")}\n          } else {\n            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;\n            ${k.setByOffset("k",A.getByOffset("k"))}\n          }\n        }`};return{name:"RotaryEmbedding",shaderCache:{hint:we({interleaved:r}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:S,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(M.size(w)/tr)},programUniforms:$})}},fl=(e,t)=>{Ep(e.inputs,t),e.compute(Pp(e.inputs,t))}});var Op,kp,gl,yl=K(()=>{"use strict";fe();Se();$e();Op=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let i=t.dims[t.dims.length-1],u=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==i)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==u)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==i)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error("Beta must be 1D");if(a.dims[a.dims.length-1]!==i)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error("Bias must be 1D");if(a.dims[a.dims.length-1]!==i)throw new Error("Bias must have the same hidden size as input")}},kp=(e,t,r,o)=>{let i=e[0].dims,u=M.size(i),a=i,c=u,p=i.slice(-1)[0],h=o?i.slice(0,-1).concat(1):[],l=e.length>3,y=e.length>4,w=o&&r>1,_=o&&r>2,$=r>3,S=We(p),E=[{type:12,data:c},{type:12,data:S},{type:12,data:p},{type:1,data:t.epsilon}],A=P=>{let T=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],k=[z("x",e[0].dataType,e[0].dims,S),z("skip",e[1].dataType,e[1].dims,S),z("gamma",e[2].dataType,e[2].dims,S)];l&&k.push(z("beta",e[3].dataType,e[3].dims,S)),y&&k.push(z("bias",e[4].dataType,e[4].dims,S)),k.push(j("output",e[0].dataType,a,S)),w&&k.push(j("mean_output",1,h)),_&&k.push(j("inv_std_output",1,h)),$&&k.push(j("input_skip_bias_sum",e[0].dataType,a,S));let W=De(e[0].dataType);return`\n\n      ${P.registerUniforms(T).declareVariables(...k)}\n\n      ${P.mainStart()}\n        ${P.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size / uniforms.hidden_size")}\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        let offset = global_idx * hidden_size_vectorized;\n        var sum = ${Je("f32",S)};\n        var squareSum = ${Je("f32",S)};\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${y?"bias[i]":"0.0"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${$?"input_skip_bias_sum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32_value = ${vt(W,S,"value")};\n          sum += f32_value;\n          squareSum += f32_value * f32_value;\n        }\n        let mean = ${lt("sum",S)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${lt("squareSum",S)} / f32(uniforms.hidden_size) - mean * mean + uniforms.epsilon);\n        ${w?"mean_output[global_idx] = mean;":""}\n        ${_?"inv_std_output[global_idx] = inv_std_dev;":""}\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${W}(mean)) * ${W}(inv_std_dev) * gamma[i] + ${l?"beta[i]":"0.0"};\n        }\n      }`},x=[{dims:a,dataType:e[0].dataType}];return r>1&&x.push({dims:h,dataType:1}),r>2&&x.push({dims:h,dataType:1}),r>3&&x.push({dims:i,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${S};${w};${_};${$}`,inputDependencies:e.map((P,T)=>"type")},getShaderSource:A,getRunData:()=>({outputs:x,dispatchGroup:{x:Math.ceil(c/p/64)},programUniforms:E})}},gl=(e,t)=>{Op(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(kp(e.inputs,t,e.outputCount,!1),{outputs:o})}});var Rp,Fn,Bp,bl,Dp,Mp,wl,vl,$l=K(()=>{"use strict";fe();Se();Ke();$e();Rp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},Fn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Bp=(e,t)=>{if(e.length>1){let r=Fn(e,1),o=Fn(e,2),i=Fn(e,3);return i.length===0&&(i=[...Array(e[0].dims.length).keys()]),we({starts:r,ends:o,axes:i})}else return t},bl=(e,t,r,o,i)=>{let u=e;return e<0&&(u+=r[o[t]]),i[t]<0?Math.max(0,Math.min(u,r[o[t]]-1)):Math.max(0,Math.min(u,r[o[t]]))},Dp=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${se("uniforms.input_shape","i",r.length)};\n            let steps_i = ${se("uniforms.steps","i",r.length)};\n            let signs_i = ${se("uniforms.signs","i",r.length)};\n            let starts_i = ${se("uniforms.starts","i",r.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,Mp=(e,t)=>{let r=e[0].dims,o=M.size(r),i=t.axes.length>0?M.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],u=Fn(e,4);u.forEach(A=>A!==0||(()=>{throw new Error("step cannot be 0")})),u.length===0&&(u=Array(i.length).fill(1));let a=t.starts.map((A,x)=>bl(A,x,r,i,u)),c=t.ends.map((A,x)=>bl(A,x,r,i,u));if(i.length!==a.length||i.length!==c.length)throw new Error("start, ends and axes should have the same number of elements");if(i.length!==r.length)for(let A=0;A<r.length;++A)i.includes(A)||(a.splice(A,0,0),c.splice(A,0,r[A]),u.splice(A,0,1));let p=u.map(A=>Math.sign(A));u.forEach((A,x,P)=>{if(A<0){let T=(c[x]-a[x])/A,k=a[x],W=k+T*u[x];a[x]=W,c[x]=k,P[x]=-A}});let h=r.slice(0);i.forEach((A,x)=>{h[A]=Math.ceil((c[A]-a[A])/u[A])});let l={dims:h,dataType:e[0].dataType},y=j("output",e[0].dataType,h.length),w=z("input",e[0].dataType,e[0].dims.length),_=M.size(h),$=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:a.length},{name:"signs",type:"i32",length:p.length},{name:"steps",type:"u32",length:u.length}],S=[{type:12,data:_},{type:12,data:a},{type:6,data:p},{type:12,data:u},...Z(e[0].dims,h)],E=A=>`\n      ${A.registerUniforms($).declareVariables(w,y)}\n        ${Dp(w,y,r)}\n        ${A.mainStart()}\n          ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${y.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${y.setByOffset("global_idx",w.getByIndices("input_indices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${p.length}_${a.length}_${u.length}`,inputDependencies:["rank"]},getShaderSource:E,getRunData:()=>({outputs:[l],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:S})}},wl=(e,t)=>{Rp(e.inputs,t);let r=Bp(e.inputs,t);e.compute(Mp(e.inputs,r),{inputs:[0]})},vl=e=>{let t=e.starts,r=e.ends,o=e.axes;return we({starts:t,ends:r,axes:o})}});var zp,Up,_l,Sl,xl=K(()=>{"use strict";fe();Se();Ke();$e();zp=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Up=(e,t)=>{let r=e.dims,o=M.size(r),i=64,u=t.axis;if(u<0&&(u=r.length+u),u<r.length-1)throw new Error("softmax only supports last axis for now.");let a=r[u],c=o/a,p=We(a),h=a/p,l=(E,A)=>A===4?`max(max(${E}.x, ${E}.y), max(${E}.z, ${E}.w))`:A===2?`max(${E}.x, ${E}.y)`:A===3?`max(max(${E}.x, ${E}.y), ${E}.z)`:E,y=z("x",e.dataType,e.dims,p),w=j("result",e.dataType,e.dims,p),_=y.type.value,$=De(e.dataType)==="f32"?`var threadMax = ${_}(-3.402823e+38f);`:`var threadMax = ${_}(-65504.0h);`,S=E=>`\n      var<workgroup> rowMaxShared : ${_};\n      var<workgroup> rowSumShared : ${_};\n      var<workgroup> threadShared : array<${_}, ${i}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${_} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${_}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${E.registerUniform("packedCols","i32").declareVariables(y,w)}\n      ${E.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${i};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${$}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${_}(${l("threadShared[0]",p)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${_}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${_}(${lt("threadShared[0]",p)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${p}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:c},programUniforms:[{type:6,data:h}]}),getShaderSource:S}},_l=(e,t)=>{zp(e.inputs),e.compute(Up(e.inputs[0],t))},Sl=e=>we({axis:e.axis})});var Vp,Wp,Np,Gp,Hp,Cl,Al,Il=K(()=>{"use strict";fe();Se();Ke();$e();Vp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Wp=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(i=>r.push(Number(i))),o=r.length),we({numOutputs:o,axis:t.axis,splitSizes:r})},Np=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${se("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,Gp=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let i=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(i):o===0?r.push(`if (output_number == ${o}u) { ${i} }`):o===t-1?r.push(`else { ${i} }`):r.push(`else if (output_number == ${o}) { ${i} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},Hp=(e,t)=>{let r=e[0].dims,o=M.size(r),i=e[0].dataType,u=M.normalizeAxis(t.axis,r.length),a=new Array(t.numOutputs),c=z("input",i,r.length),p=new Array(t.numOutputs),h=[],l=[],y=0,w=[{type:12,data:o}];for(let $=0;$<t.numOutputs;$++){y+=t.splitSizes[$],p[$]=y;let S=r.slice();S[t.axis]=t.splitSizes[$],l.push(S),a[$]=j(`output${$}`,i,S.length),h.push({dims:l[$],dataType:e[0].dataType})}w.push({type:12,data:p},...Z(r,...l));let _=$=>`\n  ${$.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",p.length).declareVariables(c,...a)}\n  ${Np(p.length)}\n  ${Gp(a)}\n\n  ${$.mainStart()}\n    ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${c.offsetToIndices("global_idx")};\n    var index = ${c.indicesGet("indices",u)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${se("uniforms.size_in_split_axis","output_number - 1u",p.length)};\n      ${c.indicesSet("indices",u,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:_,getRunData:()=>({outputs:h,dispatchGroup:{x:Math.ceil(o/64)},programUniforms:w})}},Cl=(e,t)=>{Vp(e.inputs);let r=e.inputs.length===1?t:Wp(e.inputs,t);e.compute(Hp(e.inputs,r),{inputs:[0]})},Al=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return we({axis:t,numOutputs:o,splitSizes:r})}});var Tl,Lp,Fp,qp,El,Pl=K(()=>{"use strict";fe();Se();$e();Tl=e=>Array.from(e.getBigInt64Array(),Number),Lp=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Tl(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Fp=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},qp=e=>{let t=e[0].dims,r=Tl(e[1]),o=Fp(t,r),i=M.size(o),u=e[0].dataType,a=z("input",u,t.length),c=j("output",u,o.length),p=h=>`\n      const inputShape = ${a.indices(...t)};\n      ${h.registerUniform("output_size","u32").declareVariables(a,c)}\n      ${h.mainStart()}\n      ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${c.offsetToIndices("global_idx")};\n      var input_indices: ${a.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${a.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${c.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${a.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${c.setByOffset("global_idx",a.getByIndices("input_indices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},...Z(e[0].dims,o)]}),getShaderSource:p}},El=e=>{Lp(e.inputs),e.compute(qp(e.inputs),{inputs:[0]})}});var jp,Kp,Ol,kl=K(()=>{"use strict";fe();Se();$e();jp=(e,t,r,o,i)=>{let u=j("output_data",i,r.length,4),a=z("a_data",t[1].dataType,t[1].dims.length,4),c=z("b_data",t[2].dataType,t[2].dims.length,4),p=z("c_data",t[0].dataType,t[0].dims.length,4),h,l=(y,w,_)=>`select(${w}, ${y}, ${_})`;if(!o)h=u.setByOffset("global_idx",l(a.getByOffset("global_idx"),c.getByOffset("global_idx"),p.getByOffset("global_idx")));else{let y=(w,_,$="")=>{let S=`a_data[index_a${_}][component_a${_}]`,E=`b_data[index_b${_}][component_b${_}]`,A=`bool(c_data[index_c${_}] & (0xffu << (component_c${_} * 8)))`;return`\n            let output_indices${_} = ${u.offsetToIndices(`global_idx * 4u + ${_}u`)};\n            let offset_a${_} = ${a.broadcastedIndicesToOffset(`output_indices${_}`,u)};\n            let offset_b${_} = ${c.broadcastedIndicesToOffset(`output_indices${_}`,u)};\n            let offset_c${_} = ${p.broadcastedIndicesToOffset(`output_indices${_}`,u)};\n            let index_a${_} = offset_a${_} / 4u;\n            let index_b${_} = offset_b${_} / 4u;\n            let index_c${_} = offset_c${_} / 4u;\n            let component_a${_} = offset_a${_} % 4u;\n            let component_b${_} = offset_b${_} % 4u;\n            let component_c${_} = offset_c${_} % 4u;\n            ${w}[${_}] = ${$}(${l(S,E,A)});\n          `};i===9?h=`\n            var data = vec4<u32>(0);\n            ${y("data",0,"u32")}\n            ${y("data",1,"u32")}\n            ${y("data",2,"u32")}\n            ${y("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:h=`\n            ${y("output_data[global_idx]",0)}\n            ${y("output_data[global_idx]",1)}\n            ${y("output_data[global_idx]",2)}\n            ${y("output_data[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(p,a,c,u)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${h}\n      }`},Kp=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,i=e[1].dataType,u=!(M.areEqual(t,r)&&M.areEqual(r,o)),a=t,c=M.size(t);if(u){let h=It.calcShape(It.calcShape(t,r,!1),o,!1);if(!h)throw new Error("Can\'t perform where op on the given tensors");a=h,c=M.size(a)}let p=Math.ceil(c/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:h=>jp(h,e,a,u,i),getRunData:()=>({outputs:[{dims:a,dataType:i}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:[{type:12,data:p},...Z(o,t,r,a)]})}},Ol=e=>{e.compute(Kp(e.inputs))}});var Rl,Bl=K(()=>{"use strict";qa();Po();Ya();Xa();Ds();qs();Ys();Do();lu();pu();yu();vu();_u();Cu();Tu();Ou();Ru();Du();zo();Uu();Gu();Lu();sl();ll();On();ml();hl();yl();$l();xl();Il();Pl();yr();Mn();kl();Rl=new Map([["Abs",[Ja]],["Acos",[Qa]],["Acosh",[es]],["Add",[Ms]],["ArgMax",[Fa,Eo]],["ArgMin",[La,Eo]],["Asin",[ts]],["Asinh",[rs]],["Atan",[ns]],["Atanh",[os]],["Attention",[ja]],["AveragePool",[Ju,Xu]],["BatchNormalization",[Ka]],["BiasAdd",[Za]],["BiasSplitGelu",[Bs]],["Cast",[as,is]],["Ceil",[us]],["Clip",[ss]],["Concat",[js,Ks]],["Conv",[Wo,Vo]],["ConvTranspose",[uu,su]],["Cos",[ls]],["Cosh",[ds]],["CumSum",[du,cu]],["Div",[zs]],["Einsum",[hu,gu]],["Elu",[cs,Bn]],["Equal",[Us]],["Erf",[ps]],["Exp",[ms]],["Expand",[wu]],["FastGelu",[$u]],["Floor",[fs]],["FusedConv",[Wo,Vo]],["Gather",[xu,Su]],["GatherElements",[Iu,Au]],["Gelu",[hs]],["Gemm",[Pu,Eu]],["GlobalAveragePool",[tl,el]],["GlobalMaxPool",[al,il]],["Greater",[Gs]],["GreaterOrEqual",[Ls]],["HardSigmoid",[Ss,_s]],["InstanceNormalization",[ku]],["LayerNormalization",[Bu]],["LeakyRelu",[gs,Bn]],["Less",[Hs]],["LessOrEqual",[Fs]],["Log",[ks]],["MatMul",[tu]],["MatMulNBits",[Mu,zu]],["MaxPool",[nl,ol]],["Mul",[Vs]],["MultiHeadAttention",[Nu,Wu]],["Neg",[bs]],["Not",[ys]],["Pad",[Hu]],["Pow",[Ws]],["Range",[ul]],["Reciprocal",[ws]],["ReduceMin",[Ua]],["ReduceMean",[Ra]],["ReduceMax",[za]],["ReduceSum",[Wa]],["ReduceProd",[Va]],["ReduceL1",[Ba]],["ReduceL2",[Da]],["ReduceLogSum",[Ga]],["ReduceLogSumExp",[Ma]],["ReduceSumSquare",[Na]],["Relu",[vs]],["Resize",[cl,pl]],["RotaryEmbedding",[fl]],["Sigmoid",[$s]],["Sin",[xs]],["Sinh",[Cs]],["Slice",[wl,vl]],["SkipLayerNormalization",[gl]],["Split",[Cl,Al]],["Sqrt",[As]],["Softmax",[_l,Sl]],["Sub",[Ns]],["Tan",[Is]],["Tanh",[Es]],["ThresholdedRelu",[Os,Bn]],["Tile",[El]],["Transpose",[va,$a]],["Where",[Ol]]])});var qn,Dl=K(()=>{"use strict";hr();Ht();$e();qn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,i,u){Qt(t.programInfo.name);let a=this.backend.device,c=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let p=[];for(let l of r)p.push({binding:p.length,resource:{buffer:l.buffer}});for(let l of o)p.push({binding:p.length,resource:{buffer:l.buffer}});u&&p.push({binding:p.length,resource:u});let h=a.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:p,label:t.programInfo.name});if(this.backend.sessionStatus==="capturing"){let l={kernelId:this.backend.currentKernelId,computePipeline:t.computePipeline,bindGroup:h,dispatchGroup:i};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(l)}c.setPipeline(t.computePipeline),c.setBindGroup(0,h),c.dispatchWorkgroups(...i),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Gt(t.programInfo.name)}dispose(){}build(t,r){Qt(t.name);let o=this.backend.device,i=[];o.features.has("shader-f16")&&i.push("enable f16;");let u=ba(r,this.backend.device.limits),a=t.getShaderSource(u),c=`${i.join(`\n`)}\n${u.additionalImplementations}\n${a}`,p=o.createShaderModule({code:c,label:t.name});Ve("verbose",()=>`[WebGPU] ${t.name} shader code: ${c}`);let h=o.createComputePipeline({compute:{module:p,entryPoint:"main"},layout:"auto",label:t.name});return Gt(t.name),{programInfo:t,computePipeline:h,uniformVariablesInfo:u.variablesInfo}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,i=typeof t=="number"?1:t.z||1,u=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=u&&o<=u&&i<=u)return[r,o,i];let a=r*o*i,c=Math.ceil(Math.sqrt(a));if(c>u){if(c=Math.ceil(Math.cbrt(a)),c>u)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[c,c,c]}else return[c,c,1]}}});var Yp,Zp,qo,jn,Ml=K(()=>{"use strict";hr();fe();Ht();ma();ya();Bl();Dl();Yp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let i=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${i}`);break}case"rank":{let u=e[o].dims.length;r.push(`${i};${u}`);break}case"dims":{let u=e[o].dims.join(",");r.push(`${i};${u}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Zp=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${Yp(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},qo=class{constructor(t){t&&(this.architecture=t.architecture,this.vendor=t.vendor)}isArchitecture(t){return this.architecture===t}isVendor(t){return this.vendor===t}},jn=class{constructor(){this.currentSessionId=null;this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionStatus="default";this.capturedCommandList=new Map;this.capturedPendingKernels=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let o=[],i={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("chromium-experimental-timestamp-query-inside-passes")?o.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(i),this.adapterInfo=new qo(await r.requestAdapterInfo()),this.gpuDataManager=ga(this),this.programManager=new qn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,ca(t.logLevel,!!t.debug),this.device.onuncapturederror=u=>{u.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${u.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:r,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=t.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Qt(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),o=this.pendingQueries.get(t);for(let i=0;i<r.length/2;i++){let u=o[i],a=u.kernelId,c=this.kernels.get(a),p=c.kernelType,h=c.kernelName,l=u.programName,y=u.inputTensorViews,w=u.outputTensorViews,_=r[i*2],$=r[i*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=_);let S=Number(_-this.queryTimeBase),E=Number($-this.queryTimeBase);if(!Number.isSafeInteger(S)||!Number.isSafeInteger(E))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:y.map(A=>({dims:A.dims,dataType:Nt(A.dataType)})),outputsMetadata:w.map(A=>({dims:A.dims,dataType:Nt(A.dataType)})),kernelId:a,kernelType:p,kernelName:h,programName:l,startTime:S,endTime:E});else{let A="";y.forEach((P,T)=>{A+=`input[${T}]: [${P.dims}] | ${Nt(P.dataType)}, `});let x="";w.forEach((P,T)=>{x+=`output[${T}]: [${P.dims}] | ${Nt(P.dataType)}, `}),console.log(`[profiling] kernel "${a}|${p}|${h}|${l}" ${A}${x}execution time: ${E-S} ns`)}wo("GPU",`${l}::${_}::${$}`)}t.unmap(),this.pendingQueries.delete(t)}),Gt()}run(t,r,o,i,u){Qt(t.name);let a=[];for(let x=0;x<r.length;++x){let P=r[x].data;if(P===0)continue;let T=this.gpuDataManager.get(P);if(!T)throw new Error(`no GPU data for input: ${P}`);a.push(T)}let{outputs:c,dispatchGroup:p,programUniforms:h}=t.getRunData(r),l=o.length===0?c.map((x,P)=>P):o;if(l.length!==c.length)throw new Error(`Output size ${l.length} must be equal to ${c.length}.`);let y=[],w=[];for(let x=0;x<c.length;++x){if(!Number.isInteger(l[x])||l[x]<-3||l[x]>=c.length)throw new Error(`Invalid output index: ${l[x]}`);if(l[x]===-3)continue;let P=l[x]===-1,T=l[x]===-2,k=P||T?u(c[x].dataType,c[x].dims):i(l[x],c[x].dataType,c[x].dims);if(y.push(k),k.data===0)continue;let W=this.gpuDataManager.get(k.data);if(!W)throw new Error(`no GPU data for output: ${k.data}`);if(P&&this.temporaryData.push(W),T){let N=this.kernelPersistentData.get(this.currentKernelId);N||(N=[],this.kernelPersistentData.set(this.currentKernelId,N)),N.push(W)}w.push(W)}if(a.length!==r.length||w.length!==y.length){if(w.length===0)return Gt(t.name),y;throw new Error(`Program ${t.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let _;if(h){let x=0,P=[];h.forEach(N=>{let G=typeof N.data=="number"?[N.data]:N.data;if(G.length===0)return;let oe=N.type===10?2:4,X,U;N.type===10?(U=G.length>4?16:G.length>2?8:G.length*oe,X=G.length>4?16:oe*G.length):(U=G.length<=2?G.length*oe:16,X=16),x=Math.ceil(x/U)*U,P.push(x);let re=N.type===10?8:4;x+=G.length>4?Math.ceil(G.length/re)*X:G.length*oe});let T=16;x=Math.ceil(x/T)*T;let k=new ArrayBuffer(x);h.forEach((N,G)=>{let oe=P[G],X=typeof N.data=="number"?[N.data]:N.data;if(N.type===6)new Int32Array(k,oe,X.length).set(X);else if(N.type===12)new Uint32Array(k,oe,X.length).set(X);else if(N.type===10)new Uint16Array(k,oe,X.length).set(X);else if(N.type===1)new Float32Array(k,oe,X.length).set(X);else throw new Error(`Unsupported uniform type: ${Nt(N.type)}`)});let W=this.gpuDataManager.create(x,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(W.buffer,0,k,0,x),this.gpuDataManager.release(W.id),_={offset:0,size:x,buffer:W.buffer}}let $=this.programManager.normalizeDispatchGroupSize(p),S=$[1]===1&&$[2]===1,E=Zp(t,r,S),A=this.programManager.getArtifact(E);if(A||(A=this.programManager.build(t,$),this.programManager.setArtifact(E,A),Ve("info",()=>`[artifact] key: ${E}, programName: ${t.name}`)),h&&A.uniformVariablesInfo){if(h.length!==A.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${A.uniformVariablesInfo.length}, got ${h.length} in program "${A.programInfo.name}".`);for(let x=0;x<h.length;x++){let P=h[x],T=P.type,k=typeof P.data=="number"?1:P.data.length,[W,N]=A.uniformVariablesInfo[x];if(T!==W||k!==N)throw new Error(`Uniform variable ${x} mismatch: expect type ${W} with size ${N}, got type ${T} with size ${k} in program "${A.programInfo.name}".`)}}if(Ve("info",()=>`[ProgramManager] run "${t.name}" (key=${E}) with ${$[0]}x${$[1]}x${$[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let x={kernelId:this.currentKernelId,programName:A.programInfo.name,inputTensorViews:r,outputTensorViews:y};this.pendingKernels.push(x),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(x)}return this.programManager.run(A,a,w,$,_),Gt(t.name),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,i){let u=Rl.get(t);if(!u)throw new Error(`kernel not implemented: ${t}`);let a={kernelType:t,kernelName:i,kernelEntry:u[0],attributes:[u[1],o]};this.kernels.set(r,a)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let i=this.kernels.get(t);if(!i)throw new Error(`kernel not created: ${t}`);let u=i.kernelType,a=i.kernelName,c=i.kernelEntry,p=i.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${u}] ${a}" is not allowed to be called recursively`);this.currentKernelId=t,p[0]&&(p[1]=p[0](p[1]),p[0]=void 0),Ve("info",()=>`[WebGPU] Start to run kernel "[${u}] ${a}"...`);let h=this.env.debug;this.temporaryData=[];try{return h&&this.device.pushErrorScope("validation"),c(r,p[1]),0}catch(l){return o.push(Promise.resolve(`[WebGPU] Kernel "[${u}] ${a}" failed. ${l}`)),1}finally{h&&o.push(this.device.popErrorScope().then(l=>l?`GPU validation error for kernel "[${u}] ${a}": ${l.message}`:null));for(let l of this.temporaryData)this.gpuDataManager.release(l.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,i){let u=this.sessionExternalDataMapping.get(t);u||(u=new Map,this.sessionExternalDataMapping.set(t,u));let a=u.get(r),c=this.gpuDataManager.registerExternalBuffer(o,i,a?.[1]);return u.set(r,[c,o]),c}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let i=await _o(this,t,r);return pa(i.buffer,o)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Ve("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Ve("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Ve("info","replay"),this.sessionStatus="replaying";let t=this.capturedCommandList.get(this.currentSessionId),r=this.capturedPendingKernels.get(this.currentSessionId),o=t.length;this.pendingKernels=[];for(let i=0;i<o;i++){let u=this.getComputePassEncoder(),a=t[i];this.writeTimestamp(this.pendingDispatchNumber*2),u.setPipeline(a.computePipeline),u.setBindGroup(0,a.bindGroup),u.dispatchWorkgroups(...a.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(r[i]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(t){this.unregisterBuffers(t),this.capturedCommandList.has(t)&&this.capturedCommandList.delete(t),this.capturedPendingKernels.has(t)&&this.capturedPendingKernels.delete(t),this.gpuDataManager.onReleaseSession(t)}onRunStart(t){this.currentSessionId=t,this.setQueryType()}}});var zl={};wn(zl,{init:()=>Xp});var qr,jo,Xp,Ul=K(()=>{"use strict";fe();Ml();Ht();Se();qr=class e{constructor(t,r,o,i){this.module=t;this.dataType=r;this.data=o;this.dims=i}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=M.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=M.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=M.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(M.size(t)!==M.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},jo=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;this.adapterInfo=r.adapterInfo;let i=t.HEAPU32,u=o>>>2;this.opKernelContext=i[u++];let a=i[u++];this.outputCount=i[u++],this.customDataOffset=i[u++],this.customDataSize=i[u++];let c=[];for(let p=0;p<a;p++){let h=i[u++],l=i[u++],y=i[u++],w=[];for(let _=0;_<y;_++)w.push(i[u++]);c.push(new qr(t,h,l,w))}this.inputs=c}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(c=>typeof c=="number"?this.inputs[c]:c)??this.inputs,i=r?.outputs??[],u=(c,p,h)=>new qr(this.module,p,this.output(c,h),h),a=(c,p)=>{let h=Nr(c);if(!h)throw new Error(`Unsupported data type: ${c}`);let l=h*M.size(p),y=l>0?this.backend.gpuDataManager.create(l).id:0;return new qr(this.module,c,y,p)};return this.backend.run(t,o,i,u,a)}output(t,r){let o=this.module.stackSave();try{let i=this.module.stackAlloc((1+r.length)*4),u=i>>2;this.module.HEAPU32[u++]=r.length;for(let a=0;a<r.length;a++)this.module.HEAPU32[u++]=r[a];return this.module._JsepOutput(this.opKernelContext,t,i)}catch(i){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${i}`)}finally{this.module.stackRestore(o)}}},Xp=async(e,t,r,o)=>{let i=t.jsepInit;if(!i)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let u=new jn;await u.initialize(r,o),i("webgpu",[u,a=>u.alloc(a),a=>u.free(a),(a,c,p,h=!1)=>{if(h)Ve("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${a}, dst=${c}, size=${p}`),u.memcpy(a,c);else{Ve("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${a}, gpuDataId=${c}, size=${p}`);let l=t.HEAPU8.subarray(a>>>0,(a>>>0)+p);u.upload(c,l)}},async(a,c,p)=>{Ve("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${a}, dataOffset=${c}, size=${p}`),await u.download(a,()=>t.HEAPU8.subarray(c>>>0,(c>>>0)+p))},(a,c,p)=>u.createKernel(a,c,p,t.UTF8ToString(t._JsepGetNodeName(c))),a=>u.releaseKernel(a),(a,c,p,h)=>{Ve("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${p}, kernel=${a}, contextDataOffset=${c}`);let l=new jo(t,u,c);return u.computeKernel(a,l,h)},()=>u.captureBegin(),()=>u.captureEnd(),()=>u.replay()])}else i("webnn")}});var Ui;Ui=Ti();var ud=Di(),fo,ho=!1,vn=!1,zi=!1,ld=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},dd=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},cd=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Vi=async e=>{if(ho)return Promise.resolve();if(vn)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(zi)throw new Error("previous call to \'initializeWebAssembly()\' failed.");vn=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,i=ld(r),u=o&&dd(),a=e.wasmPaths,c=typeof a=="string"?a:void 0,p=cd(u,i),h=typeof a=="object"?a[p]:void 0,l=!1,y=[];if(t>0&&y.push(new Promise(w=>{setTimeout(()=>{l=!0,w()},t)})),y.push(new Promise((w,_)=>{let $=i?ud:Ui,S={locateFile:(E,A)=>{if(i&&E.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Mi()],{type:"text/javascript"}));if(E.endsWith(".wasm")){if(h)return h;let x=c??A;return p==="ort-wasm-simd.wasm"?x+"ort-wasm-simd.jsep.wasm":p==="ort-wasm-simd-threaded.wasm"?x+"ort-wasm-simd-threaded.jsep.wasm":x+p}return A+E}};if(i)if(S.numThreads=r,typeof Blob>"u")S.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let E=`var ortWasmThreaded=${$.toString()};`;S.mainScriptUrlOrBlob=new Blob([E],{type:"text/javascript"})}$(S).then(E=>{vn=!1,ho=!0,fo=E,w()},E=>{vn=!1,zi=!0,_(E)})})),await Promise.race(y),l)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Ge=()=>{if(ho&&fo)return fo;throw new Error("WebAssembly is not initialized yet.")};var He=(e,t)=>{let r=Ge(),o=r.lengthBytesUTF8(e)+1,i=r._malloc(o);return r.stringToUTF8(e,i,o),t.push(i),i},Wr=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([i,u])=>{let a=t?t+i:i;if(typeof u=="object")Wr(u,a+".",r,o);else if(typeof u=="string"||typeof u=="number")o(a,u.toString());else if(typeof u=="boolean")o(a,u?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof u}`)})},Ue=e=>{let t=Ge(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let i=t.HEAP32[o/4],u=t.HEAPU32[o/4+1],a=u?t.UTF8ToString(u):"";throw new Error(`${e} ERROR_CODE: ${i}, ERROR_MESSAGE: ${a}`)}finally{t.stackRestore(r)}};var Wi=e=>{let t=Ge(),r=0,o=[],i=e||{};try{if(e?.logSeverityLevel===void 0)i.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)i.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(i.terminate=!1);let u=0;return e?.tag!==void 0&&(u=He(e.tag,o)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,u),r===0&&Ue("Can\'t create run options."),e?.extra!==void 0&&Wr(e.extra,"",new WeakSet,(a,c)=>{let p=He(a,o),h=He(c,o);t._OrtAddRunConfigEntry(r,p,h)!==0&&Ue(`Can\'t set a run config entry: ${a} - ${c}.`)}),[r,o]}catch(u){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(a=>t._free(a)),u}};var pd=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},md=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},fd=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},hd=(e,t,r)=>{for(let o of t){let i=typeof o=="string"?o:o.name;switch(i){case"webnn":if(i="WEBNN",typeof o!="string"){let a=o;if(a?.deviceType){let c=He("deviceType",r),p=He(a.deviceType,r);Ge()._OrtAddSessionConfigEntry(e,c,p)!==0&&Ue(`Can\'t set a session config entry: \'deviceType\' - ${a.deviceType}.`)}if(a?.numThreads){let c=a.numThreads;(typeof c!="number"||!Number.isInteger(c)||c<0)&&(c=0);let p=He("numThreads",r),h=He(c.toString(),r);Ge()._OrtAddSessionConfigEntry(e,p,h)!==0&&Ue(`Can\'t set a session config entry: \'numThreads\' - ${a.numThreads}.`)}if(a?.powerPreference){let c=He("powerPreference",r),p=He(a.powerPreference,r);Ge()._OrtAddSessionConfigEntry(e,c,p)!==0&&Ue(`Can\'t set a session config entry: \'powerPreference\' - ${a.powerPreference}.`)}}break;case"webgpu":if(i="JS",typeof o!="string"){let a=o;if(a?.preferredLayout){if(a.preferredLayout!=="NCHW"&&a.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${a.preferredLayout}`);let c=He("preferredLayout",r),p=He(a.preferredLayout,r);Ge()._OrtAddSessionConfigEntry(e,c,p)!==0&&Ue(`Can\'t set a session config entry: \'preferredLayout\' - ${a.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${i}`)}let u=He(i,r);Ge()._OrtAppendExecutionProvider(e,u)!==0&&Ue(`Can\'t append execution provider: ${i}.`)}},Ni=e=>{let t=Ge(),r=0,o=[],i=e||{};fd(i);try{let u=pd(i.graphOptimizationLevel??"all"),a=md(i.executionMode??"sequential"),c=typeof i.logId=="string"?He(i.logId,o):0,p=i.logSeverityLevel??2;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log serverity level is not valid: ${p}`);let h=i.logVerbosityLevel??0;if(!Number.isInteger(h)||h<0||h>4)throw new Error(`log verbosity level is not valid: ${h}`);let l=typeof i.optimizedModelFilePath=="string"?He(i.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(u,!!i.enableCpuMemArena,!!i.enableMemPattern,a,!!i.enableProfiling,0,c,p,h,l),r===0&&Ue("Can\'t create session options."),i.executionProviders&&hd(r,i.executionProviders,o),i.enableGraphCapture!==void 0){if(typeof i.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${i.enableGraphCapture}`);let y=He("enableGraphCapture",o),w=He(i.enableGraphCapture.toString(),o);t._OrtAddSessionConfigEntry(r,y,w)!==0&&Ue(`Can\'t set a session config entry: \'enableGraphCapture\' - ${i.enableGraphCapture}.`)}if(i.freeDimensionOverrides)for(let[y,w]of Object.entries(i.freeDimensionOverrides)){if(typeof y!="string")throw new Error(`free dimension override name must be a string: ${y}`);if(typeof w!="number"||!Number.isInteger(w)||w<0)throw new Error(`free dimension override value must be a non-negative integer: ${w}`);let _=He(y,o);t._OrtAddFreeDimensionOverride(r,_,w)!==0&&Ue(`Can\'t set a free dimension override: ${y} - ${w}.`)}return i.extra!==void 0&&Wr(i.extra,"",new WeakSet,(y,w)=>{let _=He(y,o),$=He(w,o);t._OrtAddSessionConfigEntry(r,_,$)!==0&&Ue(`Can\'t set a session config entry: ${y} - ${w}.`)}),[r,o]}catch(u){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(a=>t._free(a)),u}};fe();var Hi=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),o=[];for await(let i of r)o.push(i);return new Uint8Array(Buffer.concat(o))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),o=r?parseInt(r,10):0;if(o<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let i=t.body.getReader(),u;try{u=new ArrayBuffer(o)}catch(c){if(c instanceof RangeError){let p=Math.ceil(o/65536);u=new WebAssembly.Memory({initial:p,maximum:p}).buffer}else throw c}let a=0;for(;;){let{done:c,value:p}=await i.read();if(c)break;let h=p.byteLength;new Uint8Array(u,a,h).set(p),a+=h}return new Uint8Array(u,0,o)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)};var Jp=(e,t)=>{Ge()._OrtInit(e,t)!==0&&Ue("Can\'t initialize onnxruntime.")},Wl=async e=>{Jp(e.wasm.numThreads,Gr(e.logLevel))},Nl=async(e,t)=>{{let r=(Ul(),mr(zl)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let o=e.webgpu.adapter;if(o){if(typeof o.limits!="object"||typeof o.features!="object"||typeof o.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let i=e.webgpu.powerPreference;if(i!==void 0&&i!=="low-power"&&i!=="high-performance")throw new Error(`Invalid powerPreference setting: "${i}"`);let u=e.webgpu.forceFallbackAdapter;if(u!==void 0&&typeof u!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${u}"`);if(o=await navigator.gpu.requestAdapter({powerPreference:i,forceFallbackAdapter:u}),!o)throw new Error(\'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\')}if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");await r("webgpu",Ge(),e,o)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await r("webnn",Ge(),e)}}},rr=new Map,Qp=e=>{let t=Ge(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Ue("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},Ko=e=>{let t=Ge(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Gl=async(e,t)=>{let r,o,i=Ge();Array.isArray(e)?[r,o]=e:e.buffer===i.HEAPU8.buffer?[r,o]=[e.byteOffset,e.byteLength]:[r,o]=Ko(e);let u=0,a=0,c=0,p=[],h=[],l=[];try{if([a,p]=Ni(t),t?.externalData&&i.mountExternalData){let x=[];for(let P of t.externalData){let T=typeof P=="string"?P:P.path;x.push(Hi(typeof P=="string"?P:P.data).then(k=>{i.mountExternalData(T,k)}))}await Promise.all(x)}u=await i._OrtCreateSession(r,o,a),u===0&&Ue("Can\'t create a session.");let[y,w]=Qp(u),_=!!t?.enableGraphCapture,$=[],S=[],E=[];for(let x=0;x<y;x++){let P=i._OrtGetInputName(u,x);P===0&&Ue("Can\'t get an input name."),h.push(P),$.push(i.UTF8ToString(P))}for(let x=0;x<w;x++){let P=i._OrtGetOutputName(u,x);P===0&&Ue("Can\'t get an output name."),l.push(P);let T=i.UTF8ToString(P);S.push(T);{if(_&&t?.preferredOutputLocation===void 0){E.push("gpu-buffer");continue}let k=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[T]??"cpu";if(k!=="cpu"&&k!=="cpu-pinned"&&k!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${k}.`);if(_&&k!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${k}. Only \'gpu-buffer\' location is supported when enableGraphCapture is true.`);E.push(k)}}let A=null;return E.some(x=>x==="gpu-buffer")&&(c=i._OrtCreateBinding(u),c===0&&Ue("Can\'t create IO binding."),A={handle:c,outputPreferredLocations:E,outputPreferredLocationsEncoded:E.map(x=>yo(x))}),rr.set(u,[u,h,l,A,_,!1]),[u,$,S]}catch(y){throw h.forEach(w=>i._OrtFree(w)),l.forEach(w=>i._OrtFree(w)),c!==0&&i._OrtReleaseBinding(c),u!==0&&i._OrtReleaseSession(u),y}finally{i._free(r),a!==0&&i._OrtReleaseSessionOptions(a),p.forEach(y=>i._free(y)),i.unmountExternalData?.()}},Hl=e=>{let t=Ge(),r=rr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,i,u,a,c]=r;a&&(c&&t._OrtClearBoundOutputs(a.handle),t._OrtReleaseBinding(a.handle)),t.jsepOnReleaseSession?.(e),i.forEach(p=>t._OrtFree(p)),u.forEach(p=>t._OrtFree(p)),t._OrtReleaseSession(o),rr.delete(e)},Vl=(e,t,r,o,i,u=!1)=>{if(!e){t.push(0);return}let a=Ge(),c=e[0],p=e[1],h=e[3],l,y;if(c==="string"&&h==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(u&&h!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${i} when enableGraphCapture is true.`);if(h==="gpu-buffer"){let $=e[2].gpuBuffer,S=Nr(go(c));y=p.reduce((A,x)=>A*x,1)*S;let E=a.jsepRegisterBuffer;if(!E)throw new Error(\'Tensor location "gpu-buffer" is not supported without using WebGPU.\');l=E(o,i,$,y)}else{let $=e[2];if(Array.isArray($)){y=4*$.length,l=a._malloc(y),r.push(l);let S=l/4;for(let E=0;E<$.length;E++){if(typeof $[E]!="string")throw new TypeError(`tensor data at index ${E} is not a string`);a.HEAPU32[S++]=He($[E],r)}}else y=$.byteLength,l=a._malloc(y),r.push(l),a.HEAPU8.set(new Uint8Array($.buffer,$.byteOffset,y),l)}let w=a.stackSave(),_=a.stackAlloc(4*p.length);try{let $=_/4;p.forEach(E=>a.HEAP32[$++]=E);let S=a._OrtCreateTensor(go(c),l,y,_,p.length,yo(h));S===0&&Ue(`Can\'t create tensor for input/output. session=${o}, index=${i}.`),t.push(S)}finally{a.stackRestore(w)}},Ll=async(e,t,r,o,i,u)=>{let a=Ge(),c=rr.get(e);if(!c)throw new Error(`cannot run inference. invalid session id: ${e}`);let p=c[0],h=c[1],l=c[2],y=c[3],w=c[4],_=c[5],$=t.length,S=o.length,E=0,A=[],x=[],P=[],T=[],k=a.stackSave(),W=a.stackAlloc($*4),N=a.stackAlloc($*4),G=a.stackAlloc(S*4),oe=a.stackAlloc(S*4);try{[E,A]=Wi(u);for(let te=0;te<$;te++)Vl(r[te],x,T,e,t[te],w);for(let te=0;te<S;te++)Vl(i[te],P,T,e,$+o[te],w);let X=W/4,U=N/4,re=G/4,Be=oe/4;for(let te=0;te<$;te++)a.HEAPU32[X++]=x[te],a.HEAPU32[U++]=h[t[te]];for(let te=0;te<S;te++)a.HEAPU32[re++]=P[te],a.HEAPU32[Be++]=l[o[te]];if(y&&!_){let{handle:te,outputPreferredLocations:Me,outputPreferredLocationsEncoded:ye}=y;if(h.length!==$)throw new Error(`input count from feeds (${$}) is expected to be always equal to model\'s input count (${h.length}).`);for(let he=0;he<$;he++){let ue=t[he];await a._OrtBindInput(te,h[ue],x[he])!==0&&Ue(`Can\'t bind input[${he}] for session=${e}.`)}for(let he=0;he<S;he++){let ue=o[he];i[he]?.[3]?a._OrtBindOutput(te,l[ue],P[he],0)!==0&&Ue(`Can\'t bind pre-allocated output[${he}] for session=${e}.`):a._OrtBindOutput(te,l[ue],0,ye[ue])!==0&&Ue(`Can\'t bind output[${he}] to ${Me[he]} for session=${e}.`)}rr.set(e,[p,h,l,y,w,!0])}a.jsepOnRunStart?.(p);let Ee;y?Ee=await a._OrtRunWithBinding(p,y.handle,S,G,E):Ee=await a._OrtRun(p,N,W,$,oe,S,G,E),Ee!==0&&Ue("failed to call OrtRun().");let Ae=[];for(let te=0;te<S;te++){let Me=a.HEAPU32[G/4+te];if(Me===P[te]){Ae.push(i[te]);continue}let ye=a.stackSave(),he=a.stackAlloc(4*4),ue=!1,ge,Pe=0;try{a._OrtGetTensorData(Me,he,he+4,he+8,he+12)!==0&&Ue(`Can\'t access output tensor data on index ${te}.`);let F=he/4,ie=a.HEAPU32[F++];Pe=a.HEAPU32[F++];let xe=a.HEAPU32[F++],Ne=a.HEAPU32[F++],Ye=[];for(let Fe=0;Fe<Ne;Fe++)Ye.push(a.HEAPU32[xe/4+Fe]);a._OrtFree(xe);let dt=Ye.reduce((Fe,qe)=>Fe*qe,1);ge=Nt(ie);let et=y?.outputPreferredLocations[o[te]];if(ge==="string"){if(et==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Fe=[],qe=Pe/4;for(let ct=0;ct<dt;ct++){let zt=a.HEAPU32[qe++],xt=ct===dt-1?void 0:a.HEAPU32[qe]-zt;Fe.push(a.UTF8ToString(zt,xt))}Ae.push([ge,Ye,Fe,"cpu"])}else if(et==="gpu-buffer"&&dt>0){let Fe=a.jsepGetBuffer;if(!Fe)throw new Error(\'preferredLocation "gpu-buffer" is not supported without using WebGPU.\');let qe=Fe(Pe),ct=Nr(ie);if(ct===void 0||!Gi(ge))throw new Error(`Unsupported data type: ${ge}`);ue=!0,Ae.push([ge,Ye,{gpuBuffer:qe,download:a.jsepCreateDownloader(qe,dt*ct,ge),dispose:()=>{a._OrtReleaseTensor(Me)}},"gpu-buffer"])}else{let Fe=$n(ge),qe=new Fe(dt);new Uint8Array(qe.buffer,qe.byteOffset,qe.byteLength).set(a.HEAPU8.subarray(Pe,Pe+qe.byteLength)),Ae.push([ge,Ye,qe,"cpu"])}}finally{a.stackRestore(ye),ge==="string"&&Pe&&a._free(Pe),ue||a._OrtReleaseTensor(Me)}}return y&&!w&&(a._OrtClearBoundOutputs(y.handle),rr.set(e,[p,h,l,y,w,!1])),Ae}finally{a.stackRestore(k),x.forEach(X=>a._OrtReleaseTensor(X)),P.forEach(X=>a._OrtReleaseTensor(X)),T.forEach(X=>a._free(X)),E!==0&&a._OrtReleaseRunOptions(E),A.forEach(X=>a._free(X))}},Fl=e=>{let t=Ge(),r=rr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],i=t._OrtEndProfiling(o);i===0&&Ue("Can\'t get an profile file name."),t._OrtFree(i)},ql=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":Vi(r.wasm).then(()=>{Wl(r).then(()=>{postMessage({type:t})},o=>{postMessage({type:t,err:o})})},o=>{postMessage({type:t,err:o})});break;case"init-ep":{let{epName:o,env:i}=r;Nl(i,o).then(()=>{postMessage({type:t})},u=>{postMessage({type:t,err:u})});break}case"copy-from":{let{buffer:o}=r,i=Ko(o);postMessage({type:t,out:i});break}case"create":{let{model:o,options:i}=r;Gl(o,i).then(u=>{postMessage({type:t,out:u})},u=>{postMessage({type:t,err:u})});break}case"release":Hl(r),postMessage({type:t});break;case"run":{let{sessionId:o,inputIndices:i,inputs:u,outputIndices:a,options:c}=r;Ll(o,i,u,a,new Array(a.length).fill(null),c).then(p=>{p.some(h=>h[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:p},ql([...u,...p]))},p=>{postMessage({type:t,err:p})});break}case"end-profiling":Fl(r),postMessage({type:t});break;default:}}catch(o){postMessage({type:t,err:o})}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var fr,xt,un,hi,gi,$a,_a,Tr,Er,am,mi,Md,Ud,Wd,Nd,Vd,Gd,Hd,Sa=j(()=>{"use strict";_t();Bd();Cr();fr=()=>!!Ee.wasm.proxy&&typeof document<"u",un=!1,hi=!1,gi=!1,_a=new Map,Tr=(e,t)=>{let r=_a.get(e);r?r.push(t):_a.set(e,[t])},Er=()=>{if(un||!hi||gi||!xt)throw new Error("worker not ready")},am=e=>{switch(e.data.type){case"init-wasm":un=!1,e.data.err?(gi=!0,$a[1](e.data.err)):(hi=!0,$a[0]());break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=_a.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}default:}},mi=typeof document<"u"?document?.currentScript?.src:void 0,Md=async()=>{if(!hi){if(un)throw new Error("multiple calls to 'initWasm()' detected.");if(gi)throw new Error("previous call to 'initWasm()' failed.");if(un=!0,fr())return Ee.wasm.wasmPaths===void 0&&mi&&mi.indexOf("blob:")!==0&&(Ee.wasm.wasmPaths=mi.substr(0,+mi.lastIndexOf("/")+1)),new Promise((e,t)=>{xt?.terminate();let r=URL.createObjectURL(new Blob([Dd()],{type:"text/javascript"}));xt=new Worker(r,{name:"ort-wasm-proxy-worker"}),xt.onerror=i=>t(i),xt.onmessage=am,URL.revokeObjectURL(r),$a=[e,t];let n={type:"init-wasm",in:Ee};xt.postMessage(n)});try{await qo(Ee.wasm),await Td(Ee),hi=!0}catch(e){throw gi=!0,e}finally{un=!1}}},Ud=async e=>{if(fr())return Er(),new Promise((t,r)=>{Tr("init-ep",[t,r]);let n={type:"init-ep",in:{epName:e,env:Ee}};xt.postMessage(n)});await Ed(Ee,e)},Wd=async e=>fr()?(Er(),new Promise((t,r)=>{Tr("copy-from",[t,r]);let n={type:"copy-from",in:{buffer:e}};xt.postMessage(n,[e.buffer])})):va(e),Nd=async(e,t)=>{if(fr()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Er(),new Promise((r,n)=>{Tr("create",[r,n]);let i={type:"create",in:{model:e,options:{...t}}},s=[];e instanceof Uint8Array&&s.push(e.buffer),xt.postMessage(i,s)})}else return Od(e,t)},Vd=async e=>{if(fr())return Er(),new Promise((t,r)=>{Tr("release",[t,r]);let n={type:"release",in:e};xt.postMessage(n)});kd(e)},Gd=async(e,t,r,n,i,s)=>{if(fr()){if(r.some(o=>o[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(i.some(o=>o))throw new Error("pre-allocated output tensor is not supported for proxy.");return Er(),new Promise((o,d)=>{Tr("run",[o,d]);let p=r,m={type:"run",in:{sessionId:e,inputIndices:t,inputs:p,outputIndices:n,options:s}};xt.postMessage(m,zd(p))})}else return Pd(e,t,r,n,i,s)},Hd=async e=>{if(fr())return Er(),new Promise((t,r)=>{Tr("end-profiling",[t,r]);let n={type:"end-profiling",in:e};xt.postMessage(n)});Rd(e)}});var Ld,om,yi,Fd=j(()=>{"use strict";_t();Sa();me();qi();Ld=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},om=e=>{switch(e[3]){case"cpu":return new Je(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!Ln(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:i}=e[2];return Je.fromGpuBuffer(r,{dataType:t,dims:e[1],download:n,dispose:i})}default:throw new Error(`invalid data location: ${e[3]}`)}},yi=class{async fetchModelAndCopyToWasmMemory(t){return Wd(await rn(t))}async loadModel(t,r){pt();let n;typeof t=="string"?typeof process<"u"&&process.versions&&process.versions.node?n=await rn(t):n=await this.fetchModelAndCopyToWasmMemory(t):n=t,[this.sessionId,this.inputNames,this.outputNames]=await Nd(n,r),ut()}async dispose(){return Vd(this.sessionId)}async run(t,r,n){pt();let i=[],s=[];Object.entries(t).forEach(b=>{let $=b[0],v=b[1],S=this.inputNames.indexOf($);if(S===-1)throw new Error(`invalid input '${$}'`);i.push(v),s.push(S)});let o=[],d=[];Object.entries(r).forEach(b=>{let $=b[0],v=b[1],S=this.outputNames.indexOf($);if(S===-1)throw new Error(`invalid output '${$}'`);o.push(v),d.push(S)});let p=i.map((b,$)=>Ld(b,()=>`input "${this.inputNames[s[$]]}"`)),m=o.map((b,$)=>b?Ld(b,()=>`output "${this.outputNames[d[$]]}"`):null),l=await Gd(this.sessionId,s,p,d,m,n),g={};for(let b=0;b<l.length;b++)g[this.outputNames[d[b]]]=o[b]??om(l[b]);return ut(),g}startProfiling(){}endProfiling(){Hd(this.sessionId)}}});var sm,bi,qd=j(()=>{"use strict";_t();Sa();Fd();sm=()=>{if((typeof Ee.wasm.initTimeout!="number"||Ee.wasm.initTimeout<0)&&(Ee.wasm.initTimeout=0),typeof Ee.wasm.simd!="boolean"&&(Ee.wasm.simd=!0),typeof Ee.wasm.proxy!="boolean"&&(Ee.wasm.proxy=!1),typeof Ee.wasm.trace!="boolean"&&(Ee.wasm.trace=!1),typeof Ee.wasm.numThreads!="number"||!Number.isInteger(Ee.wasm.numThreads)||Ee.wasm.numThreads<=0){(typeof self<"u"&&!self.crossOriginIsolated||typeof process<"u"&&process.versions&&process.versions.node)&&(Ee.wasm.numThreads=1);let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Ee.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},bi=class{async init(t){sm(),await Md(),await Ud(t)}async createInferenceSessionHandler(t,r){let n=new yi;return await n.loadModel(t,r),Promise.resolve(n)}}});var jd={};sr(jd,{wasmBackend:()=>um});var um,Kd=j(()=>{"use strict";qd();um=new bi});var dm={};sr(dm,{InferenceSession:()=>_o,TRACE:()=>Qr,TRACE_FUNC_BEGIN:()=>pt,TRACE_FUNC_END:()=>ut,Tensor:()=>Je,TrainingSession:()=>Eo,default:()=>lm,env:()=>Ee,registerBackend:()=>Yt});_t();_t();_t();var ko="1.18.0";var lm=Bi;{let e=(Kd(),Kt(jd)).wasmBackend;Yt("webgpu",e,5),Yt("webnn",e,5),Yt("cpu",e,10),Yt("wasm",e,10)}Object.defineProperty(Ee.versions,"web",{value:ko,enumerable:!0});return Kt(dm);})();
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
